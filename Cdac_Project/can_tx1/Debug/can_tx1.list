
can_tx1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059d8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005b68  08005b68  00006b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bd4  08005bd4  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005bd4  08005bd4  00006bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bdc  08005bdc  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bdc  08005bdc  00006bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005be0  08005be0  00006be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005be4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          00000358  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003b4  200003b4  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f52c  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001faa  00000000  00000000  000165b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e18  00000000  00000000  00018568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b0b  00000000  00000000  00019380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a23  00000000  00000000  00019e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f6b1  00000000  00000000  0003c8ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da4a2  00000000  00000000  0004bf5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00126401  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004244  00000000  00000000  00126444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  0012a688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b50 	.word	0x08005b50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005b50 	.word	0x08005b50

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800088c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000890:	f000 b96a 	b.w	8000b68 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	460c      	mov	r4, r1
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d14e      	bne.n	8000956 <__udivmoddi4+0xaa>
 80008b8:	4694      	mov	ip, r2
 80008ba:	458c      	cmp	ip, r1
 80008bc:	4686      	mov	lr, r0
 80008be:	fab2 f282 	clz	r2, r2
 80008c2:	d962      	bls.n	800098a <__udivmoddi4+0xde>
 80008c4:	b14a      	cbz	r2, 80008da <__udivmoddi4+0x2e>
 80008c6:	f1c2 0320 	rsb	r3, r2, #32
 80008ca:	4091      	lsls	r1, r2
 80008cc:	fa20 f303 	lsr.w	r3, r0, r3
 80008d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008d4:	4319      	orrs	r1, r3
 80008d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008de:	fa1f f68c 	uxth.w	r6, ip
 80008e2:	fbb1 f4f7 	udiv	r4, r1, r7
 80008e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008ea:	fb07 1114 	mls	r1, r7, r4, r1
 80008ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008f2:	fb04 f106 	mul.w	r1, r4, r6
 80008f6:	4299      	cmp	r1, r3
 80008f8:	d90a      	bls.n	8000910 <__udivmoddi4+0x64>
 80008fa:	eb1c 0303 	adds.w	r3, ip, r3
 80008fe:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000902:	f080 8112 	bcs.w	8000b2a <__udivmoddi4+0x27e>
 8000906:	4299      	cmp	r1, r3
 8000908:	f240 810f 	bls.w	8000b2a <__udivmoddi4+0x27e>
 800090c:	3c02      	subs	r4, #2
 800090e:	4463      	add	r3, ip
 8000910:	1a59      	subs	r1, r3, r1
 8000912:	fa1f f38e 	uxth.w	r3, lr
 8000916:	fbb1 f0f7 	udiv	r0, r1, r7
 800091a:	fb07 1110 	mls	r1, r7, r0, r1
 800091e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000922:	fb00 f606 	mul.w	r6, r0, r6
 8000926:	429e      	cmp	r6, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x94>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000932:	f080 80fc 	bcs.w	8000b2e <__udivmoddi4+0x282>
 8000936:	429e      	cmp	r6, r3
 8000938:	f240 80f9 	bls.w	8000b2e <__udivmoddi4+0x282>
 800093c:	4463      	add	r3, ip
 800093e:	3802      	subs	r0, #2
 8000940:	1b9b      	subs	r3, r3, r6
 8000942:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000946:	2100      	movs	r1, #0
 8000948:	b11d      	cbz	r5, 8000952 <__udivmoddi4+0xa6>
 800094a:	40d3      	lsrs	r3, r2
 800094c:	2200      	movs	r2, #0
 800094e:	e9c5 3200 	strd	r3, r2, [r5]
 8000952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000956:	428b      	cmp	r3, r1
 8000958:	d905      	bls.n	8000966 <__udivmoddi4+0xba>
 800095a:	b10d      	cbz	r5, 8000960 <__udivmoddi4+0xb4>
 800095c:	e9c5 0100 	strd	r0, r1, [r5]
 8000960:	2100      	movs	r1, #0
 8000962:	4608      	mov	r0, r1
 8000964:	e7f5      	b.n	8000952 <__udivmoddi4+0xa6>
 8000966:	fab3 f183 	clz	r1, r3
 800096a:	2900      	cmp	r1, #0
 800096c:	d146      	bne.n	80009fc <__udivmoddi4+0x150>
 800096e:	42a3      	cmp	r3, r4
 8000970:	d302      	bcc.n	8000978 <__udivmoddi4+0xcc>
 8000972:	4290      	cmp	r0, r2
 8000974:	f0c0 80f0 	bcc.w	8000b58 <__udivmoddi4+0x2ac>
 8000978:	1a86      	subs	r6, r0, r2
 800097a:	eb64 0303 	sbc.w	r3, r4, r3
 800097e:	2001      	movs	r0, #1
 8000980:	2d00      	cmp	r5, #0
 8000982:	d0e6      	beq.n	8000952 <__udivmoddi4+0xa6>
 8000984:	e9c5 6300 	strd	r6, r3, [r5]
 8000988:	e7e3      	b.n	8000952 <__udivmoddi4+0xa6>
 800098a:	2a00      	cmp	r2, #0
 800098c:	f040 8090 	bne.w	8000ab0 <__udivmoddi4+0x204>
 8000990:	eba1 040c 	sub.w	r4, r1, ip
 8000994:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000998:	fa1f f78c 	uxth.w	r7, ip
 800099c:	2101      	movs	r1, #1
 800099e:	fbb4 f6f8 	udiv	r6, r4, r8
 80009a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009a6:	fb08 4416 	mls	r4, r8, r6, r4
 80009aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ae:	fb07 f006 	mul.w	r0, r7, r6
 80009b2:	4298      	cmp	r0, r3
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x11c>
 80009b6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ba:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x11a>
 80009c0:	4298      	cmp	r0, r3
 80009c2:	f200 80cd 	bhi.w	8000b60 <__udivmoddi4+0x2b4>
 80009c6:	4626      	mov	r6, r4
 80009c8:	1a1c      	subs	r4, r3, r0
 80009ca:	fa1f f38e 	uxth.w	r3, lr
 80009ce:	fbb4 f0f8 	udiv	r0, r4, r8
 80009d2:	fb08 4410 	mls	r4, r8, r0, r4
 80009d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009da:	fb00 f707 	mul.w	r7, r0, r7
 80009de:	429f      	cmp	r7, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x148>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80009ea:	d202      	bcs.n	80009f2 <__udivmoddi4+0x146>
 80009ec:	429f      	cmp	r7, r3
 80009ee:	f200 80b0 	bhi.w	8000b52 <__udivmoddi4+0x2a6>
 80009f2:	4620      	mov	r0, r4
 80009f4:	1bdb      	subs	r3, r3, r7
 80009f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009fa:	e7a5      	b.n	8000948 <__udivmoddi4+0x9c>
 80009fc:	f1c1 0620 	rsb	r6, r1, #32
 8000a00:	408b      	lsls	r3, r1
 8000a02:	fa22 f706 	lsr.w	r7, r2, r6
 8000a06:	431f      	orrs	r7, r3
 8000a08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a10:	ea43 030c 	orr.w	r3, r3, ip
 8000a14:	40f4      	lsrs	r4, r6
 8000a16:	fa00 f801 	lsl.w	r8, r0, r1
 8000a1a:	0c38      	lsrs	r0, r7, #16
 8000a1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a20:	fbb4 fef0 	udiv	lr, r4, r0
 8000a24:	fa1f fc87 	uxth.w	ip, r7
 8000a28:	fb00 441e 	mls	r4, r0, lr, r4
 8000a2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a30:	fb0e f90c 	mul.w	r9, lr, ip
 8000a34:	45a1      	cmp	r9, r4
 8000a36:	fa02 f201 	lsl.w	r2, r2, r1
 8000a3a:	d90a      	bls.n	8000a52 <__udivmoddi4+0x1a6>
 8000a3c:	193c      	adds	r4, r7, r4
 8000a3e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000a42:	f080 8084 	bcs.w	8000b4e <__udivmoddi4+0x2a2>
 8000a46:	45a1      	cmp	r9, r4
 8000a48:	f240 8081 	bls.w	8000b4e <__udivmoddi4+0x2a2>
 8000a4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a50:	443c      	add	r4, r7
 8000a52:	eba4 0409 	sub.w	r4, r4, r9
 8000a56:	fa1f f983 	uxth.w	r9, r3
 8000a5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a6a:	45a4      	cmp	ip, r4
 8000a6c:	d907      	bls.n	8000a7e <__udivmoddi4+0x1d2>
 8000a6e:	193c      	adds	r4, r7, r4
 8000a70:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000a74:	d267      	bcs.n	8000b46 <__udivmoddi4+0x29a>
 8000a76:	45a4      	cmp	ip, r4
 8000a78:	d965      	bls.n	8000b46 <__udivmoddi4+0x29a>
 8000a7a:	3b02      	subs	r3, #2
 8000a7c:	443c      	add	r4, r7
 8000a7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a82:	fba0 9302 	umull	r9, r3, r0, r2
 8000a86:	eba4 040c 	sub.w	r4, r4, ip
 8000a8a:	429c      	cmp	r4, r3
 8000a8c:	46ce      	mov	lr, r9
 8000a8e:	469c      	mov	ip, r3
 8000a90:	d351      	bcc.n	8000b36 <__udivmoddi4+0x28a>
 8000a92:	d04e      	beq.n	8000b32 <__udivmoddi4+0x286>
 8000a94:	b155      	cbz	r5, 8000aac <__udivmoddi4+0x200>
 8000a96:	ebb8 030e 	subs.w	r3, r8, lr
 8000a9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000aa2:	40cb      	lsrs	r3, r1
 8000aa4:	431e      	orrs	r6, r3
 8000aa6:	40cc      	lsrs	r4, r1
 8000aa8:	e9c5 6400 	strd	r6, r4, [r5]
 8000aac:	2100      	movs	r1, #0
 8000aae:	e750      	b.n	8000952 <__udivmoddi4+0xa6>
 8000ab0:	f1c2 0320 	rsb	r3, r2, #32
 8000ab4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ab8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000abc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ac0:	4094      	lsls	r4, r2
 8000ac2:	430c      	orrs	r4, r1
 8000ac4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000acc:	fa1f f78c 	uxth.w	r7, ip
 8000ad0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ad4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ad8:	0c23      	lsrs	r3, r4, #16
 8000ada:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ade:	fb00 f107 	mul.w	r1, r0, r7
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0x24c>
 8000ae6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aea:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000aee:	d22c      	bcs.n	8000b4a <__udivmoddi4+0x29e>
 8000af0:	4299      	cmp	r1, r3
 8000af2:	d92a      	bls.n	8000b4a <__udivmoddi4+0x29e>
 8000af4:	3802      	subs	r0, #2
 8000af6:	4463      	add	r3, ip
 8000af8:	1a5b      	subs	r3, r3, r1
 8000afa:	b2a4      	uxth	r4, r4
 8000afc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b00:	fb08 3311 	mls	r3, r8, r1, r3
 8000b04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b08:	fb01 f307 	mul.w	r3, r1, r7
 8000b0c:	42a3      	cmp	r3, r4
 8000b0e:	d908      	bls.n	8000b22 <__udivmoddi4+0x276>
 8000b10:	eb1c 0404 	adds.w	r4, ip, r4
 8000b14:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000b18:	d213      	bcs.n	8000b42 <__udivmoddi4+0x296>
 8000b1a:	42a3      	cmp	r3, r4
 8000b1c:	d911      	bls.n	8000b42 <__udivmoddi4+0x296>
 8000b1e:	3902      	subs	r1, #2
 8000b20:	4464      	add	r4, ip
 8000b22:	1ae4      	subs	r4, r4, r3
 8000b24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b28:	e739      	b.n	800099e <__udivmoddi4+0xf2>
 8000b2a:	4604      	mov	r4, r0
 8000b2c:	e6f0      	b.n	8000910 <__udivmoddi4+0x64>
 8000b2e:	4608      	mov	r0, r1
 8000b30:	e706      	b.n	8000940 <__udivmoddi4+0x94>
 8000b32:	45c8      	cmp	r8, r9
 8000b34:	d2ae      	bcs.n	8000a94 <__udivmoddi4+0x1e8>
 8000b36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b3e:	3801      	subs	r0, #1
 8000b40:	e7a8      	b.n	8000a94 <__udivmoddi4+0x1e8>
 8000b42:	4631      	mov	r1, r6
 8000b44:	e7ed      	b.n	8000b22 <__udivmoddi4+0x276>
 8000b46:	4603      	mov	r3, r0
 8000b48:	e799      	b.n	8000a7e <__udivmoddi4+0x1d2>
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	e7d4      	b.n	8000af8 <__udivmoddi4+0x24c>
 8000b4e:	46d6      	mov	lr, sl
 8000b50:	e77f      	b.n	8000a52 <__udivmoddi4+0x1a6>
 8000b52:	4463      	add	r3, ip
 8000b54:	3802      	subs	r0, #2
 8000b56:	e74d      	b.n	80009f4 <__udivmoddi4+0x148>
 8000b58:	4606      	mov	r6, r0
 8000b5a:	4623      	mov	r3, r4
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e70f      	b.n	8000980 <__udivmoddi4+0xd4>
 8000b60:	3e02      	subs	r6, #2
 8000b62:	4463      	add	r3, ip
 8000b64:	e730      	b.n	80009c8 <__udivmoddi4+0x11c>
 8000b66:	bf00      	nop

08000b68 <__aeabi_idiv0>:
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <Ultrasonic_distance>:
/* USER CODE BEGIN 0 */

//================================================
//ULTRASONIC_FUNCTIONS===========================
void Ultrasonic_distance(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	//Send Trigger Signal to ultrasonic trigger pin
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, GPIO_PIN_SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b76:	480b      	ldr	r0, [pc, #44]	@ (8000ba4 <Ultrasonic_distance+0x38>)
 8000b78:	f002 fc0a 	bl	8003390 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000b7c:	200a      	movs	r0, #10
 8000b7e:	f000 fef3 	bl	8001968 <HAL_Delay>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b88:	4806      	ldr	r0, [pc, #24]	@ (8000ba4 <Ultrasonic_distance+0x38>)
 8000b8a:	f002 fc01 	bl	8003390 <HAL_GPIO_WritePin>
	//Enable Timer counter
	__HAL_TIM_ENABLE_IT(ULTRASONIC_ECHO_PIN_IC, TIM_IT_CC1);
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <Ultrasonic_distance+0x3c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68da      	ldr	r2, [r3, #12]
 8000b94:	4b04      	ldr	r3, [pc, #16]	@ (8000ba8 <Ultrasonic_distance+0x3c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f042 0202 	orr.w	r2, r2, #2
 8000b9c:	60da      	str	r2, [r3, #12]
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40020c00 	.word	0x40020c00
 8000ba8:	20000130 	.word	0x20000130
 8000bac:	00000000 	.word	0x00000000

08000bb0 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	//Capture Rising Edge
	if(isRisingCaptured == 0)
 8000bb8:	4b43      	ldr	r3, [pc, #268]	@ (8000cc8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d11a      	bne.n	8000bf8 <HAL_TIM_IC_CaptureCallback+0x48>
	{
		InputCaptureValue_1 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4841      	ldr	r0, [pc, #260]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000bc6:	f003 fbab 	bl	8004320 <HAL_TIM_ReadCapturedValue>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	4a40      	ldr	r2, [pc, #256]	@ (8000cd0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000bce:	6013      	str	r3, [r2, #0]
		isRisingCaptured = 1;
 8000bd0:	4b3d      	ldr	r3, [pc, #244]	@ (8000cc8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	6a1a      	ldr	r2, [r3, #32]
 8000bdc:	4b3b      	ldr	r3, [pc, #236]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f022 020a 	bic.w	r2, r2, #10
 8000be4:	621a      	str	r2, [r3, #32]
 8000be6:	4b39      	ldr	r3, [pc, #228]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	6a1a      	ldr	r2, [r3, #32]
 8000bec:	4b37      	ldr	r3, [pc, #220]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f042 0202 	orr.w	r2, r2, #2
 8000bf4:	621a      	str	r2, [r3, #32]
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
		__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);

	}

}
 8000bf6:	e05d      	b.n	8000cb4 <HAL_TIM_IC_CaptureCallback+0x104>
	else if(isRisingCaptured == 1)
 8000bf8:	4b33      	ldr	r3, [pc, #204]	@ (8000cc8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d158      	bne.n	8000cb4 <HAL_TIM_IC_CaptureCallback+0x104>
		InputCaptureValue_2 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8000c02:	2100      	movs	r1, #0
 8000c04:	4831      	ldr	r0, [pc, #196]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000c06:	f003 fb8b 	bl	8004320 <HAL_TIM_ReadCapturedValue>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4a31      	ldr	r2, [pc, #196]	@ (8000cd4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000c0e:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000c10:	4b2e      	ldr	r3, [pc, #184]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2200      	movs	r2, #0
 8000c16:	625a      	str	r2, [r3, #36]	@ 0x24
		if(InputCaptureValue_2 > InputCaptureValue_1)
 8000c18:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d907      	bls.n	8000c34 <HAL_TIM_IC_CaptureCallback+0x84>
			InputCaptureDifference = InputCaptureValue_2 - InputCaptureValue_1;
 8000c24:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b29      	ldr	r3, [pc, #164]	@ (8000cd0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	4a2a      	ldr	r2, [pc, #168]	@ (8000cd8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	e00f      	b.n	8000c54 <HAL_TIM_IC_CaptureCallback+0xa4>
		else if(InputCaptureValue_1 > InputCaptureValue_2)
 8000c34:	4b26      	ldr	r3, [pc, #152]	@ (8000cd0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b26      	ldr	r3, [pc, #152]	@ (8000cd4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d909      	bls.n	8000c54 <HAL_TIM_IC_CaptureCallback+0xa4>
			InputCaptureDifference = (0xFFFF - InputCaptureValue_1) + InputCaptureValue_2;
 8000c40:	4b24      	ldr	r3, [pc, #144]	@ (8000cd4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b22      	ldr	r3, [pc, #136]	@ (8000cd0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000c4e:	33ff      	adds	r3, #255	@ 0xff
 8000c50:	4a21      	ldr	r2, [pc, #132]	@ (8000cd8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000c52:	6013      	str	r3, [r2, #0]
		distance = InputCaptureDifference * 0.0173;
 8000c54:	4b20      	ldr	r3, [pc, #128]	@ (8000cd8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fd75 	bl	8000748 <__aeabi_ui2d>
 8000c5e:	a318      	add	r3, pc, #96	@ (adr r3, 8000cc0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c64:	f7ff fb04 	bl	8000270 <__aeabi_dmul>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	4619      	mov	r1, r3
 8000c70:	f7ff fde4 	bl	800083c <__aeabi_d2uiz>
 8000c74:	4603      	mov	r3, r0
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000c7a:	801a      	strh	r2, [r3, #0]
		isReadingFinished = 1;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ce0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	701a      	strb	r2, [r3, #0]
		isRisingCaptured = 0;
 8000c82:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000c88:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	6a1a      	ldr	r2, [r3, #32]
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f022 020a 	bic.w	r2, r2, #10
 8000c96:	621a      	str	r2, [r3, #32]
 8000c98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	6a12      	ldr	r2, [r2, #32]
 8000ca2:	621a      	str	r2, [r3, #32]
		__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8000ca4:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	68da      	ldr	r2, [r3, #12]
 8000caa:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f022 0202 	bic.w	r2, r2, #2
 8000cb2:	60da      	str	r2, [r3, #12]
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	f3af 8000 	nop.w
 8000cc0:	58e21965 	.word	0x58e21965
 8000cc4:	3f91b717 	.word	0x3f91b717
 8000cc8:	200001c3 	.word	0x200001c3
 8000ccc:	20000130 	.word	0x20000130
 8000cd0:	200001c4 	.word	0x200001c4
 8000cd4:	200001c8 	.word	0x200001c8
 8000cd8:	200001cc 	.word	0x200001cc
 8000cdc:	200001c0 	.word	0x200001c0
 8000ce0:	200001c2 	.word	0x200001c2

08000ce4 <HAL_CAN_RxFifo0MsgPendingCallback>:
    previousTime = currentTime;

}
*/

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000cec:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000cee:	4a0b      	ldr	r2, [pc, #44]	@ (8000d1c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f001 fd4c 	bl	8002790 <HAL_CAN_GetRxMessage>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 8000cfe:	f000 fb81 	bl	8001404 <Error_Handler>

	if(RxHeader.DLC == 2)
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000d04:	691b      	ldr	r3, [r3, #16]
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d102      	bne.n	8000d10 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
		datacheck = 1;
 8000d0a:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	601a      	str	r2, [r3, #0]


}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000254 	.word	0x20000254
 8000d1c:	20000230 	.word	0x20000230
 8000d20:	200001d0 	.word	0x200001d0

08000d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2a:	f000 fdab 	bl	8001884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2e:	f000 f90d 	bl	8000f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d32:	f000 fb07 	bl	8001344 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000d36:	f000 fa17 	bl	8001168 <MX_CAN1_Init>
  MX_ADC1_Init();
 8000d3a:	f000 f971 	bl	8001020 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d3e:	f000 f9c1 	bl	80010c4 <MX_ADC2_Init>
  MX_TIM4_Init();
 8000d42:	f000 fa65 	bl	8001210 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000d46:	f000 fad3 	bl	80012f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

HAL_CAN_Start(&hcan1);
 8000d4a:	4870      	ldr	r0, [pc, #448]	@ (8000f0c <main+0x1e8>)
 8000d4c:	f001 fc0c 	bl	8002568 <HAL_CAN_Start>
  while (1)
  {
	  //MQ3_START.............................................................

	  	 	  // ADC Single conversion mode -- Polling
	  	 	  HAL_ADC_Start(&hadc1);
 8000d50:	486f      	ldr	r0, [pc, #444]	@ (8000f10 <main+0x1ec>)
 8000d52:	f000 fe71 	bl	8001a38 <HAL_ADC_Start>
	  	 	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000d56:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d5a:	486d      	ldr	r0, [pc, #436]	@ (8000f10 <main+0x1ec>)
 8000d5c:	f000 ff71 	bl	8001c42 <HAL_ADC_PollForConversion>
	  	 	  mq = HAL_ADC_GetValue(&hadc1);
 8000d60:	486b      	ldr	r0, [pc, #428]	@ (8000f10 <main+0x1ec>)
 8000d62:	f000 fff9 	bl	8001d58 <HAL_ADC_GetValue>
 8000d66:	4603      	mov	r3, r0
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	4b6a      	ldr	r3, [pc, #424]	@ (8000f14 <main+0x1f0>)
 8000d6c:	801a      	strh	r2, [r3, #0]
	  	 	  HAL_ADC_Stop(&hadc1);
 8000d6e:	4868      	ldr	r0, [pc, #416]	@ (8000f10 <main+0x1ec>)
 8000d70:	f000 ff34 	bl	8001bdc <HAL_ADC_Stop>
	  	 	  if (mq >= 1000)
 8000d74:	4b67      	ldr	r3, [pc, #412]	@ (8000f14 <main+0x1f0>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d7c:	d305      	bcc.n	8000d8a <main+0x66>
	  	 	  {
	  	 		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,GPIO_PIN_SET);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d84:	4864      	ldr	r0, [pc, #400]	@ (8000f18 <main+0x1f4>)
 8000d86:	f002 fb03 	bl	8003390 <HAL_GPIO_WritePin>

	  	 	  //LM35_BEGIN...............................................................



	  	 	 	  	  HAL_ADC_Start(&hadc2);
 8000d8a:	4864      	ldr	r0, [pc, #400]	@ (8000f1c <main+0x1f8>)
 8000d8c:	f000 fe54 	bl	8001a38 <HAL_ADC_Start>
	  	 	 	  	  HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000d90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d94:	4861      	ldr	r0, [pc, #388]	@ (8000f1c <main+0x1f8>)
 8000d96:	f000 ff54 	bl	8001c42 <HAL_ADC_PollForConversion>
	  	 	 	  	  lm = HAL_ADC_GetValue(&hadc2);
 8000d9a:	4860      	ldr	r0, [pc, #384]	@ (8000f1c <main+0x1f8>)
 8000d9c:	f000 ffdc 	bl	8001d58 <HAL_ADC_GetValue>
 8000da0:	4603      	mov	r3, r0
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	4b5e      	ldr	r3, [pc, #376]	@ (8000f20 <main+0x1fc>)
 8000da6:	801a      	strh	r2, [r3, #0]
	  	 	 	  	  HAL_ADC_Stop(&hadc2);
 8000da8:	485c      	ldr	r0, [pc, #368]	@ (8000f1c <main+0x1f8>)
 8000daa:	f000 ff17 	bl	8001bdc <HAL_ADC_Stop>




	  	 	 	  	//ULTRASONIC_START...........................
	  	 	 	  		Ultrasonic_distance();
 8000dae:	f7ff fedd 	bl	8000b6c <Ultrasonic_distance>
	  	 	 	  		//Calculate_Speed();
	  	 	 	  	//ULTRASONIC_STOP...........................

	  //can_message_sending........................................
	  //SENDING===================================================
	  	 	 	  TxHeader.DLC = 2;
 8000db2:	4b5c      	ldr	r3, [pc, #368]	@ (8000f24 <main+0x200>)
 8000db4:	2202      	movs	r2, #2
 8000db6:	611a      	str	r2, [r3, #16]
	  	 	 	  TxHeader.IDE = CAN_ID_STD;
 8000db8:	4b5a      	ldr	r3, [pc, #360]	@ (8000f24 <main+0x200>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
	  	 	 	  TxHeader.RTR = CAN_RTR_DATA;
 8000dbe:	4b59      	ldr	r3, [pc, #356]	@ (8000f24 <main+0x200>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	60da      	str	r2, [r3, #12]
	  	 	 	  TxHeader.StdId = 0x446;
 8000dc4:	4b57      	ldr	r3, [pc, #348]	@ (8000f24 <main+0x200>)
 8000dc6:	f240 4246 	movw	r2, #1094	@ 0x446
 8000dca:	601a      	str	r2, [r3, #0]
	  	 	 	  TxHeader.ExtId = 0x00;
 8000dcc:	4b55      	ldr	r3, [pc, #340]	@ (8000f24 <main+0x200>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	605a      	str	r2, [r3, #4]
	  	 	 	  TxHeader.TransmitGlobalTime = DISABLE;
 8000dd2:	4b54      	ldr	r3, [pc, #336]	@ (8000f24 <main+0x200>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	751a      	strb	r2, [r3, #20]
	  	 	 	  TxData[0]=(uint8_t )mq&0xFF;
 8000dd8:	4b4e      	ldr	r3, [pc, #312]	@ (8000f14 <main+0x1f0>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b52      	ldr	r3, [pc, #328]	@ (8000f28 <main+0x204>)
 8000de0:	701a      	strb	r2, [r3, #0]
	  	 	 	  TxData[1]=(uint8_t)(mq>>8)&0xFF;
 8000de2:	4b4c      	ldr	r3, [pc, #304]	@ (8000f14 <main+0x1f0>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	0a1b      	lsrs	r3, r3, #8
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	4b4e      	ldr	r3, [pc, #312]	@ (8000f28 <main+0x204>)
 8000dee:	705a      	strb	r2, [r3, #1]
	  	 	 	 HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox[0]);
 8000df0:	4b4e      	ldr	r3, [pc, #312]	@ (8000f2c <main+0x208>)
 8000df2:	4a4d      	ldr	r2, [pc, #308]	@ (8000f28 <main+0x204>)
 8000df4:	494b      	ldr	r1, [pc, #300]	@ (8000f24 <main+0x200>)
 8000df6:	4845      	ldr	r0, [pc, #276]	@ (8000f0c <main+0x1e8>)
 8000df8:	f001 fbfa 	bl	80025f0 <HAL_CAN_AddTxMessage>

	  	 	  TxHeader.DLC = 2;
 8000dfc:	4b49      	ldr	r3, [pc, #292]	@ (8000f24 <main+0x200>)
 8000dfe:	2202      	movs	r2, #2
 8000e00:	611a      	str	r2, [r3, #16]

	  	 	 	  	 	 	  TxHeader.IDE = CAN_ID_STD;
 8000e02:	4b48      	ldr	r3, [pc, #288]	@ (8000f24 <main+0x200>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
	  	 	 	  	 	 	  TxHeader.RTR = CAN_RTR_DATA;
 8000e08:	4b46      	ldr	r3, [pc, #280]	@ (8000f24 <main+0x200>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
	  	 	 	  	 	 	  TxHeader.StdId = 0x445;
 8000e0e:	4b45      	ldr	r3, [pc, #276]	@ (8000f24 <main+0x200>)
 8000e10:	f240 4245 	movw	r2, #1093	@ 0x445
 8000e14:	601a      	str	r2, [r3, #0]
	  	 	 	  	 	 	  TxHeader.ExtId = 0x00;
 8000e16:	4b43      	ldr	r3, [pc, #268]	@ (8000f24 <main+0x200>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	605a      	str	r2, [r3, #4]
	  	 	 	  	 	 	  TxHeader.TransmitGlobalTime = DISABLE;
 8000e1c:	4b41      	ldr	r3, [pc, #260]	@ (8000f24 <main+0x200>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	751a      	strb	r2, [r3, #20]
	  	 	 	  	       	  TxData[0]= (uint8_t ) lm & 0xFF;
 8000e22:	4b3f      	ldr	r3, [pc, #252]	@ (8000f20 <main+0x1fc>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	4b3f      	ldr	r3, [pc, #252]	@ (8000f28 <main+0x204>)
 8000e2a:	701a      	strb	r2, [r3, #0]
	  	 	 	  	 		  TxData[1]= (uint8_t)(lm>>8) & 0xFF;
 8000e2c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f20 <main+0x1fc>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4b3c      	ldr	r3, [pc, #240]	@ (8000f28 <main+0x204>)
 8000e38:	705a      	strb	r2, [r3, #1]
	  	 	 	  	 	 	 HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox[0]);
 8000e3a:	4b3c      	ldr	r3, [pc, #240]	@ (8000f2c <main+0x208>)
 8000e3c:	4a3a      	ldr	r2, [pc, #232]	@ (8000f28 <main+0x204>)
 8000e3e:	4939      	ldr	r1, [pc, #228]	@ (8000f24 <main+0x200>)
 8000e40:	4832      	ldr	r0, [pc, #200]	@ (8000f0c <main+0x1e8>)
 8000e42:	f001 fbd5 	bl	80025f0 <HAL_CAN_AddTxMessage>

	  	 	 	  	  	  	  	  TxHeader.DLC = 2;
 8000e46:	4b37      	ldr	r3, [pc, #220]	@ (8000f24 <main+0x200>)
 8000e48:	2202      	movs	r2, #2
 8000e4a:	611a      	str	r2, [r3, #16]
	  	 	 		  	 	 	  TxHeader.IDE = CAN_ID_STD;
 8000e4c:	4b35      	ldr	r3, [pc, #212]	@ (8000f24 <main+0x200>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
	  	 	 		  	 	 	  TxHeader.RTR = CAN_RTR_DATA;
 8000e52:	4b34      	ldr	r3, [pc, #208]	@ (8000f24 <main+0x200>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
	  	 	 		  	 	 	  TxHeader.StdId =0x44A;
 8000e58:	4b32      	ldr	r3, [pc, #200]	@ (8000f24 <main+0x200>)
 8000e5a:	f240 424a 	movw	r2, #1098	@ 0x44a
 8000e5e:	601a      	str	r2, [r3, #0]

	  	 	 		  	 	 	  TxHeader.ExtId = 0x00;
 8000e60:	4b30      	ldr	r3, [pc, #192]	@ (8000f24 <main+0x200>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	605a      	str	r2, [r3, #4]
	  	 	 		  	 	 	  TxHeader.TransmitGlobalTime = DISABLE;
 8000e66:	4b2f      	ldr	r3, [pc, #188]	@ (8000f24 <main+0x200>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	751a      	strb	r2, [r3, #20]

	  	 	 	            TxData[0] = (uint8_t) (distance & 0xFF);
 8000e6c:	4b30      	ldr	r3, [pc, #192]	@ (8000f30 <main+0x20c>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	4b2c      	ldr	r3, [pc, #176]	@ (8000f28 <main+0x204>)
 8000e76:	701a      	strb	r2, [r3, #0]
	  	 	 				TxData[1] = (uint8_t) ((distance >> 8) & 0xFF);
 8000e78:	4b2d      	ldr	r3, [pc, #180]	@ (8000f30 <main+0x20c>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	0a1b      	lsrs	r3, r3, #8
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	4b28      	ldr	r3, [pc, #160]	@ (8000f28 <main+0x204>)
 8000e86:	705a      	strb	r2, [r3, #1]


	  	 	 	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox[1]);
 8000e88:	4b2a      	ldr	r3, [pc, #168]	@ (8000f34 <main+0x210>)
 8000e8a:	4a27      	ldr	r2, [pc, #156]	@ (8000f28 <main+0x204>)
 8000e8c:	4925      	ldr	r1, [pc, #148]	@ (8000f24 <main+0x200>)
 8000e8e:	481f      	ldr	r0, [pc, #124]	@ (8000f0c <main+0x1e8>)
 8000e90:	f001 fbae 	bl	80025f0 <HAL_CAN_AddTxMessage>
	  	 	 	//SENT======================================================


	  	 	 	                     HAL_Delay(500);
 8000e94:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e98:	f000 fd66 	bl	8001968 <HAL_Delay>
	  	 	 		 	  			  if(datacheck){
 8000e9c:	4b26      	ldr	r3, [pc, #152]	@ (8000f38 <main+0x214>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d018      	beq.n	8000ed6 <main+0x1b2>
	  	 	 		 	  				  for(int i = 0; i<RxData[1]; i++){
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	e00c      	b.n	8000ec4 <main+0x1a0>
	  	 	 		 	  					  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000eaa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eae:	481a      	ldr	r0, [pc, #104]	@ (8000f18 <main+0x1f4>)
 8000eb0:	f002 fa87 	bl	80033c2 <HAL_GPIO_TogglePin>
	  	 	 		 	  					  HAL_Delay(RxData[0]);
 8000eb4:	4b21      	ldr	r3, [pc, #132]	@ (8000f3c <main+0x218>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 fd55 	bl	8001968 <HAL_Delay>
	  	 	 		 	  				  for(int i = 0; i<RxData[1]; i++){
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f3c <main+0x218>)
 8000ec6:	785b      	ldrb	r3, [r3, #1]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	dbec      	blt.n	8000eaa <main+0x186>
	  	 	 		 	  			  	  }
	  	 	 		 	  				  datacheck = 0;
 8000ed0:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <main+0x214>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
	  	 	 		 	  			  }

	  	 	 		 sprintf(str,"mq3=%d\r\nlm=%d\r\ndistance=%d\r\n", mq,lm,distance);
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <main+0x1f0>)
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <main+0x1fc>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <main+0x20c>)
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	460b      	mov	r3, r1
 8000eec:	4914      	ldr	r1, [pc, #80]	@ (8000f40 <main+0x21c>)
 8000eee:	4815      	ldr	r0, [pc, #84]	@ (8000f44 <main+0x220>)
 8000ef0:	f004 f98e 	bl	8005210 <siprintf>
	  	 	 		HAL_UART_Transmit(&huart2,(uint8_t*)str, sizeof(str), HAL_MAX_DELAY);
 8000ef4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ef8:	2240      	movs	r2, #64	@ 0x40
 8000efa:	4912      	ldr	r1, [pc, #72]	@ (8000f44 <main+0x220>)
 8000efc:	4812      	ldr	r0, [pc, #72]	@ (8000f48 <main+0x224>)
 8000efe:	f003 fdcb 	bl	8004a98 <HAL_UART_Transmit>
	  	 	 		HAL_Delay(500);
 8000f02:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f06:	f000 fd2f 	bl	8001968 <HAL_Delay>
	  	 	  HAL_ADC_Start(&hadc1);
 8000f0a:	e721      	b.n	8000d50 <main+0x2c>
 8000f0c:	20000108 	.word	0x20000108
 8000f10:	20000078 	.word	0x20000078
 8000f14:	200001d4 	.word	0x200001d4
 8000f18:	40020c00 	.word	0x40020c00
 8000f1c:	200000c0 	.word	0x200000c0
 8000f20:	200001d6 	.word	0x200001d6
 8000f24:	20000218 	.word	0x20000218
 8000f28:	2000024c 	.word	0x2000024c
 8000f2c:	2000025c 	.word	0x2000025c
 8000f30:	200001c0 	.word	0x200001c0
 8000f34:	20000260 	.word	0x20000260
 8000f38:	200001d0 	.word	0x200001d0
 8000f3c:	20000254 	.word	0x20000254
 8000f40:	08005b68 	.word	0x08005b68
 8000f44:	200001d8 	.word	0x200001d8
 8000f48:	20000178 	.word	0x20000178

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b094      	sub	sp, #80	@ 0x50
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	f107 0320 	add.w	r3, r7, #32
 8000f56:	2230      	movs	r2, #48	@ 0x30
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f004 f978 	bl	8005250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	4b28      	ldr	r3, [pc, #160]	@ (8001018 <SystemClock_Config+0xcc>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f78:	4a27      	ldr	r2, [pc, #156]	@ (8001018 <SystemClock_Config+0xcc>)
 8000f7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f80:	4b25      	ldr	r3, [pc, #148]	@ (8001018 <SystemClock_Config+0xcc>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	4b22      	ldr	r3, [pc, #136]	@ (800101c <SystemClock_Config+0xd0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a21      	ldr	r2, [pc, #132]	@ (800101c <SystemClock_Config+0xd0>)
 8000f96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	@ (800101c <SystemClock_Config+0xd0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fb0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000fc0:	2348      	movs	r3, #72	@ 0x48
 8000fc2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fc8:	2307      	movs	r3, #7
 8000fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fcc:	f107 0320 	add.w	r3, r7, #32
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f002 fa11 	bl	80033f8 <HAL_RCC_OscConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fdc:	f000 fa12 	bl	8001404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ff0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ff2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ff6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 fc72 	bl	80038e8 <HAL_RCC_ClockConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800100a:	f000 f9fb 	bl	8001404 <Error_Handler>
  }
}
 800100e:	bf00      	nop
 8001010:	3750      	adds	r7, #80	@ 0x50
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	40007000 	.word	0x40007000

08001020 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001026:	463b      	mov	r3, r7
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001032:	4b21      	ldr	r3, [pc, #132]	@ (80010b8 <MX_ADC1_Init+0x98>)
 8001034:	4a21      	ldr	r2, [pc, #132]	@ (80010bc <MX_ADC1_Init+0x9c>)
 8001036:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001038:	4b1f      	ldr	r3, [pc, #124]	@ (80010b8 <MX_ADC1_Init+0x98>)
 800103a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800103e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001040:	4b1d      	ldr	r3, [pc, #116]	@ (80010b8 <MX_ADC1_Init+0x98>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001046:	4b1c      	ldr	r3, [pc, #112]	@ (80010b8 <MX_ADC1_Init+0x98>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800104c:	4b1a      	ldr	r3, [pc, #104]	@ (80010b8 <MX_ADC1_Init+0x98>)
 800104e:	2200      	movs	r2, #0
 8001050:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001052:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <MX_ADC1_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105a:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <MX_ADC1_Init+0x98>)
 800105c:	2200      	movs	r2, #0
 800105e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001060:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <MX_ADC1_Init+0x98>)
 8001062:	4a17      	ldr	r2, [pc, #92]	@ (80010c0 <MX_ADC1_Init+0xa0>)
 8001064:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001066:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <MX_ADC1_Init+0x98>)
 8001068:	2200      	movs	r2, #0
 800106a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800106c:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <MX_ADC1_Init+0x98>)
 800106e:	2201      	movs	r2, #1
 8001070:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001072:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <MX_ADC1_Init+0x98>)
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <MX_ADC1_Init+0x98>)
 800107c:	2201      	movs	r2, #1
 800107e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001080:	480d      	ldr	r0, [pc, #52]	@ (80010b8 <MX_ADC1_Init+0x98>)
 8001082:	f000 fc95 	bl	80019b0 <HAL_ADC_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800108c:	f000 f9ba 	bl	8001404 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001090:	2300      	movs	r3, #0
 8001092:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001094:	2301      	movs	r3, #1
 8001096:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109c:	463b      	mov	r3, r7
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	@ (80010b8 <MX_ADC1_Init+0x98>)
 80010a2:	f000 fe67 	bl	8001d74 <HAL_ADC_ConfigChannel>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010ac:	f000 f9aa 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000078 	.word	0x20000078
 80010bc:	40012000 	.word	0x40012000
 80010c0:	0f000001 	.word	0x0f000001

080010c4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ca:	463b      	mov	r3, r7
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80010d6:	4b21      	ldr	r3, [pc, #132]	@ (800115c <MX_ADC2_Init+0x98>)
 80010d8:	4a21      	ldr	r2, [pc, #132]	@ (8001160 <MX_ADC2_Init+0x9c>)
 80010da:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010dc:	4b1f      	ldr	r3, [pc, #124]	@ (800115c <MX_ADC2_Init+0x98>)
 80010de:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010e2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	@ (800115c <MX_ADC2_Init+0x98>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	@ (800115c <MX_ADC2_Init+0x98>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010f0:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <MX_ADC2_Init+0x98>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010f6:	4b19      	ldr	r3, [pc, #100]	@ (800115c <MX_ADC2_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010fe:	4b17      	ldr	r3, [pc, #92]	@ (800115c <MX_ADC2_Init+0x98>)
 8001100:	2200      	movs	r2, #0
 8001102:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001104:	4b15      	ldr	r3, [pc, #84]	@ (800115c <MX_ADC2_Init+0x98>)
 8001106:	4a17      	ldr	r2, [pc, #92]	@ (8001164 <MX_ADC2_Init+0xa0>)
 8001108:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800110a:	4b14      	ldr	r3, [pc, #80]	@ (800115c <MX_ADC2_Init+0x98>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <MX_ADC2_Init+0x98>)
 8001112:	2201      	movs	r2, #1
 8001114:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <MX_ADC2_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800111e:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <MX_ADC2_Init+0x98>)
 8001120:	2201      	movs	r2, #1
 8001122:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001124:	480d      	ldr	r0, [pc, #52]	@ (800115c <MX_ADC2_Init+0x98>)
 8001126:	f000 fc43 	bl	80019b0 <HAL_ADC_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001130:	f000 f968 	bl	8001404 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001134:	2301      	movs	r3, #1
 8001136:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001138:	2301      	movs	r3, #1
 800113a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001140:	463b      	mov	r3, r7
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	@ (800115c <MX_ADC2_Init+0x98>)
 8001146:	f000 fe15 	bl	8001d74 <HAL_ADC_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001150:	f000 f958 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200000c0 	.word	0x200000c0
 8001160:	40012100 	.word	0x40012100
 8001164:	0f000001 	.word	0x0f000001

08001168 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	@ 0x28
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800116e:	4b26      	ldr	r3, [pc, #152]	@ (8001208 <MX_CAN1_Init+0xa0>)
 8001170:	4a26      	ldr	r2, [pc, #152]	@ (800120c <MX_CAN1_Init+0xa4>)
 8001172:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8001174:	4b24      	ldr	r3, [pc, #144]	@ (8001208 <MX_CAN1_Init+0xa0>)
 8001176:	2215      	movs	r2, #21
 8001178:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800117a:	4b23      	ldr	r3, [pc, #140]	@ (8001208 <MX_CAN1_Init+0xa0>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001180:	4b21      	ldr	r3, [pc, #132]	@ (8001208 <MX_CAN1_Init+0xa0>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001186:	4b20      	ldr	r3, [pc, #128]	@ (8001208 <MX_CAN1_Init+0xa0>)
 8001188:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800118c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800118e:	4b1e      	ldr	r3, [pc, #120]	@ (8001208 <MX_CAN1_Init+0xa0>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001194:	4b1c      	ldr	r3, [pc, #112]	@ (8001208 <MX_CAN1_Init+0xa0>)
 8001196:	2200      	movs	r2, #0
 8001198:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800119a:	4b1b      	ldr	r3, [pc, #108]	@ (8001208 <MX_CAN1_Init+0xa0>)
 800119c:	2200      	movs	r2, #0
 800119e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80011a0:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <MX_CAN1_Init+0xa0>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80011a6:	4b18      	ldr	r3, [pc, #96]	@ (8001208 <MX_CAN1_Init+0xa0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80011ac:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <MX_CAN1_Init+0xa0>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80011b2:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <MX_CAN1_Init+0xa0>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80011b8:	4813      	ldr	r0, [pc, #76]	@ (8001208 <MX_CAN1_Init+0xa0>)
 80011ba:	f000 fff9 	bl	80021b0 <HAL_CAN_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80011c4:	f000 f91e 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80011c8:	2301      	movs	r3, #1
 80011ca:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 2;
 80011cc:	2302      	movs	r3, #2
 80011ce:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x103<<5;
 80011d4:	f242 0360 	movw	r3, #8288	@ 0x2060
 80011d8:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80011de:	2300      	movs	r3, #0
 80011e0:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterMaskIdHigh = 0x103<<5;
 80011e2:	f242 0360 	movw	r3, #8288	@ 0x2060
 80011e6:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80011ec:	2301      	movs	r3, #1
 80011ee:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 14;
 80011f0:	230e      	movs	r3, #14
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80011f4:	463b      	mov	r3, r7
 80011f6:	4619      	mov	r1, r3
 80011f8:	4803      	ldr	r0, [pc, #12]	@ (8001208 <MX_CAN1_Init+0xa0>)
 80011fa:	f001 f8d5 	bl	80023a8 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	@ 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000108 	.word	0x20000108
 800120c:	40006400 	.word	0x40006400

08001210 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	@ 0x28
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001216:	f107 0318 	add.w	r3, r7, #24
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800122e:	463b      	mov	r3, r7
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800123a:	4b2b      	ldr	r3, [pc, #172]	@ (80012e8 <MX_TIM4_Init+0xd8>)
 800123c:	4a2b      	ldr	r2, [pc, #172]	@ (80012ec <MX_TIM4_Init+0xdc>)
 800123e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001240:	4b29      	ldr	r3, [pc, #164]	@ (80012e8 <MX_TIM4_Init+0xd8>)
 8001242:	2253      	movs	r2, #83	@ 0x53
 8001244:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001246:	4b28      	ldr	r3, [pc, #160]	@ (80012e8 <MX_TIM4_Init+0xd8>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800124c:	4b26      	ldr	r3, [pc, #152]	@ (80012e8 <MX_TIM4_Init+0xd8>)
 800124e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001252:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001254:	4b24      	ldr	r3, [pc, #144]	@ (80012e8 <MX_TIM4_Init+0xd8>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800125a:	4b23      	ldr	r3, [pc, #140]	@ (80012e8 <MX_TIM4_Init+0xd8>)
 800125c:	2280      	movs	r2, #128	@ 0x80
 800125e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001260:	4821      	ldr	r0, [pc, #132]	@ (80012e8 <MX_TIM4_Init+0xd8>)
 8001262:	f002 fd61 	bl	8003d28 <HAL_TIM_Base_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 800126c:	f000 f8ca 	bl	8001404 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001270:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001274:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001276:	f107 0318 	add.w	r3, r7, #24
 800127a:	4619      	mov	r1, r3
 800127c:	481a      	ldr	r0, [pc, #104]	@ (80012e8 <MX_TIM4_Init+0xd8>)
 800127e:	f002 ff87 	bl	8004190 <HAL_TIM_ConfigClockSource>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001288:	f000 f8bc 	bl	8001404 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800128c:	4816      	ldr	r0, [pc, #88]	@ (80012e8 <MX_TIM4_Init+0xd8>)
 800128e:	f002 fd9a 	bl	8003dc6 <HAL_TIM_IC_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001298:	f000 f8b4 	bl	8001404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	4619      	mov	r1, r3
 80012aa:	480f      	ldr	r0, [pc, #60]	@ (80012e8 <MX_TIM4_Init+0xd8>)
 80012ac:	f003 fb14 	bl	80048d8 <HAL_TIMEx_MasterConfigSynchronization>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80012b6:	f000 f8a5 	bl	8001404 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012ba:	2300      	movs	r3, #0
 80012bc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012be:	2301      	movs	r3, #1
 80012c0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012ca:	463b      	mov	r3, r7
 80012cc:	2200      	movs	r2, #0
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <MX_TIM4_Init+0xd8>)
 80012d2:	f002 fec1 	bl	8004058 <HAL_TIM_IC_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80012dc:	f000 f892 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3728      	adds	r7, #40	@ 0x28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000130 	.word	0x20000130
 80012ec:	40000800 	.word	0x40000800

080012f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f4:	4b11      	ldr	r3, [pc, #68]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	@ (8001340 <MX_USART2_UART_Init+0x50>)
 80012f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012fa:	4b10      	ldr	r3, [pc, #64]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 80012fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001300:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001302:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001308:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800130e:	4b0b      	ldr	r3, [pc, #44]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001314:	4b09      	ldr	r3, [pc, #36]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 8001316:	220c      	movs	r2, #12
 8001318:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131a:	4b08      	ldr	r3, [pc, #32]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001320:	4b06      	ldr	r3, [pc, #24]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001326:	4805      	ldr	r0, [pc, #20]	@ (800133c <MX_USART2_UART_Init+0x4c>)
 8001328:	f003 fb66 	bl	80049f8 <HAL_UART_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001332:	f000 f867 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000178 	.word	0x20000178
 8001340:	40004400 	.word	0x40004400

08001344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	@ 0x28
 8001348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b27      	ldr	r3, [pc, #156]	@ (80013fc <MX_GPIO_Init+0xb8>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	4a26      	ldr	r2, [pc, #152]	@ (80013fc <MX_GPIO_Init+0xb8>)
 8001364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001368:	6313      	str	r3, [r2, #48]	@ 0x30
 800136a:	4b24      	ldr	r3, [pc, #144]	@ (80013fc <MX_GPIO_Init+0xb8>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b20      	ldr	r3, [pc, #128]	@ (80013fc <MX_GPIO_Init+0xb8>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a1f      	ldr	r2, [pc, #124]	@ (80013fc <MX_GPIO_Init+0xb8>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b1d      	ldr	r3, [pc, #116]	@ (80013fc <MX_GPIO_Init+0xb8>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	4b19      	ldr	r3, [pc, #100]	@ (80013fc <MX_GPIO_Init+0xb8>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	4a18      	ldr	r2, [pc, #96]	@ (80013fc <MX_GPIO_Init+0xb8>)
 800139c:	f043 0308 	orr.w	r3, r3, #8
 80013a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a2:	4b16      	ldr	r3, [pc, #88]	@ (80013fc <MX_GPIO_Init+0xb8>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <MX_GPIO_Init+0xb8>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a11      	ldr	r2, [pc, #68]	@ (80013fc <MX_GPIO_Init+0xb8>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <MX_GPIO_Init+0xb8>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80013d0:	480b      	ldr	r0, [pc, #44]	@ (8001400 <MX_GPIO_Init+0xbc>)
 80013d2:	f001 ffdd 	bl	8003390 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80013d6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80013da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013dc:	2301      	movs	r3, #1
 80013de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4619      	mov	r1, r3
 80013ee:	4804      	ldr	r0, [pc, #16]	@ (8001400 <MX_GPIO_Init+0xbc>)
 80013f0:	f001 fe32 	bl	8003058 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013f4:	bf00      	nop
 80013f6:	3728      	adds	r7, #40	@ 0x28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020c00 	.word	0x40020c00

08001404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001408:	b672      	cpsid	i
}
 800140a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <Error_Handler+0x8>

08001410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	4b10      	ldr	r3, [pc, #64]	@ (800145c <HAL_MspInit+0x4c>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141e:	4a0f      	ldr	r2, [pc, #60]	@ (800145c <HAL_MspInit+0x4c>)
 8001420:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001424:	6453      	str	r3, [r2, #68]	@ 0x44
 8001426:	4b0d      	ldr	r3, [pc, #52]	@ (800145c <HAL_MspInit+0x4c>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	4b09      	ldr	r3, [pc, #36]	@ (800145c <HAL_MspInit+0x4c>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143a:	4a08      	ldr	r2, [pc, #32]	@ (800145c <HAL_MspInit+0x4c>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001440:	6413      	str	r3, [r2, #64]	@ 0x40
 8001442:	4b06      	ldr	r3, [pc, #24]	@ (800145c <HAL_MspInit+0x4c>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800144e:	2007      	movs	r0, #7
 8001450:	f001 fdc0 	bl	8002fd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40023800 	.word	0x40023800

08001460 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08c      	sub	sp, #48	@ 0x30
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a2e      	ldr	r2, [pc, #184]	@ (8001538 <HAL_ADC_MspInit+0xd8>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d128      	bne.n	80014d4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	61bb      	str	r3, [r7, #24]
 8001486:	4b2d      	ldr	r3, [pc, #180]	@ (800153c <HAL_ADC_MspInit+0xdc>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148a:	4a2c      	ldr	r2, [pc, #176]	@ (800153c <HAL_ADC_MspInit+0xdc>)
 800148c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001490:	6453      	str	r3, [r2, #68]	@ 0x44
 8001492:	4b2a      	ldr	r3, [pc, #168]	@ (800153c <HAL_ADC_MspInit+0xdc>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800149a:	61bb      	str	r3, [r7, #24]
 800149c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	4b26      	ldr	r3, [pc, #152]	@ (800153c <HAL_ADC_MspInit+0xdc>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a25      	ldr	r2, [pc, #148]	@ (800153c <HAL_ADC_MspInit+0xdc>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b23      	ldr	r3, [pc, #140]	@ (800153c <HAL_ADC_MspInit+0xdc>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014ba:	2301      	movs	r3, #1
 80014bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014be:	2303      	movs	r3, #3
 80014c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	4619      	mov	r1, r3
 80014cc:	481c      	ldr	r0, [pc, #112]	@ (8001540 <HAL_ADC_MspInit+0xe0>)
 80014ce:	f001 fdc3 	bl	8003058 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80014d2:	e02c      	b.n	800152e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001544 <HAL_ADC_MspInit+0xe4>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d127      	bne.n	800152e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b16      	ldr	r3, [pc, #88]	@ (800153c <HAL_ADC_MspInit+0xdc>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	4a15      	ldr	r2, [pc, #84]	@ (800153c <HAL_ADC_MspInit+0xdc>)
 80014e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ee:	4b13      	ldr	r3, [pc, #76]	@ (800153c <HAL_ADC_MspInit+0xdc>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b0f      	ldr	r3, [pc, #60]	@ (800153c <HAL_ADC_MspInit+0xdc>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a0e      	ldr	r2, [pc, #56]	@ (800153c <HAL_ADC_MspInit+0xdc>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <HAL_ADC_MspInit+0xdc>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001516:	2302      	movs	r3, #2
 8001518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800151a:	2303      	movs	r3, #3
 800151c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	@ (8001540 <HAL_ADC_MspInit+0xe0>)
 800152a:	f001 fd95 	bl	8003058 <HAL_GPIO_Init>
}
 800152e:	bf00      	nop
 8001530:	3730      	adds	r7, #48	@ 0x30
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40012000 	.word	0x40012000
 800153c:	40023800 	.word	0x40023800
 8001540:	40020000 	.word	0x40020000
 8001544:	40012100 	.word	0x40012100

08001548 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	@ 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a1d      	ldr	r2, [pc, #116]	@ (80015dc <HAL_CAN_MspInit+0x94>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d134      	bne.n	80015d4 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <HAL_CAN_MspInit+0x98>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	4a1b      	ldr	r2, [pc, #108]	@ (80015e0 <HAL_CAN_MspInit+0x98>)
 8001574:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001578:	6413      	str	r3, [r2, #64]	@ 0x40
 800157a:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <HAL_CAN_MspInit+0x98>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <HAL_CAN_MspInit+0x98>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	4a14      	ldr	r2, [pc, #80]	@ (80015e0 <HAL_CAN_MspInit+0x98>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6313      	str	r3, [r2, #48]	@ 0x30
 8001596:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <HAL_CAN_MspInit+0x98>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80015b4:	2309      	movs	r3, #9
 80015b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	4809      	ldr	r0, [pc, #36]	@ (80015e4 <HAL_CAN_MspInit+0x9c>)
 80015c0:	f001 fd4a 	bl	8003058 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2100      	movs	r1, #0
 80015c8:	2014      	movs	r0, #20
 80015ca:	f001 fd0e 	bl	8002fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80015ce:	2014      	movs	r0, #20
 80015d0:	f001 fd27 	bl	8003022 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80015d4:	bf00      	nop
 80015d6:	3728      	adds	r7, #40	@ 0x28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40006400 	.word	0x40006400
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020400 	.word	0x40020400

080015e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	@ 0x28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a1d      	ldr	r2, [pc, #116]	@ (800167c <HAL_TIM_Base_MspInit+0x94>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d134      	bne.n	8001674 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	4b1c      	ldr	r3, [pc, #112]	@ (8001680 <HAL_TIM_Base_MspInit+0x98>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	4a1b      	ldr	r2, [pc, #108]	@ (8001680 <HAL_TIM_Base_MspInit+0x98>)
 8001614:	f043 0304 	orr.w	r3, r3, #4
 8001618:	6413      	str	r3, [r2, #64]	@ 0x40
 800161a:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <HAL_TIM_Base_MspInit+0x98>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <HAL_TIM_Base_MspInit+0x98>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	4a14      	ldr	r2, [pc, #80]	@ (8001680 <HAL_TIM_Base_MspInit+0x98>)
 8001630:	f043 0308 	orr.w	r3, r3, #8
 8001634:	6313      	str	r3, [r2, #48]	@ 0x30
 8001636:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <HAL_TIM_Base_MspInit+0x98>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001642:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001654:	2302      	movs	r3, #2
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	4809      	ldr	r0, [pc, #36]	@ (8001684 <HAL_TIM_Base_MspInit+0x9c>)
 8001660:	f001 fcfa 	bl	8003058 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	201e      	movs	r0, #30
 800166a:	f001 fcbe 	bl	8002fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800166e:	201e      	movs	r0, #30
 8001670:	f001 fcd7 	bl	8003022 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	@ 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40000800 	.word	0x40000800
 8001680:	40023800 	.word	0x40023800
 8001684:	40020c00 	.word	0x40020c00

08001688 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	@ 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a19      	ldr	r2, [pc, #100]	@ (800170c <HAL_UART_MspInit+0x84>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d12b      	bne.n	8001702 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	4b18      	ldr	r3, [pc, #96]	@ (8001710 <HAL_UART_MspInit+0x88>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b2:	4a17      	ldr	r2, [pc, #92]	@ (8001710 <HAL_UART_MspInit+0x88>)
 80016b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ba:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <HAL_UART_MspInit+0x88>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <HAL_UART_MspInit+0x88>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	4a10      	ldr	r2, [pc, #64]	@ (8001710 <HAL_UART_MspInit+0x88>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001710 <HAL_UART_MspInit+0x88>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016e2:	230c      	movs	r3, #12
 80016e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ee:	2303      	movs	r3, #3
 80016f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016f2:	2307      	movs	r3, #7
 80016f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	4805      	ldr	r0, [pc, #20]	@ (8001714 <HAL_UART_MspInit+0x8c>)
 80016fe:	f001 fcab 	bl	8003058 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001702:	bf00      	nop
 8001704:	3728      	adds	r7, #40	@ 0x28
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40004400 	.word	0x40004400
 8001710:	40023800 	.word	0x40023800
 8001714:	40020000 	.word	0x40020000

08001718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <NMI_Handler+0x4>

08001720 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <HardFault_Handler+0x4>

08001728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <MemManage_Handler+0x4>

08001730 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <BusFault_Handler+0x4>

08001738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <UsageFault_Handler+0x4>

08001740 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800176e:	f000 f8db 	bl	8001928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800177c:	4802      	ldr	r0, [pc, #8]	@ (8001788 <CAN1_RX0_IRQHandler+0x10>)
 800177e:	f001 f929 	bl	80029d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000108 	.word	0x20000108

0800178c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001790:	4802      	ldr	r0, [pc, #8]	@ (800179c <TIM4_IRQHandler+0x10>)
 8001792:	f002 fb71 	bl	8003e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000130 	.word	0x20000130

080017a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a8:	4a14      	ldr	r2, [pc, #80]	@ (80017fc <_sbrk+0x5c>)
 80017aa:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <_sbrk+0x60>)
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b4:	4b13      	ldr	r3, [pc, #76]	@ (8001804 <_sbrk+0x64>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017bc:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <_sbrk+0x64>)
 80017be:	4a12      	ldr	r2, [pc, #72]	@ (8001808 <_sbrk+0x68>)
 80017c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c2:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d207      	bcs.n	80017e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d0:	f003 fd46 	bl	8005260 <__errno>
 80017d4:	4603      	mov	r3, r0
 80017d6:	220c      	movs	r2, #12
 80017d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017de:	e009      	b.n	80017f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e0:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017e6:	4b07      	ldr	r3, [pc, #28]	@ (8001804 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	4a05      	ldr	r2, [pc, #20]	@ (8001804 <_sbrk+0x64>)
 80017f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f2:	68fb      	ldr	r3, [r7, #12]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20020000 	.word	0x20020000
 8001800:	00000400 	.word	0x00000400
 8001804:	20000264 	.word	0x20000264
 8001808:	200003b8 	.word	0x200003b8

0800180c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001810:	4b06      	ldr	r3, [pc, #24]	@ (800182c <SystemInit+0x20>)
 8001812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001816:	4a05      	ldr	r2, [pc, #20]	@ (800182c <SystemInit+0x20>)
 8001818:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800181c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001830:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001868 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001834:	f7ff ffea 	bl	800180c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001838:	480c      	ldr	r0, [pc, #48]	@ (800186c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800183a:	490d      	ldr	r1, [pc, #52]	@ (8001870 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800183c:	4a0d      	ldr	r2, [pc, #52]	@ (8001874 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001840:	e002      	b.n	8001848 <LoopCopyDataInit>

08001842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001846:	3304      	adds	r3, #4

08001848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800184c:	d3f9      	bcc.n	8001842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184e:	4a0a      	ldr	r2, [pc, #40]	@ (8001878 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001850:	4c0a      	ldr	r4, [pc, #40]	@ (800187c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001854:	e001      	b.n	800185a <LoopFillZerobss>

08001856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001858:	3204      	adds	r2, #4

0800185a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800185c:	d3fb      	bcc.n	8001856 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800185e:	f003 fd05 	bl	800526c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001862:	f7ff fa5f 	bl	8000d24 <main>
  bx  lr    
 8001866:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001868:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800186c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001870:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001874:	08005be4 	.word	0x08005be4
  ldr r2, =_sbss
 8001878:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800187c:	200003b4 	.word	0x200003b4

08001880 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001880:	e7fe      	b.n	8001880 <ADC_IRQHandler>
	...

08001884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001888:	4b0e      	ldr	r3, [pc, #56]	@ (80018c4 <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0d      	ldr	r2, [pc, #52]	@ (80018c4 <HAL_Init+0x40>)
 800188e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001892:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001894:	4b0b      	ldr	r3, [pc, #44]	@ (80018c4 <HAL_Init+0x40>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0a      	ldr	r2, [pc, #40]	@ (80018c4 <HAL_Init+0x40>)
 800189a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800189e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a0:	4b08      	ldr	r3, [pc, #32]	@ (80018c4 <HAL_Init+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a07      	ldr	r2, [pc, #28]	@ (80018c4 <HAL_Init+0x40>)
 80018a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ac:	2003      	movs	r0, #3
 80018ae:	f001 fb91 	bl	8002fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f000 f808 	bl	80018c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b8:	f7ff fdaa 	bl	8001410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023c00 	.word	0x40023c00

080018c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d0:	4b12      	ldr	r3, [pc, #72]	@ (800191c <HAL_InitTick+0x54>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b12      	ldr	r3, [pc, #72]	@ (8001920 <HAL_InitTick+0x58>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	4619      	mov	r1, r3
 80018da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018de:	fbb3 f3f1 	udiv	r3, r3, r1
 80018e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	f001 fba9 	bl	800303e <HAL_SYSTICK_Config>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00e      	b.n	8001914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b0f      	cmp	r3, #15
 80018fa:	d80a      	bhi.n	8001912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018fc:	2200      	movs	r2, #0
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001904:	f001 fb71 	bl	8002fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001908:	4a06      	ldr	r2, [pc, #24]	@ (8001924 <HAL_InitTick+0x5c>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	e000      	b.n	8001914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000000 	.word	0x20000000
 8001920:	20000008 	.word	0x20000008
 8001924:	20000004 	.word	0x20000004

08001928 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <HAL_IncTick+0x20>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	4b06      	ldr	r3, [pc, #24]	@ (800194c <HAL_IncTick+0x24>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4413      	add	r3, r2
 8001938:	4a04      	ldr	r2, [pc, #16]	@ (800194c <HAL_IncTick+0x24>)
 800193a:	6013      	str	r3, [r2, #0]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000008 	.word	0x20000008
 800194c:	20000268 	.word	0x20000268

08001950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return uwTick;
 8001954:	4b03      	ldr	r3, [pc, #12]	@ (8001964 <HAL_GetTick+0x14>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000268 	.word	0x20000268

08001968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001970:	f7ff ffee 	bl	8001950 <HAL_GetTick>
 8001974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001980:	d005      	beq.n	800198e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001982:	4b0a      	ldr	r3, [pc, #40]	@ (80019ac <HAL_Delay+0x44>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800198e:	bf00      	nop
 8001990:	f7ff ffde 	bl	8001950 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	429a      	cmp	r2, r3
 800199e:	d8f7      	bhi.n	8001990 <HAL_Delay+0x28>
  {
  }
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000008 	.word	0x20000008

080019b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e033      	b.n	8001a2e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d109      	bne.n	80019e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff fd46 	bl	8001460 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	f003 0310 	and.w	r3, r3, #16
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d118      	bne.n	8001a20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019f6:	f023 0302 	bic.w	r3, r3, #2
 80019fa:	f043 0202 	orr.w	r2, r3, #2
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 fad8 	bl	8001fb8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	f023 0303 	bic.w	r3, r3, #3
 8001a16:	f043 0201 	orr.w	r2, r3, #1
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a1e:	e001      	b.n	8001a24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_ADC_Start+0x1a>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e0b2      	b.n	8001bb8 <HAL_ADC_Start+0x180>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d018      	beq.n	8001a9a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0201 	orr.w	r2, r2, #1
 8001a76:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a78:	4b52      	ldr	r3, [pc, #328]	@ (8001bc4 <HAL_ADC_Start+0x18c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a52      	ldr	r2, [pc, #328]	@ (8001bc8 <HAL_ADC_Start+0x190>)
 8001a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a82:	0c9a      	lsrs	r2, r3, #18
 8001a84:	4613      	mov	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4413      	add	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001a8c:	e002      	b.n	8001a94 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	3b01      	subs	r3, #1
 8001a92:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f9      	bne.n	8001a8e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d17a      	bne.n	8001b9e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aac:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ab0:	f023 0301 	bic.w	r3, r3, #1
 8001ab4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d007      	beq.n	8001ada <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ad2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ae6:	d106      	bne.n	8001af6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aec:	f023 0206 	bic.w	r2, r3, #6
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	645a      	str	r2, [r3, #68]	@ 0x44
 8001af4:	e002      	b.n	8001afc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b04:	4b31      	ldr	r3, [pc, #196]	@ (8001bcc <HAL_ADC_Start+0x194>)
 8001b06:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001b10:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d12a      	bne.n	8001b74 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a2b      	ldr	r2, [pc, #172]	@ (8001bd0 <HAL_ADC_Start+0x198>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d015      	beq.n	8001b54 <HAL_ADC_Start+0x11c>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a29      	ldr	r2, [pc, #164]	@ (8001bd4 <HAL_ADC_Start+0x19c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d105      	bne.n	8001b3e <HAL_ADC_Start+0x106>
 8001b32:	4b26      	ldr	r3, [pc, #152]	@ (8001bcc <HAL_ADC_Start+0x194>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00a      	beq.n	8001b54 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a25      	ldr	r2, [pc, #148]	@ (8001bd8 <HAL_ADC_Start+0x1a0>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d136      	bne.n	8001bb6 <HAL_ADC_Start+0x17e>
 8001b48:	4b20      	ldr	r3, [pc, #128]	@ (8001bcc <HAL_ADC_Start+0x194>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0310 	and.w	r3, r3, #16
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d130      	bne.n	8001bb6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d129      	bne.n	8001bb6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	e020      	b.n	8001bb6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a15      	ldr	r2, [pc, #84]	@ (8001bd0 <HAL_ADC_Start+0x198>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d11b      	bne.n	8001bb6 <HAL_ADC_Start+0x17e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d114      	bne.n	8001bb6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	e00b      	b.n	8001bb6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	f043 0210 	orr.w	r2, r3, #16
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bae:	f043 0201 	orr.w	r2, r3, #1
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	431bde83 	.word	0x431bde83
 8001bcc:	40012300 	.word	0x40012300
 8001bd0:	40012000 	.word	0x40012000
 8001bd4:	40012100 	.word	0x40012100
 8001bd8:	40012200 	.word	0x40012200

08001bdc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <HAL_ADC_Stop+0x16>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e021      	b.n	8001c36 <HAL_ADC_Stop+0x5a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0201 	bic.w	r2, r2, #1
 8001c08:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d109      	bne.n	8001c2c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c20:	f023 0301 	bic.w	r3, r3, #1
 8001c24:	f043 0201 	orr.w	r2, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c5e:	d113      	bne.n	8001c88 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c6e:	d10b      	bne.n	8001c88 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c74:	f043 0220 	orr.w	r2, r3, #32
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e063      	b.n	8001d50 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c88:	f7ff fe62 	bl	8001950 <HAL_GetTick>
 8001c8c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c8e:	e021      	b.n	8001cd4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c96:	d01d      	beq.n	8001cd4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d007      	beq.n	8001cae <HAL_ADC_PollForConversion+0x6c>
 8001c9e:	f7ff fe57 	bl	8001950 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d212      	bcs.n	8001cd4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d00b      	beq.n	8001cd4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc0:	f043 0204 	orr.w	r2, r3, #4
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e03d      	b.n	8001d50 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d1d6      	bne.n	8001c90 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f06f 0212 	mvn.w	r2, #18
 8001cea:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d123      	bne.n	8001d4e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d11f      	bne.n	8001d4e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d14:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d006      	beq.n	8001d2a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d111      	bne.n	8001d4e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d105      	bne.n	8001d4e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	f043 0201 	orr.w	r2, r3, #1
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x1c>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e105      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x228>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b09      	cmp	r3, #9
 8001d9e:	d925      	bls.n	8001dec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68d9      	ldr	r1, [r3, #12]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	461a      	mov	r2, r3
 8001dae:	4613      	mov	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4413      	add	r3, r2
 8001db4:	3b1e      	subs	r3, #30
 8001db6:	2207      	movs	r2, #7
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43da      	mvns	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	400a      	ands	r2, r1
 8001dc4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68d9      	ldr	r1, [r3, #12]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	4603      	mov	r3, r0
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	4403      	add	r3, r0
 8001dde:	3b1e      	subs	r3, #30
 8001de0:	409a      	lsls	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	e022      	b.n	8001e32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6919      	ldr	r1, [r3, #16]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	4413      	add	r3, r2
 8001e00:	2207      	movs	r2, #7
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43da      	mvns	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	400a      	ands	r2, r1
 8001e0e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6919      	ldr	r1, [r3, #16]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	4618      	mov	r0, r3
 8001e22:	4603      	mov	r3, r0
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4403      	add	r3, r0
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b06      	cmp	r3, #6
 8001e38:	d824      	bhi.n	8001e84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	3b05      	subs	r3, #5
 8001e4c:	221f      	movs	r2, #31
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43da      	mvns	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	400a      	ands	r2, r1
 8001e5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	4618      	mov	r0, r3
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	3b05      	subs	r3, #5
 8001e76:	fa00 f203 	lsl.w	r2, r0, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e82:	e04c      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b0c      	cmp	r3, #12
 8001e8a:	d824      	bhi.n	8001ed6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3b23      	subs	r3, #35	@ 0x23
 8001e9e:	221f      	movs	r2, #31
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43da      	mvns	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	400a      	ands	r2, r1
 8001eac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	4618      	mov	r0, r3
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	3b23      	subs	r3, #35	@ 0x23
 8001ec8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ed4:	e023      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3b41      	subs	r3, #65	@ 0x41
 8001ee8:	221f      	movs	r2, #31
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43da      	mvns	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	400a      	ands	r2, r1
 8001ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	4618      	mov	r0, r3
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	3b41      	subs	r3, #65	@ 0x41
 8001f12:	fa00 f203 	lsl.w	r2, r0, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f1e:	4b22      	ldr	r3, [pc, #136]	@ (8001fa8 <HAL_ADC_ConfigChannel+0x234>)
 8001f20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a21      	ldr	r2, [pc, #132]	@ (8001fac <HAL_ADC_ConfigChannel+0x238>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d109      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x1cc>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b12      	cmp	r3, #18
 8001f32:	d105      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a19      	ldr	r2, [pc, #100]	@ (8001fac <HAL_ADC_ConfigChannel+0x238>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d123      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x21e>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b10      	cmp	r3, #16
 8001f50:	d003      	beq.n	8001f5a <HAL_ADC_ConfigChannel+0x1e6>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b11      	cmp	r3, #17
 8001f58:	d11b      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2b10      	cmp	r3, #16
 8001f6c:	d111      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f6e:	4b10      	ldr	r3, [pc, #64]	@ (8001fb0 <HAL_ADC_ConfigChannel+0x23c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a10      	ldr	r2, [pc, #64]	@ (8001fb4 <HAL_ADC_ConfigChannel+0x240>)
 8001f74:	fba2 2303 	umull	r2, r3, r2, r3
 8001f78:	0c9a      	lsrs	r2, r3, #18
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f84:	e002      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f9      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	40012300 	.word	0x40012300
 8001fac:	40012000 	.word	0x40012000
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	431bde83 	.word	0x431bde83

08001fb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fc0:	4b79      	ldr	r3, [pc, #484]	@ (80021a8 <ADC_Init+0x1f0>)
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6859      	ldr	r1, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	021a      	lsls	r2, r3, #8
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002010:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6859      	ldr	r1, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002032:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6899      	ldr	r1, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204a:	4a58      	ldr	r2, [pc, #352]	@ (80021ac <ADC_Init+0x1f4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d022      	beq.n	8002096 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800205e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6899      	ldr	r1, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002080:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6899      	ldr	r1, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	e00f      	b.n	80020b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80020b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 0202 	bic.w	r2, r2, #2
 80020c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6899      	ldr	r1, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	7e1b      	ldrb	r3, [r3, #24]
 80020d0:	005a      	lsls	r2, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d01b      	beq.n	800211c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020f2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002102:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6859      	ldr	r1, [r3, #4]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210e:	3b01      	subs	r3, #1
 8002110:	035a      	lsls	r2, r3, #13
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	e007      	b.n	800212c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800212a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800213a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	3b01      	subs	r3, #1
 8002148:	051a      	lsls	r2, r3, #20
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002160:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6899      	ldr	r1, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800216e:	025a      	lsls	r2, r3, #9
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002186:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6899      	ldr	r1, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	029a      	lsls	r2, r3, #10
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	609a      	str	r2, [r3, #8]
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	40012300 	.word	0x40012300
 80021ac:	0f000001 	.word	0x0f000001

080021b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e0ed      	b.n	800239e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d102      	bne.n	80021d4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff f9ba 	bl	8001548 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0201 	orr.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021e4:	f7ff fbb4 	bl	8001950 <HAL_GetTick>
 80021e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021ea:	e012      	b.n	8002212 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021ec:	f7ff fbb0 	bl	8001950 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b0a      	cmp	r3, #10
 80021f8:	d90b      	bls.n	8002212 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2205      	movs	r2, #5
 800220a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e0c5      	b.n	800239e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0e5      	beq.n	80021ec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0202 	bic.w	r2, r2, #2
 800222e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002230:	f7ff fb8e 	bl	8001950 <HAL_GetTick>
 8002234:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002236:	e012      	b.n	800225e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002238:	f7ff fb8a 	bl	8001950 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b0a      	cmp	r3, #10
 8002244:	d90b      	bls.n	800225e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2205      	movs	r2, #5
 8002256:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e09f      	b.n	800239e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1e5      	bne.n	8002238 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	7e1b      	ldrb	r3, [r3, #24]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d108      	bne.n	8002286 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e007      	b.n	8002296 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002294:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	7e5b      	ldrb	r3, [r3, #25]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d108      	bne.n	80022b0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	e007      	b.n	80022c0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	7e9b      	ldrb	r3, [r3, #26]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d108      	bne.n	80022da <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0220 	orr.w	r2, r2, #32
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	e007      	b.n	80022ea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0220 	bic.w	r2, r2, #32
 80022e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	7edb      	ldrb	r3, [r3, #27]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d108      	bne.n	8002304 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0210 	bic.w	r2, r2, #16
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	e007      	b.n	8002314 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0210 	orr.w	r2, r2, #16
 8002312:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	7f1b      	ldrb	r3, [r3, #28]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d108      	bne.n	800232e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0208 	orr.w	r2, r2, #8
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	e007      	b.n	800233e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0208 	bic.w	r2, r2, #8
 800233c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	7f5b      	ldrb	r3, [r3, #29]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d108      	bne.n	8002358 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f042 0204 	orr.w	r2, r2, #4
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	e007      	b.n	8002368 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0204 	bic.w	r2, r2, #4
 8002366:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	ea42 0103 	orr.w	r1, r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	1e5a      	subs	r2, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023be:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80023c0:	7cfb      	ldrb	r3, [r7, #19]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d003      	beq.n	80023ce <HAL_CAN_ConfigFilter+0x26>
 80023c6:	7cfb      	ldrb	r3, [r7, #19]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	f040 80be 	bne.w	800254a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80023ce:	4b65      	ldr	r3, [pc, #404]	@ (8002564 <HAL_CAN_ConfigFilter+0x1bc>)
 80023d0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80023d8:	f043 0201 	orr.w	r2, r3, #1
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80023e8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fc:	021b      	lsls	r3, r3, #8
 80023fe:	431a      	orrs	r2, r3
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	2201      	movs	r2, #1
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	43db      	mvns	r3, r3
 8002420:	401a      	ands	r2, r3
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d123      	bne.n	8002478 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	43db      	mvns	r3, r3
 800243a:	401a      	ands	r2, r3
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002452:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	3248      	adds	r2, #72	@ 0x48
 8002458:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800246c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800246e:	6979      	ldr	r1, [r7, #20]
 8002470:	3348      	adds	r3, #72	@ 0x48
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	440b      	add	r3, r1
 8002476:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d122      	bne.n	80024c6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	431a      	orrs	r2, r3
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80024a0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	3248      	adds	r2, #72	@ 0x48
 80024a6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024ba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024bc:	6979      	ldr	r1, [r7, #20]
 80024be:	3348      	adds	r3, #72	@ 0x48
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	440b      	add	r3, r1
 80024c4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d109      	bne.n	80024e2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	401a      	ands	r2, r3
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80024e0:	e007      	b.n	80024f2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	431a      	orrs	r2, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d109      	bne.n	800250e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	43db      	mvns	r3, r3
 8002504:	401a      	ands	r2, r3
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800250c:	e007      	b.n	800251e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	431a      	orrs	r2, r3
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d107      	bne.n	8002536 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	431a      	orrs	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800253c:	f023 0201 	bic.w	r2, r3, #1
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	e006      	b.n	8002558 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
  }
}
 8002558:	4618      	mov	r0, r3
 800255a:	371c      	adds	r7, #28
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	40006400 	.word	0x40006400

08002568 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b01      	cmp	r3, #1
 800257a:	d12e      	bne.n	80025da <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0201 	bic.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002594:	f7ff f9dc 	bl	8001950 <HAL_GetTick>
 8002598:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800259a:	e012      	b.n	80025c2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800259c:	f7ff f9d8 	bl	8001950 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b0a      	cmp	r3, #10
 80025a8:	d90b      	bls.n	80025c2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2205      	movs	r2, #5
 80025ba:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e012      	b.n	80025e8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1e5      	bne.n	800259c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	e006      	b.n	80025e8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025de:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
  }
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b089      	sub	sp, #36	@ 0x24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002604:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800260e:	7ffb      	ldrb	r3, [r7, #31]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d003      	beq.n	800261c <HAL_CAN_AddTxMessage+0x2c>
 8002614:	7ffb      	ldrb	r3, [r7, #31]
 8002616:	2b02      	cmp	r3, #2
 8002618:	f040 80ad 	bne.w	8002776 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10a      	bne.n	800263c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800262c:	2b00      	cmp	r3, #0
 800262e:	d105      	bne.n	800263c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 8095 	beq.w	8002766 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	0e1b      	lsrs	r3, r3, #24
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002646:	2201      	movs	r2, #1
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	409a      	lsls	r2, r3
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10d      	bne.n	8002674 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002662:	68f9      	ldr	r1, [r7, #12]
 8002664:	6809      	ldr	r1, [r1, #0]
 8002666:	431a      	orrs	r2, r3
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	3318      	adds	r3, #24
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	440b      	add	r3, r1
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	e00f      	b.n	8002694 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800267e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002684:	68f9      	ldr	r1, [r7, #12]
 8002686:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002688:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	3318      	adds	r3, #24
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	440b      	add	r3, r1
 8002692:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6819      	ldr	r1, [r3, #0]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	3318      	adds	r3, #24
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	440b      	add	r3, r1
 80026a4:	3304      	adds	r3, #4
 80026a6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	7d1b      	ldrb	r3, [r3, #20]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d111      	bne.n	80026d4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	3318      	adds	r3, #24
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	4413      	add	r3, r2
 80026bc:	3304      	adds	r3, #4
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	6811      	ldr	r1, [r2, #0]
 80026c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	3318      	adds	r3, #24
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	440b      	add	r3, r1
 80026d0:	3304      	adds	r3, #4
 80026d2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3307      	adds	r3, #7
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	061a      	lsls	r2, r3, #24
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3306      	adds	r3, #6
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	041b      	lsls	r3, r3, #16
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3305      	adds	r3, #5
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	021b      	lsls	r3, r3, #8
 80026ee:	4313      	orrs	r3, r2
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	3204      	adds	r2, #4
 80026f4:	7812      	ldrb	r2, [r2, #0]
 80026f6:	4610      	mov	r0, r2
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	6811      	ldr	r1, [r2, #0]
 80026fc:	ea43 0200 	orr.w	r2, r3, r0
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	440b      	add	r3, r1
 8002706:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800270a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3303      	adds	r3, #3
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	061a      	lsls	r2, r3, #24
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3302      	adds	r3, #2
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	041b      	lsls	r3, r3, #16
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3301      	adds	r3, #1
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	021b      	lsls	r3, r3, #8
 8002726:	4313      	orrs	r3, r2
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	7812      	ldrb	r2, [r2, #0]
 800272c:	4610      	mov	r0, r2
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	6811      	ldr	r1, [r2, #0]
 8002732:	ea43 0200 	orr.w	r2, r3, r0
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	440b      	add	r3, r1
 800273c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002740:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	3318      	adds	r3, #24
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	4413      	add	r3, r2
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	6811      	ldr	r1, [r2, #0]
 8002754:	f043 0201 	orr.w	r2, r3, #1
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	3318      	adds	r3, #24
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	440b      	add	r3, r1
 8002760:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	e00e      	b.n	8002784 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e006      	b.n	8002784 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
  }
}
 8002784:	4618      	mov	r0, r3
 8002786:	3724      	adds	r7, #36	@ 0x24
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027a4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80027a6:	7dfb      	ldrb	r3, [r7, #23]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d003      	beq.n	80027b4 <HAL_CAN_GetRxMessage+0x24>
 80027ac:	7dfb      	ldrb	r3, [r7, #23]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	f040 8103 	bne.w	80029ba <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10e      	bne.n	80027d8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d116      	bne.n	80027f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027cc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0f7      	b.n	80029c8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d107      	bne.n	80027f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e0e8      	b.n	80029c8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	331b      	adds	r3, #27
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	4413      	add	r3, r2
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0204 	and.w	r2, r3, #4
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10c      	bne.n	800282e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	331b      	adds	r3, #27
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	4413      	add	r3, r2
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	0d5b      	lsrs	r3, r3, #21
 8002824:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	e00b      	b.n	8002846 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	331b      	adds	r3, #27
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	4413      	add	r3, r2
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	08db      	lsrs	r3, r3, #3
 800283e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	331b      	adds	r3, #27
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	4413      	add	r3, r2
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0202 	and.w	r2, r3, #2
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	331b      	adds	r3, #27
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	4413      	add	r3, r2
 8002868:	3304      	adds	r3, #4
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2208      	movs	r2, #8
 8002878:	611a      	str	r2, [r3, #16]
 800287a:	e00b      	b.n	8002894 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	331b      	adds	r3, #27
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	4413      	add	r3, r2
 8002888:	3304      	adds	r3, #4
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 020f 	and.w	r2, r3, #15
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	331b      	adds	r3, #27
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	4413      	add	r3, r2
 80028a0:	3304      	adds	r3, #4
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	0a1b      	lsrs	r3, r3, #8
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	331b      	adds	r3, #27
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	4413      	add	r3, r2
 80028b8:	3304      	adds	r3, #4
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	0c1b      	lsrs	r3, r3, #16
 80028be:	b29a      	uxth	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	0a1a      	lsrs	r2, r3, #8
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	3301      	adds	r3, #1
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	0c1a      	lsrs	r2, r3, #16
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	3302      	adds	r3, #2
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	4413      	add	r3, r2
 8002918:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	0e1a      	lsrs	r2, r3, #24
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	3303      	adds	r3, #3
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	4413      	add	r3, r2
 8002932:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	3304      	adds	r3, #4
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	4413      	add	r3, r2
 800294a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	0a1a      	lsrs	r2, r3, #8
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	3305      	adds	r3, #5
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	4413      	add	r3, r2
 8002964:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	0c1a      	lsrs	r2, r3, #16
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	3306      	adds	r3, #6
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	4413      	add	r3, r2
 800297e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	0e1a      	lsrs	r2, r3, #24
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	3307      	adds	r3, #7
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d108      	bne.n	80029a6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0220 	orr.w	r2, r2, #32
 80029a2:	60da      	str	r2, [r3, #12]
 80029a4:	e007      	b.n	80029b6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f042 0220 	orr.w	r2, r2, #32
 80029b4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e006      	b.n	80029c8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
  }
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	371c      	adds	r7, #28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	@ 0x28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80029dc:	2300      	movs	r3, #0
 80029de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d07c      	beq.n	8002b14 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d023      	beq.n	8002a6c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f983 	bl	8002d42 <HAL_CAN_TxMailbox0CompleteCallback>
 8002a3c:	e016      	b.n	8002a6c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d004      	beq.n	8002a52 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a50:	e00c      	b.n	8002a6c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d004      	beq.n	8002a66 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a62:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a64:	e002      	b.n	8002a6c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f989 	bl	8002d7e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d024      	beq.n	8002ac0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a7e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f963 	bl	8002d56 <HAL_CAN_TxMailbox1CompleteCallback>
 8002a90:	e016      	b.n	8002ac0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d004      	beq.n	8002aa6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aa4:	e00c      	b.n	8002ac0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d004      	beq.n	8002aba <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ab8:	e002      	b.n	8002ac0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f969 	bl	8002d92 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d024      	beq.n	8002b14 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002ad2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f943 	bl	8002d6a <HAL_CAN_TxMailbox2CompleteCallback>
 8002ae4:	e016      	b.n	8002b14 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d004      	beq.n	8002afa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002af8:	e00c      	b.n	8002b14 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d004      	beq.n	8002b0e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b0c:	e002      	b.n	8002b14 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f949 	bl	8002da6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00c      	beq.n	8002b38 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d007      	beq.n	8002b38 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b2e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2210      	movs	r2, #16
 8002b36:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00b      	beq.n	8002b5a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d006      	beq.n	8002b5a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2208      	movs	r2, #8
 8002b52:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f930 	bl	8002dba <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d009      	beq.n	8002b78 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7fe f8b6 	bl	8000ce4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00c      	beq.n	8002b9c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d007      	beq.n	8002b9c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b92:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2210      	movs	r2, #16
 8002b9a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00b      	beq.n	8002bbe <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d006      	beq.n	8002bbe <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2208      	movs	r2, #8
 8002bb6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f912 	bl	8002de2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d009      	beq.n	8002bdc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f8f9 	bl	8002dce <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00b      	beq.n	8002bfe <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d006      	beq.n	8002bfe <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2210      	movs	r2, #16
 8002bf6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f8fc 	bl	8002df6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00b      	beq.n	8002c20 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d006      	beq.n	8002c20 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2208      	movs	r2, #8
 8002c18:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f8f5 	bl	8002e0a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d07b      	beq.n	8002d22 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d072      	beq.n	8002d1a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d008      	beq.n	8002c50 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d008      	beq.n	8002c6c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c66:	f043 0302 	orr.w	r3, r3, #2
 8002c6a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d008      	beq.n	8002c88 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c82:	f043 0304 	orr.w	r3, r3, #4
 8002c86:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d043      	beq.n	8002d1a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d03e      	beq.n	8002d1a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ca2:	2b60      	cmp	r3, #96	@ 0x60
 8002ca4:	d02b      	beq.n	8002cfe <HAL_CAN_IRQHandler+0x32a>
 8002ca6:	2b60      	cmp	r3, #96	@ 0x60
 8002ca8:	d82e      	bhi.n	8002d08 <HAL_CAN_IRQHandler+0x334>
 8002caa:	2b50      	cmp	r3, #80	@ 0x50
 8002cac:	d022      	beq.n	8002cf4 <HAL_CAN_IRQHandler+0x320>
 8002cae:	2b50      	cmp	r3, #80	@ 0x50
 8002cb0:	d82a      	bhi.n	8002d08 <HAL_CAN_IRQHandler+0x334>
 8002cb2:	2b40      	cmp	r3, #64	@ 0x40
 8002cb4:	d019      	beq.n	8002cea <HAL_CAN_IRQHandler+0x316>
 8002cb6:	2b40      	cmp	r3, #64	@ 0x40
 8002cb8:	d826      	bhi.n	8002d08 <HAL_CAN_IRQHandler+0x334>
 8002cba:	2b30      	cmp	r3, #48	@ 0x30
 8002cbc:	d010      	beq.n	8002ce0 <HAL_CAN_IRQHandler+0x30c>
 8002cbe:	2b30      	cmp	r3, #48	@ 0x30
 8002cc0:	d822      	bhi.n	8002d08 <HAL_CAN_IRQHandler+0x334>
 8002cc2:	2b10      	cmp	r3, #16
 8002cc4:	d002      	beq.n	8002ccc <HAL_CAN_IRQHandler+0x2f8>
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	d005      	beq.n	8002cd6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002cca:	e01d      	b.n	8002d08 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cce:	f043 0308 	orr.w	r3, r3, #8
 8002cd2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002cd4:	e019      	b.n	8002d0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd8:	f043 0310 	orr.w	r3, r3, #16
 8002cdc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002cde:	e014      	b.n	8002d0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce2:	f043 0320 	orr.w	r3, r3, #32
 8002ce6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ce8:	e00f      	b.n	8002d0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cf0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002cf2:	e00a      	b.n	8002d0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cfa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002cfc:	e005      	b.n	8002d0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d04:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002d06:	e000      	b.n	8002d0a <HAL_CAN_IRQHandler+0x336>
            break;
 8002d08:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699a      	ldr	r2, [r3, #24]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002d18:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2204      	movs	r2, #4
 8002d20:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f872 	bl	8002e1e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	3728      	adds	r7, #40	@ 0x28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e44:	4b0c      	ldr	r3, [pc, #48]	@ (8002e78 <__NVIC_SetPriorityGrouping+0x44>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e50:	4013      	ands	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e66:	4a04      	ldr	r2, [pc, #16]	@ (8002e78 <__NVIC_SetPriorityGrouping+0x44>)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	60d3      	str	r3, [r2, #12]
}
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e80:	4b04      	ldr	r3, [pc, #16]	@ (8002e94 <__NVIC_GetPriorityGrouping+0x18>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	0a1b      	lsrs	r3, r3, #8
 8002e86:	f003 0307 	and.w	r3, r3, #7
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	db0b      	blt.n	8002ec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	f003 021f 	and.w	r2, r3, #31
 8002eb0:	4907      	ldr	r1, [pc, #28]	@ (8002ed0 <__NVIC_EnableIRQ+0x38>)
 8002eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb6:	095b      	lsrs	r3, r3, #5
 8002eb8:	2001      	movs	r0, #1
 8002eba:	fa00 f202 	lsl.w	r2, r0, r2
 8002ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	e000e100 	.word	0xe000e100

08002ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	6039      	str	r1, [r7, #0]
 8002ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	db0a      	blt.n	8002efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	490c      	ldr	r1, [pc, #48]	@ (8002f20 <__NVIC_SetPriority+0x4c>)
 8002eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef2:	0112      	lsls	r2, r2, #4
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002efc:	e00a      	b.n	8002f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	4908      	ldr	r1, [pc, #32]	@ (8002f24 <__NVIC_SetPriority+0x50>)
 8002f04:	79fb      	ldrb	r3, [r7, #7]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	3b04      	subs	r3, #4
 8002f0c:	0112      	lsls	r2, r2, #4
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	440b      	add	r3, r1
 8002f12:	761a      	strb	r2, [r3, #24]
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	e000e100 	.word	0xe000e100
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b089      	sub	sp, #36	@ 0x24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f1c3 0307 	rsb	r3, r3, #7
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	bf28      	it	cs
 8002f46:	2304      	movcs	r3, #4
 8002f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	2b06      	cmp	r3, #6
 8002f50:	d902      	bls.n	8002f58 <NVIC_EncodePriority+0x30>
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	3b03      	subs	r3, #3
 8002f56:	e000      	b.n	8002f5a <NVIC_EncodePriority+0x32>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43da      	mvns	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	401a      	ands	r2, r3
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f70:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7a:	43d9      	mvns	r1, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f80:	4313      	orrs	r3, r2
         );
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3724      	adds	r7, #36	@ 0x24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
	...

08002f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fa0:	d301      	bcc.n	8002fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e00f      	b.n	8002fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd0 <SysTick_Config+0x40>)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fae:	210f      	movs	r1, #15
 8002fb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002fb4:	f7ff ff8e 	bl	8002ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fb8:	4b05      	ldr	r3, [pc, #20]	@ (8002fd0 <SysTick_Config+0x40>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fbe:	4b04      	ldr	r3, [pc, #16]	@ (8002fd0 <SysTick_Config+0x40>)
 8002fc0:	2207      	movs	r2, #7
 8002fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	e000e010 	.word	0xe000e010

08002fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7ff ff29 	bl	8002e34 <__NVIC_SetPriorityGrouping>
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b086      	sub	sp, #24
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	607a      	str	r2, [r7, #4]
 8002ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ffc:	f7ff ff3e 	bl	8002e7c <__NVIC_GetPriorityGrouping>
 8003000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	68b9      	ldr	r1, [r7, #8]
 8003006:	6978      	ldr	r0, [r7, #20]
 8003008:	f7ff ff8e 	bl	8002f28 <NVIC_EncodePriority>
 800300c:	4602      	mov	r2, r0
 800300e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003012:	4611      	mov	r1, r2
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ff5d 	bl	8002ed4 <__NVIC_SetPriority>
}
 800301a:	bf00      	nop
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	4603      	mov	r3, r0
 800302a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800302c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ff31 	bl	8002e98 <__NVIC_EnableIRQ>
}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff ffa2 	bl	8002f90 <SysTick_Config>
 800304c:	4603      	mov	r3, r0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003058:	b480      	push	{r7}
 800305a:	b089      	sub	sp, #36	@ 0x24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003066:	2300      	movs	r3, #0
 8003068:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800306a:	2300      	movs	r3, #0
 800306c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800306e:	2300      	movs	r3, #0
 8003070:	61fb      	str	r3, [r7, #28]
 8003072:	e16b      	b.n	800334c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003074:	2201      	movs	r2, #1
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4013      	ands	r3, r2
 8003086:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	429a      	cmp	r2, r3
 800308e:	f040 815a 	bne.w	8003346 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	2b01      	cmp	r3, #1
 800309c:	d005      	beq.n	80030aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d130      	bne.n	800310c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	2203      	movs	r2, #3
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030e0:	2201      	movs	r2, #1
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4013      	ands	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	091b      	lsrs	r3, r3, #4
 80030f6:	f003 0201 	and.w	r2, r3, #1
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4313      	orrs	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	2b03      	cmp	r3, #3
 8003116:	d017      	beq.n	8003148 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	2203      	movs	r2, #3
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4013      	ands	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d123      	bne.n	800319c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	08da      	lsrs	r2, r3, #3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3208      	adds	r2, #8
 800315c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003160:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	220f      	movs	r2, #15
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	08da      	lsrs	r2, r3, #3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	3208      	adds	r2, #8
 8003196:	69b9      	ldr	r1, [r7, #24]
 8003198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	2203      	movs	r2, #3
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 0203 	and.w	r2, r3, #3
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 80b4 	beq.w	8003346 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	4b60      	ldr	r3, [pc, #384]	@ (8003364 <HAL_GPIO_Init+0x30c>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e6:	4a5f      	ldr	r2, [pc, #380]	@ (8003364 <HAL_GPIO_Init+0x30c>)
 80031e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80031ee:	4b5d      	ldr	r3, [pc, #372]	@ (8003364 <HAL_GPIO_Init+0x30c>)
 80031f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003368 <HAL_GPIO_Init+0x310>)
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	089b      	lsrs	r3, r3, #2
 8003200:	3302      	adds	r3, #2
 8003202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	220f      	movs	r2, #15
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43db      	mvns	r3, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4013      	ands	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a52      	ldr	r2, [pc, #328]	@ (800336c <HAL_GPIO_Init+0x314>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d02b      	beq.n	800327e <HAL_GPIO_Init+0x226>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a51      	ldr	r2, [pc, #324]	@ (8003370 <HAL_GPIO_Init+0x318>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d025      	beq.n	800327a <HAL_GPIO_Init+0x222>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a50      	ldr	r2, [pc, #320]	@ (8003374 <HAL_GPIO_Init+0x31c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d01f      	beq.n	8003276 <HAL_GPIO_Init+0x21e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a4f      	ldr	r2, [pc, #316]	@ (8003378 <HAL_GPIO_Init+0x320>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d019      	beq.n	8003272 <HAL_GPIO_Init+0x21a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a4e      	ldr	r2, [pc, #312]	@ (800337c <HAL_GPIO_Init+0x324>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d013      	beq.n	800326e <HAL_GPIO_Init+0x216>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a4d      	ldr	r2, [pc, #308]	@ (8003380 <HAL_GPIO_Init+0x328>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d00d      	beq.n	800326a <HAL_GPIO_Init+0x212>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a4c      	ldr	r2, [pc, #304]	@ (8003384 <HAL_GPIO_Init+0x32c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d007      	beq.n	8003266 <HAL_GPIO_Init+0x20e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a4b      	ldr	r2, [pc, #300]	@ (8003388 <HAL_GPIO_Init+0x330>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d101      	bne.n	8003262 <HAL_GPIO_Init+0x20a>
 800325e:	2307      	movs	r3, #7
 8003260:	e00e      	b.n	8003280 <HAL_GPIO_Init+0x228>
 8003262:	2308      	movs	r3, #8
 8003264:	e00c      	b.n	8003280 <HAL_GPIO_Init+0x228>
 8003266:	2306      	movs	r3, #6
 8003268:	e00a      	b.n	8003280 <HAL_GPIO_Init+0x228>
 800326a:	2305      	movs	r3, #5
 800326c:	e008      	b.n	8003280 <HAL_GPIO_Init+0x228>
 800326e:	2304      	movs	r3, #4
 8003270:	e006      	b.n	8003280 <HAL_GPIO_Init+0x228>
 8003272:	2303      	movs	r3, #3
 8003274:	e004      	b.n	8003280 <HAL_GPIO_Init+0x228>
 8003276:	2302      	movs	r3, #2
 8003278:	e002      	b.n	8003280 <HAL_GPIO_Init+0x228>
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <HAL_GPIO_Init+0x228>
 800327e:	2300      	movs	r3, #0
 8003280:	69fa      	ldr	r2, [r7, #28]
 8003282:	f002 0203 	and.w	r2, r2, #3
 8003286:	0092      	lsls	r2, r2, #2
 8003288:	4093      	lsls	r3, r2
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4313      	orrs	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003290:	4935      	ldr	r1, [pc, #212]	@ (8003368 <HAL_GPIO_Init+0x310>)
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	089b      	lsrs	r3, r3, #2
 8003296:	3302      	adds	r3, #2
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800329e:	4b3b      	ldr	r3, [pc, #236]	@ (800338c <HAL_GPIO_Init+0x334>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	43db      	mvns	r3, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4013      	ands	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032c2:	4a32      	ldr	r2, [pc, #200]	@ (800338c <HAL_GPIO_Init+0x334>)
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032c8:	4b30      	ldr	r3, [pc, #192]	@ (800338c <HAL_GPIO_Init+0x334>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	43db      	mvns	r3, r3
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4013      	ands	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032ec:	4a27      	ldr	r2, [pc, #156]	@ (800338c <HAL_GPIO_Init+0x334>)
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032f2:	4b26      	ldr	r3, [pc, #152]	@ (800338c <HAL_GPIO_Init+0x334>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4013      	ands	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003316:	4a1d      	ldr	r2, [pc, #116]	@ (800338c <HAL_GPIO_Init+0x334>)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800331c:	4b1b      	ldr	r3, [pc, #108]	@ (800338c <HAL_GPIO_Init+0x334>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003340:	4a12      	ldr	r2, [pc, #72]	@ (800338c <HAL_GPIO_Init+0x334>)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	3301      	adds	r3, #1
 800334a:	61fb      	str	r3, [r7, #28]
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	2b0f      	cmp	r3, #15
 8003350:	f67f ae90 	bls.w	8003074 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003354:	bf00      	nop
 8003356:	bf00      	nop
 8003358:	3724      	adds	r7, #36	@ 0x24
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40023800 	.word	0x40023800
 8003368:	40013800 	.word	0x40013800
 800336c:	40020000 	.word	0x40020000
 8003370:	40020400 	.word	0x40020400
 8003374:	40020800 	.word	0x40020800
 8003378:	40020c00 	.word	0x40020c00
 800337c:	40021000 	.word	0x40021000
 8003380:	40021400 	.word	0x40021400
 8003384:	40021800 	.word	0x40021800
 8003388:	40021c00 	.word	0x40021c00
 800338c:	40013c00 	.word	0x40013c00

08003390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	807b      	strh	r3, [r7, #2]
 800339c:	4613      	mov	r3, r2
 800339e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033a0:	787b      	ldrb	r3, [r7, #1]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033a6:	887a      	ldrh	r2, [r7, #2]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033ac:	e003      	b.n	80033b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033ae:	887b      	ldrh	r3, [r7, #2]
 80033b0:	041a      	lsls	r2, r3, #16
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	619a      	str	r2, [r3, #24]
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b085      	sub	sp, #20
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	460b      	mov	r3, r1
 80033cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033d4:	887a      	ldrh	r2, [r7, #2]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4013      	ands	r3, r2
 80033da:	041a      	lsls	r2, r3, #16
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	43d9      	mvns	r1, r3
 80033e0:	887b      	ldrh	r3, [r7, #2]
 80033e2:	400b      	ands	r3, r1
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	619a      	str	r2, [r3, #24]
}
 80033ea:	bf00      	nop
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
	...

080033f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e267      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d075      	beq.n	8003502 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003416:	4b88      	ldr	r3, [pc, #544]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b04      	cmp	r3, #4
 8003420:	d00c      	beq.n	800343c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003422:	4b85      	ldr	r3, [pc, #532]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800342a:	2b08      	cmp	r3, #8
 800342c:	d112      	bne.n	8003454 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800342e:	4b82      	ldr	r3, [pc, #520]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003436:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800343a:	d10b      	bne.n	8003454 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800343c:	4b7e      	ldr	r3, [pc, #504]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d05b      	beq.n	8003500 <HAL_RCC_OscConfig+0x108>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d157      	bne.n	8003500 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e242      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800345c:	d106      	bne.n	800346c <HAL_RCC_OscConfig+0x74>
 800345e:	4b76      	ldr	r3, [pc, #472]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a75      	ldr	r2, [pc, #468]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	e01d      	b.n	80034a8 <HAL_RCC_OscConfig+0xb0>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003474:	d10c      	bne.n	8003490 <HAL_RCC_OscConfig+0x98>
 8003476:	4b70      	ldr	r3, [pc, #448]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a6f      	ldr	r2, [pc, #444]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 800347c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	4b6d      	ldr	r3, [pc, #436]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a6c      	ldr	r2, [pc, #432]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	e00b      	b.n	80034a8 <HAL_RCC_OscConfig+0xb0>
 8003490:	4b69      	ldr	r3, [pc, #420]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a68      	ldr	r2, [pc, #416]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003496:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	4b66      	ldr	r3, [pc, #408]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a65      	ldr	r2, [pc, #404]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 80034a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d013      	beq.n	80034d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b0:	f7fe fa4e 	bl	8001950 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b8:	f7fe fa4a 	bl	8001950 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b64      	cmp	r3, #100	@ 0x64
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e207      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0xc0>
 80034d6:	e014      	b.n	8003502 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d8:	f7fe fa3a 	bl	8001950 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034e0:	f7fe fa36 	bl	8001950 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b64      	cmp	r3, #100	@ 0x64
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e1f3      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f2:	4b51      	ldr	r3, [pc, #324]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0xe8>
 80034fe:	e000      	b.n	8003502 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d063      	beq.n	80035d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800350e:	4b4a      	ldr	r3, [pc, #296]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800351a:	4b47      	ldr	r3, [pc, #284]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003522:	2b08      	cmp	r3, #8
 8003524:	d11c      	bne.n	8003560 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003526:	4b44      	ldr	r3, [pc, #272]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d116      	bne.n	8003560 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003532:	4b41      	ldr	r3, [pc, #260]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <HAL_RCC_OscConfig+0x152>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d001      	beq.n	800354a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e1c7      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354a:	4b3b      	ldr	r3, [pc, #236]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	4937      	ldr	r1, [pc, #220]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 800355a:	4313      	orrs	r3, r2
 800355c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355e:	e03a      	b.n	80035d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d020      	beq.n	80035aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003568:	4b34      	ldr	r3, [pc, #208]	@ (800363c <HAL_RCC_OscConfig+0x244>)
 800356a:	2201      	movs	r2, #1
 800356c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356e:	f7fe f9ef 	bl	8001950 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003576:	f7fe f9eb 	bl	8001950 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e1a8      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003588:	4b2b      	ldr	r3, [pc, #172]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f0      	beq.n	8003576 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003594:	4b28      	ldr	r3, [pc, #160]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4925      	ldr	r1, [pc, #148]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	600b      	str	r3, [r1, #0]
 80035a8:	e015      	b.n	80035d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035aa:	4b24      	ldr	r3, [pc, #144]	@ (800363c <HAL_RCC_OscConfig+0x244>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b0:	f7fe f9ce 	bl	8001950 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b8:	f7fe f9ca 	bl	8001950 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e187      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d036      	beq.n	8003650 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d016      	beq.n	8003618 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ea:	4b15      	ldr	r3, [pc, #84]	@ (8003640 <HAL_RCC_OscConfig+0x248>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f0:	f7fe f9ae 	bl	8001950 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035f8:	f7fe f9aa 	bl	8001950 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e167      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800360a:	4b0b      	ldr	r3, [pc, #44]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 800360c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0x200>
 8003616:	e01b      	b.n	8003650 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003618:	4b09      	ldr	r3, [pc, #36]	@ (8003640 <HAL_RCC_OscConfig+0x248>)
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361e:	f7fe f997 	bl	8001950 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003624:	e00e      	b.n	8003644 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003626:	f7fe f993 	bl	8001950 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d907      	bls.n	8003644 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e150      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
 8003638:	40023800 	.word	0x40023800
 800363c:	42470000 	.word	0x42470000
 8003640:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003644:	4b88      	ldr	r3, [pc, #544]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1ea      	bne.n	8003626 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 8097 	beq.w	800378c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800365e:	2300      	movs	r3, #0
 8003660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003662:	4b81      	ldr	r3, [pc, #516]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10f      	bne.n	800368e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	4b7d      	ldr	r3, [pc, #500]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	4a7c      	ldr	r2, [pc, #496]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800367c:	6413      	str	r3, [r2, #64]	@ 0x40
 800367e:	4b7a      	ldr	r3, [pc, #488]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003686:	60bb      	str	r3, [r7, #8]
 8003688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800368a:	2301      	movs	r3, #1
 800368c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368e:	4b77      	ldr	r3, [pc, #476]	@ (800386c <HAL_RCC_OscConfig+0x474>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003696:	2b00      	cmp	r3, #0
 8003698:	d118      	bne.n	80036cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800369a:	4b74      	ldr	r3, [pc, #464]	@ (800386c <HAL_RCC_OscConfig+0x474>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a73      	ldr	r2, [pc, #460]	@ (800386c <HAL_RCC_OscConfig+0x474>)
 80036a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a6:	f7fe f953 	bl	8001950 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ae:	f7fe f94f 	bl	8001950 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e10c      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c0:	4b6a      	ldr	r3, [pc, #424]	@ (800386c <HAL_RCC_OscConfig+0x474>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0f0      	beq.n	80036ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d106      	bne.n	80036e2 <HAL_RCC_OscConfig+0x2ea>
 80036d4:	4b64      	ldr	r3, [pc, #400]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 80036d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d8:	4a63      	ldr	r2, [pc, #396]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	6713      	str	r3, [r2, #112]	@ 0x70
 80036e0:	e01c      	b.n	800371c <HAL_RCC_OscConfig+0x324>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b05      	cmp	r3, #5
 80036e8:	d10c      	bne.n	8003704 <HAL_RCC_OscConfig+0x30c>
 80036ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ee:	4a5e      	ldr	r2, [pc, #376]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 80036f0:	f043 0304 	orr.w	r3, r3, #4
 80036f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80036f6:	4b5c      	ldr	r3, [pc, #368]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 80036f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	6713      	str	r3, [r2, #112]	@ 0x70
 8003702:	e00b      	b.n	800371c <HAL_RCC_OscConfig+0x324>
 8003704:	4b58      	ldr	r3, [pc, #352]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003708:	4a57      	ldr	r2, [pc, #348]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 800370a:	f023 0301 	bic.w	r3, r3, #1
 800370e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003710:	4b55      	ldr	r3, [pc, #340]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003714:	4a54      	ldr	r2, [pc, #336]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003716:	f023 0304 	bic.w	r3, r3, #4
 800371a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d015      	beq.n	8003750 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003724:	f7fe f914 	bl	8001950 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800372a:	e00a      	b.n	8003742 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372c:	f7fe f910 	bl	8001950 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e0cb      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003742:	4b49      	ldr	r3, [pc, #292]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0ee      	beq.n	800372c <HAL_RCC_OscConfig+0x334>
 800374e:	e014      	b.n	800377a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003750:	f7fe f8fe 	bl	8001950 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003756:	e00a      	b.n	800376e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003758:	f7fe f8fa 	bl	8001950 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003766:	4293      	cmp	r3, r2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e0b5      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800376e:	4b3e      	ldr	r3, [pc, #248]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1ee      	bne.n	8003758 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800377a:	7dfb      	ldrb	r3, [r7, #23]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d105      	bne.n	800378c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003780:	4b39      	ldr	r3, [pc, #228]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003784:	4a38      	ldr	r2, [pc, #224]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003786:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800378a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 80a1 	beq.w	80038d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003796:	4b34      	ldr	r3, [pc, #208]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 030c 	and.w	r3, r3, #12
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d05c      	beq.n	800385c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d141      	bne.n	800382e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037aa:	4b31      	ldr	r3, [pc, #196]	@ (8003870 <HAL_RCC_OscConfig+0x478>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b0:	f7fe f8ce 	bl	8001950 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b8:	f7fe f8ca 	bl	8001950 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e087      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ca:	4b27      	ldr	r3, [pc, #156]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69da      	ldr	r2, [r3, #28]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e4:	019b      	lsls	r3, r3, #6
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ec:	085b      	lsrs	r3, r3, #1
 80037ee:	3b01      	subs	r3, #1
 80037f0:	041b      	lsls	r3, r3, #16
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f8:	061b      	lsls	r3, r3, #24
 80037fa:	491b      	ldr	r1, [pc, #108]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003800:	4b1b      	ldr	r3, [pc, #108]	@ (8003870 <HAL_RCC_OscConfig+0x478>)
 8003802:	2201      	movs	r2, #1
 8003804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003806:	f7fe f8a3 	bl	8001950 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800380e:	f7fe f89f 	bl	8001950 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e05c      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003820:	4b11      	ldr	r3, [pc, #68]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f0      	beq.n	800380e <HAL_RCC_OscConfig+0x416>
 800382c:	e054      	b.n	80038d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800382e:	4b10      	ldr	r3, [pc, #64]	@ (8003870 <HAL_RCC_OscConfig+0x478>)
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003834:	f7fe f88c 	bl	8001950 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383c:	f7fe f888 	bl	8001950 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e045      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384e:	4b06      	ldr	r3, [pc, #24]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f0      	bne.n	800383c <HAL_RCC_OscConfig+0x444>
 800385a:	e03d      	b.n	80038d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d107      	bne.n	8003874 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e038      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
 8003868:	40023800 	.word	0x40023800
 800386c:	40007000 	.word	0x40007000
 8003870:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003874:	4b1b      	ldr	r3, [pc, #108]	@ (80038e4 <HAL_RCC_OscConfig+0x4ec>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d028      	beq.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800388c:	429a      	cmp	r2, r3
 800388e:	d121      	bne.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d11a      	bne.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038a4:	4013      	ands	r3, r2
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d111      	bne.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ba:	085b      	lsrs	r3, r3, #1
 80038bc:	3b01      	subs	r3, #1
 80038be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d107      	bne.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40023800 	.word	0x40023800

080038e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e0cc      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038fc:	4b68      	ldr	r3, [pc, #416]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d90c      	bls.n	8003924 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390a:	4b65      	ldr	r3, [pc, #404]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003912:	4b63      	ldr	r3, [pc, #396]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0b8      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d020      	beq.n	8003972 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800393c:	4b59      	ldr	r3, [pc, #356]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	4a58      	ldr	r2, [pc, #352]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003946:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003954:	4b53      	ldr	r3, [pc, #332]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	4a52      	ldr	r2, [pc, #328]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800395e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003960:	4b50      	ldr	r3, [pc, #320]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	494d      	ldr	r1, [pc, #308]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d044      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d107      	bne.n	8003996 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003986:	4b47      	ldr	r3, [pc, #284]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d119      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e07f      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d003      	beq.n	80039a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	d107      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a6:	4b3f      	ldr	r3, [pc, #252]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d109      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e06f      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b6:	4b3b      	ldr	r3, [pc, #236]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e067      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039c6:	4b37      	ldr	r3, [pc, #220]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f023 0203 	bic.w	r2, r3, #3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	4934      	ldr	r1, [pc, #208]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039d8:	f7fd ffba 	bl	8001950 <HAL_GetTick>
 80039dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039de:	e00a      	b.n	80039f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e0:	f7fd ffb6 	bl	8001950 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e04f      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f6:	4b2b      	ldr	r3, [pc, #172]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 020c 	and.w	r2, r3, #12
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d1eb      	bne.n	80039e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a08:	4b25      	ldr	r3, [pc, #148]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d20c      	bcs.n	8003a30 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a16:	4b22      	ldr	r3, [pc, #136]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1e:	4b20      	ldr	r3, [pc, #128]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e032      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a3c:	4b19      	ldr	r3, [pc, #100]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	4916      	ldr	r1, [pc, #88]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d009      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a5a:	4b12      	ldr	r3, [pc, #72]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	490e      	ldr	r1, [pc, #56]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a6e:	f000 f821 	bl	8003ab4 <HAL_RCC_GetSysClockFreq>
 8003a72:	4602      	mov	r2, r0
 8003a74:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	091b      	lsrs	r3, r3, #4
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	490a      	ldr	r1, [pc, #40]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a80:	5ccb      	ldrb	r3, [r1, r3]
 8003a82:	fa22 f303 	lsr.w	r3, r2, r3
 8003a86:	4a09      	ldr	r2, [pc, #36]	@ (8003aac <HAL_RCC_ClockConfig+0x1c4>)
 8003a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a8a:	4b09      	ldr	r3, [pc, #36]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fd ff1a 	bl	80018c8 <HAL_InitTick>

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40023c00 	.word	0x40023c00
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	08005b88 	.word	0x08005b88
 8003aac:	20000000 	.word	0x20000000
 8003ab0:	20000004 	.word	0x20000004

08003ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ab8:	b094      	sub	sp, #80	@ 0x50
 8003aba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003acc:	4b79      	ldr	r3, [pc, #484]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 030c 	and.w	r3, r3, #12
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d00d      	beq.n	8003af4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	f200 80e1 	bhi.w	8003ca0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d003      	beq.n	8003aee <HAL_RCC_GetSysClockFreq+0x3a>
 8003ae6:	e0db      	b.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ae8:	4b73      	ldr	r3, [pc, #460]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003aea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003aec:	e0db      	b.n	8003ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aee:	4b73      	ldr	r3, [pc, #460]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x208>)
 8003af0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003af2:	e0d8      	b.n	8003ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003af4:	4b6f      	ldr	r3, [pc, #444]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003afc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003afe:	4b6d      	ldr	r3, [pc, #436]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d063      	beq.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b0a:	4b6a      	ldr	r3, [pc, #424]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	099b      	lsrs	r3, r3, #6
 8003b10:	2200      	movs	r2, #0
 8003b12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b14:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b1e:	2300      	movs	r3, #0
 8003b20:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b26:	4622      	mov	r2, r4
 8003b28:	462b      	mov	r3, r5
 8003b2a:	f04f 0000 	mov.w	r0, #0
 8003b2e:	f04f 0100 	mov.w	r1, #0
 8003b32:	0159      	lsls	r1, r3, #5
 8003b34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b38:	0150      	lsls	r0, r2, #5
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4621      	mov	r1, r4
 8003b40:	1a51      	subs	r1, r2, r1
 8003b42:	6139      	str	r1, [r7, #16]
 8003b44:	4629      	mov	r1, r5
 8003b46:	eb63 0301 	sbc.w	r3, r3, r1
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	f04f 0300 	mov.w	r3, #0
 8003b54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b58:	4659      	mov	r1, fp
 8003b5a:	018b      	lsls	r3, r1, #6
 8003b5c:	4651      	mov	r1, sl
 8003b5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b62:	4651      	mov	r1, sl
 8003b64:	018a      	lsls	r2, r1, #6
 8003b66:	4651      	mov	r1, sl
 8003b68:	ebb2 0801 	subs.w	r8, r2, r1
 8003b6c:	4659      	mov	r1, fp
 8003b6e:	eb63 0901 	sbc.w	r9, r3, r1
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b86:	4690      	mov	r8, r2
 8003b88:	4699      	mov	r9, r3
 8003b8a:	4623      	mov	r3, r4
 8003b8c:	eb18 0303 	adds.w	r3, r8, r3
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	462b      	mov	r3, r5
 8003b94:	eb49 0303 	adc.w	r3, r9, r3
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ba6:	4629      	mov	r1, r5
 8003ba8:	024b      	lsls	r3, r1, #9
 8003baa:	4621      	mov	r1, r4
 8003bac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	024a      	lsls	r2, r1, #9
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bba:	2200      	movs	r2, #0
 8003bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bc4:	f7fc fe5a 	bl	800087c <__aeabi_uldivmod>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4613      	mov	r3, r2
 8003bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bd0:	e058      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bd2:	4b38      	ldr	r3, [pc, #224]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	099b      	lsrs	r3, r3, #6
 8003bd8:	2200      	movs	r2, #0
 8003bda:	4618      	mov	r0, r3
 8003bdc:	4611      	mov	r1, r2
 8003bde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003be2:	623b      	str	r3, [r7, #32]
 8003be4:	2300      	movs	r3, #0
 8003be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003be8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bec:	4642      	mov	r2, r8
 8003bee:	464b      	mov	r3, r9
 8003bf0:	f04f 0000 	mov.w	r0, #0
 8003bf4:	f04f 0100 	mov.w	r1, #0
 8003bf8:	0159      	lsls	r1, r3, #5
 8003bfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bfe:	0150      	lsls	r0, r2, #5
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4641      	mov	r1, r8
 8003c06:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c0a:	4649      	mov	r1, r9
 8003c0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c24:	ebb2 040a 	subs.w	r4, r2, sl
 8003c28:	eb63 050b 	sbc.w	r5, r3, fp
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	00eb      	lsls	r3, r5, #3
 8003c36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c3a:	00e2      	lsls	r2, r4, #3
 8003c3c:	4614      	mov	r4, r2
 8003c3e:	461d      	mov	r5, r3
 8003c40:	4643      	mov	r3, r8
 8003c42:	18e3      	adds	r3, r4, r3
 8003c44:	603b      	str	r3, [r7, #0]
 8003c46:	464b      	mov	r3, r9
 8003c48:	eb45 0303 	adc.w	r3, r5, r3
 8003c4c:	607b      	str	r3, [r7, #4]
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	f04f 0300 	mov.w	r3, #0
 8003c56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c5a:	4629      	mov	r1, r5
 8003c5c:	028b      	lsls	r3, r1, #10
 8003c5e:	4621      	mov	r1, r4
 8003c60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c64:	4621      	mov	r1, r4
 8003c66:	028a      	lsls	r2, r1, #10
 8003c68:	4610      	mov	r0, r2
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c6e:	2200      	movs	r2, #0
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	61fa      	str	r2, [r7, #28]
 8003c74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c78:	f7fc fe00 	bl	800087c <__aeabi_uldivmod>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4613      	mov	r3, r2
 8003c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c84:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	0c1b      	lsrs	r3, r3, #16
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	3301      	adds	r3, #1
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003c94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c9e:	e002      	b.n	8003ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ca0:	4b05      	ldr	r3, [pc, #20]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3750      	adds	r7, #80	@ 0x50
 8003cac:	46bd      	mov	sp, r7
 8003cae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	00f42400 	.word	0x00f42400
 8003cbc:	007a1200 	.word	0x007a1200

08003cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cc4:	4b03      	ldr	r3, [pc, #12]	@ (8003cd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	20000000 	.word	0x20000000

08003cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cdc:	f7ff fff0 	bl	8003cc0 <HAL_RCC_GetHCLKFreq>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	4b05      	ldr	r3, [pc, #20]	@ (8003cf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	0a9b      	lsrs	r3, r3, #10
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	4903      	ldr	r1, [pc, #12]	@ (8003cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cee:	5ccb      	ldrb	r3, [r1, r3]
 8003cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	08005b98 	.word	0x08005b98

08003d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d04:	f7ff ffdc 	bl	8003cc0 <HAL_RCC_GetHCLKFreq>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	4b05      	ldr	r3, [pc, #20]	@ (8003d20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	0b5b      	lsrs	r3, r3, #13
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	4903      	ldr	r1, [pc, #12]	@ (8003d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d16:	5ccb      	ldrb	r3, [r1, r3]
 8003d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40023800 	.word	0x40023800
 8003d24:	08005b98 	.word	0x08005b98

08003d28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e041      	b.n	8003dbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fd fc4a 	bl	80015e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3304      	adds	r3, #4
 8003d64:	4619      	mov	r1, r3
 8003d66:	4610      	mov	r0, r2
 8003d68:	f000 fb46 	bl	80043f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e041      	b.n	8003e5c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d106      	bne.n	8003df2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f839 	bl	8003e64 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2202      	movs	r2, #2
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3304      	adds	r3, #4
 8003e02:	4619      	mov	r1, r3
 8003e04:	4610      	mov	r0, r2
 8003e06:	f000 faf7 	bl	80043f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d020      	beq.n	8003edc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d01b      	beq.n	8003edc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f06f 0202 	mvn.w	r2, #2
 8003eac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fc fe74 	bl	8000bb0 <HAL_TIM_IC_CaptureCallback>
 8003ec8:	e005      	b.n	8003ed6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fa76 	bl	80043bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 fa7d 	bl	80043d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d020      	beq.n	8003f28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d01b      	beq.n	8003f28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f06f 0204 	mvn.w	r2, #4
 8003ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2202      	movs	r2, #2
 8003efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fc fe4e 	bl	8000bb0 <HAL_TIM_IC_CaptureCallback>
 8003f14:	e005      	b.n	8003f22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 fa50 	bl	80043bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fa57 	bl	80043d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d020      	beq.n	8003f74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d01b      	beq.n	8003f74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0208 	mvn.w	r2, #8
 8003f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2204      	movs	r2, #4
 8003f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fc fe28 	bl	8000bb0 <HAL_TIM_IC_CaptureCallback>
 8003f60:	e005      	b.n	8003f6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 fa2a 	bl	80043bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fa31 	bl	80043d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f003 0310 	and.w	r3, r3, #16
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d020      	beq.n	8003fc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d01b      	beq.n	8003fc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f06f 0210 	mvn.w	r2, #16
 8003f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2208      	movs	r2, #8
 8003f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fc fe02 	bl	8000bb0 <HAL_TIM_IC_CaptureCallback>
 8003fac:	e005      	b.n	8003fba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fa04 	bl	80043bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 fa0b 	bl	80043d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00c      	beq.n	8003fe4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d007      	beq.n	8003fe4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f06f 0201 	mvn.w	r2, #1
 8003fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f9e2 	bl	80043a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00c      	beq.n	8004008 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d007      	beq.n	8004008 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fcee 	bl	80049e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00c      	beq.n	800402c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004018:	2b00      	cmp	r3, #0
 800401a:	d007      	beq.n	800402c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f9dc 	bl	80043e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00c      	beq.n	8004050 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b00      	cmp	r3, #0
 800403e:	d007      	beq.n	8004050 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0220 	mvn.w	r2, #32
 8004048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fcc0 	bl	80049d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004050:	bf00      	nop
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800406e:	2b01      	cmp	r3, #1
 8004070:	d101      	bne.n	8004076 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004072:	2302      	movs	r3, #2
 8004074:	e088      	b.n	8004188 <HAL_TIM_IC_ConfigChannel+0x130>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d11b      	bne.n	80040bc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004094:	f000 fa5c 	bl	8004550 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 020c 	bic.w	r2, r2, #12
 80040a6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6999      	ldr	r1, [r3, #24]
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	619a      	str	r2, [r3, #24]
 80040ba:	e060      	b.n	800417e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d11c      	bne.n	80040fc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80040d2:	f000 fae0 	bl	8004696 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	699a      	ldr	r2, [r3, #24]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80040e4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6999      	ldr	r1, [r3, #24]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	021a      	lsls	r2, r3, #8
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	619a      	str	r2, [r3, #24]
 80040fa:	e040      	b.n	800417e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d11b      	bne.n	800413a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004112:	f000 fb2d 	bl	8004770 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69da      	ldr	r2, [r3, #28]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 020c 	bic.w	r2, r2, #12
 8004124:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	69d9      	ldr	r1, [r3, #28]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	61da      	str	r2, [r3, #28]
 8004138:	e021      	b.n	800417e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b0c      	cmp	r3, #12
 800413e:	d11c      	bne.n	800417a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004150:	f000 fb4a 	bl	80047e8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	69da      	ldr	r2, [r3, #28]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004162:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	69d9      	ldr	r1, [r3, #28]
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	021a      	lsls	r2, r3, #8
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	61da      	str	r2, [r3, #28]
 8004178:	e001      	b.n	800417e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004186:	7dfb      	ldrb	r3, [r7, #23]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_TIM_ConfigClockSource+0x1c>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e0b4      	b.n	8004316 <HAL_TIM_ConfigClockSource+0x186>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80041ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041e4:	d03e      	beq.n	8004264 <HAL_TIM_ConfigClockSource+0xd4>
 80041e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041ea:	f200 8087 	bhi.w	80042fc <HAL_TIM_ConfigClockSource+0x16c>
 80041ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041f2:	f000 8086 	beq.w	8004302 <HAL_TIM_ConfigClockSource+0x172>
 80041f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041fa:	d87f      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x16c>
 80041fc:	2b70      	cmp	r3, #112	@ 0x70
 80041fe:	d01a      	beq.n	8004236 <HAL_TIM_ConfigClockSource+0xa6>
 8004200:	2b70      	cmp	r3, #112	@ 0x70
 8004202:	d87b      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x16c>
 8004204:	2b60      	cmp	r3, #96	@ 0x60
 8004206:	d050      	beq.n	80042aa <HAL_TIM_ConfigClockSource+0x11a>
 8004208:	2b60      	cmp	r3, #96	@ 0x60
 800420a:	d877      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x16c>
 800420c:	2b50      	cmp	r3, #80	@ 0x50
 800420e:	d03c      	beq.n	800428a <HAL_TIM_ConfigClockSource+0xfa>
 8004210:	2b50      	cmp	r3, #80	@ 0x50
 8004212:	d873      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x16c>
 8004214:	2b40      	cmp	r3, #64	@ 0x40
 8004216:	d058      	beq.n	80042ca <HAL_TIM_ConfigClockSource+0x13a>
 8004218:	2b40      	cmp	r3, #64	@ 0x40
 800421a:	d86f      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x16c>
 800421c:	2b30      	cmp	r3, #48	@ 0x30
 800421e:	d064      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x15a>
 8004220:	2b30      	cmp	r3, #48	@ 0x30
 8004222:	d86b      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x16c>
 8004224:	2b20      	cmp	r3, #32
 8004226:	d060      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x15a>
 8004228:	2b20      	cmp	r3, #32
 800422a:	d867      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x16c>
 800422c:	2b00      	cmp	r3, #0
 800422e:	d05c      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x15a>
 8004230:	2b10      	cmp	r3, #16
 8004232:	d05a      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x15a>
 8004234:	e062      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004246:	f000 fb27 	bl	8004898 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004258:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	609a      	str	r2, [r3, #8]
      break;
 8004262:	e04f      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004274:	f000 fb10 	bl	8004898 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004286:	609a      	str	r2, [r3, #8]
      break;
 8004288:	e03c      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004296:	461a      	mov	r2, r3
 8004298:	f000 f9ce 	bl	8004638 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2150      	movs	r1, #80	@ 0x50
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fadd 	bl	8004862 <TIM_ITRx_SetConfig>
      break;
 80042a8:	e02c      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042b6:	461a      	mov	r2, r3
 80042b8:	f000 fa2a 	bl	8004710 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2160      	movs	r1, #96	@ 0x60
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 facd 	bl	8004862 <TIM_ITRx_SetConfig>
      break;
 80042c8:	e01c      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042d6:	461a      	mov	r2, r3
 80042d8:	f000 f9ae 	bl	8004638 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2140      	movs	r1, #64	@ 0x40
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fabd 	bl	8004862 <TIM_ITRx_SetConfig>
      break;
 80042e8:	e00c      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4619      	mov	r1, r3
 80042f4:	4610      	mov	r0, r2
 80042f6:	f000 fab4 	bl	8004862 <TIM_ITRx_SetConfig>
      break;
 80042fa:	e003      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004300:	e000      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004302:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004314:	7bfb      	ldrb	r3, [r7, #15]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b0c      	cmp	r3, #12
 8004332:	d831      	bhi.n	8004398 <HAL_TIM_ReadCapturedValue+0x78>
 8004334:	a201      	add	r2, pc, #4	@ (adr r2, 800433c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433a:	bf00      	nop
 800433c:	08004371 	.word	0x08004371
 8004340:	08004399 	.word	0x08004399
 8004344:	08004399 	.word	0x08004399
 8004348:	08004399 	.word	0x08004399
 800434c:	0800437b 	.word	0x0800437b
 8004350:	08004399 	.word	0x08004399
 8004354:	08004399 	.word	0x08004399
 8004358:	08004399 	.word	0x08004399
 800435c:	08004385 	.word	0x08004385
 8004360:	08004399 	.word	0x08004399
 8004364:	08004399 	.word	0x08004399
 8004368:	08004399 	.word	0x08004399
 800436c:	0800438f 	.word	0x0800438f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004376:	60fb      	str	r3, [r7, #12]

      break;
 8004378:	e00f      	b.n	800439a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004380:	60fb      	str	r3, [r7, #12]

      break;
 8004382:	e00a      	b.n	800439a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800438a:	60fb      	str	r3, [r7, #12]

      break;
 800438c:	e005      	b.n	800439a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004394:	60fb      	str	r3, [r7, #12]

      break;
 8004396:	e000      	b.n	800439a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004398:	bf00      	nop
  }

  return tmpreg;
 800439a:	68fb      	ldr	r3, [r7, #12]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a46      	ldr	r2, [pc, #280]	@ (8004524 <TIM_Base_SetConfig+0x12c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d013      	beq.n	8004438 <TIM_Base_SetConfig+0x40>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004416:	d00f      	beq.n	8004438 <TIM_Base_SetConfig+0x40>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a43      	ldr	r2, [pc, #268]	@ (8004528 <TIM_Base_SetConfig+0x130>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00b      	beq.n	8004438 <TIM_Base_SetConfig+0x40>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a42      	ldr	r2, [pc, #264]	@ (800452c <TIM_Base_SetConfig+0x134>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d007      	beq.n	8004438 <TIM_Base_SetConfig+0x40>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a41      	ldr	r2, [pc, #260]	@ (8004530 <TIM_Base_SetConfig+0x138>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d003      	beq.n	8004438 <TIM_Base_SetConfig+0x40>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a40      	ldr	r2, [pc, #256]	@ (8004534 <TIM_Base_SetConfig+0x13c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d108      	bne.n	800444a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800443e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a35      	ldr	r2, [pc, #212]	@ (8004524 <TIM_Base_SetConfig+0x12c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d02b      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004458:	d027      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a32      	ldr	r2, [pc, #200]	@ (8004528 <TIM_Base_SetConfig+0x130>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d023      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a31      	ldr	r2, [pc, #196]	@ (800452c <TIM_Base_SetConfig+0x134>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d01f      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a30      	ldr	r2, [pc, #192]	@ (8004530 <TIM_Base_SetConfig+0x138>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d01b      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a2f      	ldr	r2, [pc, #188]	@ (8004534 <TIM_Base_SetConfig+0x13c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d017      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a2e      	ldr	r2, [pc, #184]	@ (8004538 <TIM_Base_SetConfig+0x140>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d013      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a2d      	ldr	r2, [pc, #180]	@ (800453c <TIM_Base_SetConfig+0x144>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d00f      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a2c      	ldr	r2, [pc, #176]	@ (8004540 <TIM_Base_SetConfig+0x148>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00b      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a2b      	ldr	r2, [pc, #172]	@ (8004544 <TIM_Base_SetConfig+0x14c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d007      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a2a      	ldr	r2, [pc, #168]	@ (8004548 <TIM_Base_SetConfig+0x150>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d003      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a29      	ldr	r2, [pc, #164]	@ (800454c <TIM_Base_SetConfig+0x154>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d108      	bne.n	80044bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a10      	ldr	r2, [pc, #64]	@ (8004524 <TIM_Base_SetConfig+0x12c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d003      	beq.n	80044f0 <TIM_Base_SetConfig+0xf8>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a12      	ldr	r2, [pc, #72]	@ (8004534 <TIM_Base_SetConfig+0x13c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d103      	bne.n	80044f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	691a      	ldr	r2, [r3, #16]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b01      	cmp	r3, #1
 8004508:	d105      	bne.n	8004516 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f023 0201 	bic.w	r2, r3, #1
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	611a      	str	r2, [r3, #16]
  }
}
 8004516:	bf00      	nop
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40010000 	.word	0x40010000
 8004528:	40000400 	.word	0x40000400
 800452c:	40000800 	.word	0x40000800
 8004530:	40000c00 	.word	0x40000c00
 8004534:	40010400 	.word	0x40010400
 8004538:	40014000 	.word	0x40014000
 800453c:	40014400 	.word	0x40014400
 8004540:	40014800 	.word	0x40014800
 8004544:	40001800 	.word	0x40001800
 8004548:	40001c00 	.word	0x40001c00
 800454c:	40002000 	.word	0x40002000

08004550 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	f023 0201 	bic.w	r2, r3, #1
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4a28      	ldr	r2, [pc, #160]	@ (800461c <TIM_TI1_SetConfig+0xcc>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d01b      	beq.n	80045b6 <TIM_TI1_SetConfig+0x66>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004584:	d017      	beq.n	80045b6 <TIM_TI1_SetConfig+0x66>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4a25      	ldr	r2, [pc, #148]	@ (8004620 <TIM_TI1_SetConfig+0xd0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d013      	beq.n	80045b6 <TIM_TI1_SetConfig+0x66>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4a24      	ldr	r2, [pc, #144]	@ (8004624 <TIM_TI1_SetConfig+0xd4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00f      	beq.n	80045b6 <TIM_TI1_SetConfig+0x66>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4a23      	ldr	r2, [pc, #140]	@ (8004628 <TIM_TI1_SetConfig+0xd8>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00b      	beq.n	80045b6 <TIM_TI1_SetConfig+0x66>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4a22      	ldr	r2, [pc, #136]	@ (800462c <TIM_TI1_SetConfig+0xdc>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d007      	beq.n	80045b6 <TIM_TI1_SetConfig+0x66>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4a21      	ldr	r2, [pc, #132]	@ (8004630 <TIM_TI1_SetConfig+0xe0>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d003      	beq.n	80045b6 <TIM_TI1_SetConfig+0x66>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4a20      	ldr	r2, [pc, #128]	@ (8004634 <TIM_TI1_SetConfig+0xe4>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d101      	bne.n	80045ba <TIM_TI1_SetConfig+0x6a>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <TIM_TI1_SetConfig+0x6c>
 80045ba:	2300      	movs	r3, #0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d008      	beq.n	80045d2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f023 0303 	bic.w	r3, r3, #3
 80045c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]
 80045d0:	e003      	b.n	80045da <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f043 0301 	orr.w	r3, r3, #1
 80045d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f023 030a 	bic.w	r3, r3, #10
 80045f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f003 030a 	and.w	r3, r3, #10
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	621a      	str	r2, [r3, #32]
}
 800460e:	bf00      	nop
 8004610:	371c      	adds	r7, #28
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	40010000 	.word	0x40010000
 8004620:	40000400 	.word	0x40000400
 8004624:	40000800 	.word	0x40000800
 8004628:	40000c00 	.word	0x40000c00
 800462c:	40010400 	.word	0x40010400
 8004630:	40014000 	.word	0x40014000
 8004634:	40001800 	.word	0x40001800

08004638 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004638:	b480      	push	{r7}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	f023 0201 	bic.w	r2, r3, #1
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004662:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	4313      	orrs	r3, r2
 800466c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f023 030a 	bic.w	r3, r3, #10
 8004674:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	621a      	str	r2, [r3, #32]
}
 800468a:	bf00      	nop
 800468c:	371c      	adds	r7, #28
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004696:	b480      	push	{r7}
 8004698:	b087      	sub	sp, #28
 800469a:	af00      	add	r7, sp, #0
 800469c:	60f8      	str	r0, [r7, #12]
 800469e:	60b9      	str	r1, [r7, #8]
 80046a0:	607a      	str	r2, [r7, #4]
 80046a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	f023 0210 	bic.w	r2, r3, #16
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	021b      	lsls	r3, r3, #8
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	031b      	lsls	r3, r3, #12
 80046da:	b29b      	uxth	r3, r3
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046e8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	621a      	str	r2, [r3, #32]
}
 8004704:	bf00      	nop
 8004706:	371c      	adds	r7, #28
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	f023 0210 	bic.w	r2, r3, #16
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800473a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	031b      	lsls	r3, r3, #12
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800474c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	4313      	orrs	r3, r2
 8004756:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	621a      	str	r2, [r3, #32]
}
 8004764:	bf00      	nop
 8004766:	371c      	adds	r7, #28
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f023 0303 	bic.w	r3, r3, #3
 800479c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047ac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80047c0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	021b      	lsls	r3, r3, #8
 80047c6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	621a      	str	r2, [r3, #32]
}
 80047dc:	bf00      	nop
 80047de:	371c      	adds	r7, #28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004814:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	021b      	lsls	r3, r3, #8
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004826:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	031b      	lsls	r3, r3, #12
 800482c:	b29b      	uxth	r3, r3
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	4313      	orrs	r3, r2
 8004832:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800483a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	031b      	lsls	r3, r3, #12
 8004840:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	4313      	orrs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	621a      	str	r2, [r3, #32]
}
 8004856:	bf00      	nop
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004862:	b480      	push	{r7}
 8004864:	b085      	sub	sp, #20
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004878:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	f043 0307 	orr.w	r3, r3, #7
 8004884:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	609a      	str	r2, [r3, #8]
}
 800488c:	bf00      	nop
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	021a      	lsls	r2, r3, #8
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	4313      	orrs	r3, r2
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	609a      	str	r2, [r3, #8]
}
 80048cc:	bf00      	nop
 80048ce:	371c      	adds	r7, #28
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e05a      	b.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004916:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a21      	ldr	r2, [pc, #132]	@ (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d022      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800493c:	d01d      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a1d      	ldr	r2, [pc, #116]	@ (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d018      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a1b      	ldr	r2, [pc, #108]	@ (80049bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d013      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a1a      	ldr	r2, [pc, #104]	@ (80049c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00e      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a18      	ldr	r2, [pc, #96]	@ (80049c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d009      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a17      	ldr	r2, [pc, #92]	@ (80049c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d004      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a15      	ldr	r2, [pc, #84]	@ (80049cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d10c      	bne.n	8004994 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004980:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	4313      	orrs	r3, r2
 800498a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40010000 	.word	0x40010000
 80049b8:	40000400 	.word	0x40000400
 80049bc:	40000800 	.word	0x40000800
 80049c0:	40000c00 	.word	0x40000c00
 80049c4:	40010400 	.word	0x40010400
 80049c8:	40014000 	.word	0x40014000
 80049cc:	40001800 	.word	0x40001800

080049d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e042      	b.n	8004a90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d106      	bne.n	8004a24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fc fe32 	bl	8001688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2224      	movs	r2, #36	@ 0x24
 8004a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f973 	bl	8004d28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695a      	ldr	r2, [r3, #20]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b08a      	sub	sp, #40	@ 0x28
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	d175      	bne.n	8004ba4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d002      	beq.n	8004ac4 <HAL_UART_Transmit+0x2c>
 8004abe:	88fb      	ldrh	r3, [r7, #6]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e06e      	b.n	8004ba6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2221      	movs	r2, #33	@ 0x21
 8004ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ad6:	f7fc ff3b 	bl	8001950 <HAL_GetTick>
 8004ada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	88fa      	ldrh	r2, [r7, #6]
 8004ae0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	88fa      	ldrh	r2, [r7, #6]
 8004ae6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004af0:	d108      	bne.n	8004b04 <HAL_UART_Transmit+0x6c>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d104      	bne.n	8004b04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	61bb      	str	r3, [r7, #24]
 8004b02:	e003      	b.n	8004b0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b0c:	e02e      	b.n	8004b6c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2200      	movs	r2, #0
 8004b16:	2180      	movs	r1, #128	@ 0x80
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 f848 	bl	8004bae <UART_WaitOnFlagUntilTimeout>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d005      	beq.n	8004b30 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e03a      	b.n	8004ba6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10b      	bne.n	8004b4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	3302      	adds	r3, #2
 8004b4a:	61bb      	str	r3, [r7, #24]
 8004b4c:	e007      	b.n	8004b5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	781a      	ldrb	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1cb      	bne.n	8004b0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2140      	movs	r1, #64	@ 0x40
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 f814 	bl	8004bae <UART_WaitOnFlagUntilTimeout>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d005      	beq.n	8004b98 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e006      	b.n	8004ba6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	e000      	b.n	8004ba6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004ba4:	2302      	movs	r3, #2
  }
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3720      	adds	r7, #32
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b086      	sub	sp, #24
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	60f8      	str	r0, [r7, #12]
 8004bb6:	60b9      	str	r1, [r7, #8]
 8004bb8:	603b      	str	r3, [r7, #0]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bbe:	e03b      	b.n	8004c38 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bc6:	d037      	beq.n	8004c38 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc8:	f7fc fec2 	bl	8001950 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	6a3a      	ldr	r2, [r7, #32]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d302      	bcc.n	8004bde <UART_WaitOnFlagUntilTimeout+0x30>
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e03a      	b.n	8004c58 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d023      	beq.n	8004c38 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b80      	cmp	r3, #128	@ 0x80
 8004bf4:	d020      	beq.n	8004c38 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b40      	cmp	r3, #64	@ 0x40
 8004bfa:	d01d      	beq.n	8004c38 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d116      	bne.n	8004c38 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	617b      	str	r3, [r7, #20]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 f81d 	bl	8004c60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2208      	movs	r2, #8
 8004c2a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e00f      	b.n	8004c58 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	4013      	ands	r3, r2
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	bf0c      	ite	eq
 8004c48:	2301      	moveq	r3, #1
 8004c4a:	2300      	movne	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	461a      	mov	r2, r3
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d0b4      	beq.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b095      	sub	sp, #84	@ 0x54
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	330c      	adds	r3, #12
 8004c6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c72:	e853 3f00 	ldrex	r3, [r3]
 8004c76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	330c      	adds	r3, #12
 8004c86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c88:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c90:	e841 2300 	strex	r3, r2, [r1]
 8004c94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1e5      	bne.n	8004c68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3314      	adds	r3, #20
 8004ca2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	e853 3f00 	ldrex	r3, [r3]
 8004caa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	f023 0301 	bic.w	r3, r3, #1
 8004cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3314      	adds	r3, #20
 8004cba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cc4:	e841 2300 	strex	r3, r2, [r1]
 8004cc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1e5      	bne.n	8004c9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d119      	bne.n	8004d0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	330c      	adds	r3, #12
 8004cde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	e853 3f00 	ldrex	r3, [r3]
 8004ce6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f023 0310 	bic.w	r3, r3, #16
 8004cee:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	330c      	adds	r3, #12
 8004cf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cf8:	61ba      	str	r2, [r7, #24]
 8004cfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfc:	6979      	ldr	r1, [r7, #20]
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	e841 2300 	strex	r3, r2, [r1]
 8004d04:	613b      	str	r3, [r7, #16]
   return(result);
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1e5      	bne.n	8004cd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d1a:	bf00      	nop
 8004d1c:	3754      	adds	r7, #84	@ 0x54
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
	...

08004d28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d2c:	b0c0      	sub	sp, #256	@ 0x100
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d44:	68d9      	ldr	r1, [r3, #12]
 8004d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	ea40 0301 	orr.w	r3, r0, r1
 8004d50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	431a      	orrs	r2, r3
 8004d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004d80:	f021 010c 	bic.w	r1, r1, #12
 8004d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d8e:	430b      	orrs	r3, r1
 8004d90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da2:	6999      	ldr	r1, [r3, #24]
 8004da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	ea40 0301 	orr.w	r3, r0, r1
 8004dae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	4b8f      	ldr	r3, [pc, #572]	@ (8004ff4 <UART_SetConfig+0x2cc>)
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d005      	beq.n	8004dc8 <UART_SetConfig+0xa0>
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	4b8d      	ldr	r3, [pc, #564]	@ (8004ff8 <UART_SetConfig+0x2d0>)
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d104      	bne.n	8004dd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004dc8:	f7fe ff9a 	bl	8003d00 <HAL_RCC_GetPCLK2Freq>
 8004dcc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004dd0:	e003      	b.n	8004dda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dd2:	f7fe ff81 	bl	8003cd8 <HAL_RCC_GetPCLK1Freq>
 8004dd6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004de4:	f040 810c 	bne.w	8005000 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dec:	2200      	movs	r2, #0
 8004dee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004df2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004df6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004dfa:	4622      	mov	r2, r4
 8004dfc:	462b      	mov	r3, r5
 8004dfe:	1891      	adds	r1, r2, r2
 8004e00:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e02:	415b      	adcs	r3, r3
 8004e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	eb12 0801 	adds.w	r8, r2, r1
 8004e10:	4629      	mov	r1, r5
 8004e12:	eb43 0901 	adc.w	r9, r3, r1
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e2a:	4690      	mov	r8, r2
 8004e2c:	4699      	mov	r9, r3
 8004e2e:	4623      	mov	r3, r4
 8004e30:	eb18 0303 	adds.w	r3, r8, r3
 8004e34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e38:	462b      	mov	r3, r5
 8004e3a:	eb49 0303 	adc.w	r3, r9, r3
 8004e3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e4e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004e52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e56:	460b      	mov	r3, r1
 8004e58:	18db      	adds	r3, r3, r3
 8004e5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	eb42 0303 	adc.w	r3, r2, r3
 8004e62:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004e68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004e6c:	f7fb fd06 	bl	800087c <__aeabi_uldivmod>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4b61      	ldr	r3, [pc, #388]	@ (8004ffc <UART_SetConfig+0x2d4>)
 8004e76:	fba3 2302 	umull	r2, r3, r3, r2
 8004e7a:	095b      	lsrs	r3, r3, #5
 8004e7c:	011c      	lsls	r4, r3, #4
 8004e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e82:	2200      	movs	r2, #0
 8004e84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e88:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004e8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004e90:	4642      	mov	r2, r8
 8004e92:	464b      	mov	r3, r9
 8004e94:	1891      	adds	r1, r2, r2
 8004e96:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004e98:	415b      	adcs	r3, r3
 8004e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ea0:	4641      	mov	r1, r8
 8004ea2:	eb12 0a01 	adds.w	sl, r2, r1
 8004ea6:	4649      	mov	r1, r9
 8004ea8:	eb43 0b01 	adc.w	fp, r3, r1
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	f04f 0300 	mov.w	r3, #0
 8004eb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004eb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ebc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ec0:	4692      	mov	sl, r2
 8004ec2:	469b      	mov	fp, r3
 8004ec4:	4643      	mov	r3, r8
 8004ec6:	eb1a 0303 	adds.w	r3, sl, r3
 8004eca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ece:	464b      	mov	r3, r9
 8004ed0:	eb4b 0303 	adc.w	r3, fp, r3
 8004ed4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ee4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ee8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004eec:	460b      	mov	r3, r1
 8004eee:	18db      	adds	r3, r3, r3
 8004ef0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	eb42 0303 	adc.w	r3, r2, r3
 8004ef8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004efa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004efe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f02:	f7fb fcbb 	bl	800087c <__aeabi_uldivmod>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4611      	mov	r1, r2
 8004f0c:	4b3b      	ldr	r3, [pc, #236]	@ (8004ffc <UART_SetConfig+0x2d4>)
 8004f0e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	2264      	movs	r2, #100	@ 0x64
 8004f16:	fb02 f303 	mul.w	r3, r2, r3
 8004f1a:	1acb      	subs	r3, r1, r3
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f22:	4b36      	ldr	r3, [pc, #216]	@ (8004ffc <UART_SetConfig+0x2d4>)
 8004f24:	fba3 2302 	umull	r2, r3, r3, r2
 8004f28:	095b      	lsrs	r3, r3, #5
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004f30:	441c      	add	r4, r3
 8004f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f36:	2200      	movs	r2, #0
 8004f38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f3c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004f40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004f44:	4642      	mov	r2, r8
 8004f46:	464b      	mov	r3, r9
 8004f48:	1891      	adds	r1, r2, r2
 8004f4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f4c:	415b      	adcs	r3, r3
 8004f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004f54:	4641      	mov	r1, r8
 8004f56:	1851      	adds	r1, r2, r1
 8004f58:	6339      	str	r1, [r7, #48]	@ 0x30
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	414b      	adcs	r3, r1
 8004f5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004f6c:	4659      	mov	r1, fp
 8004f6e:	00cb      	lsls	r3, r1, #3
 8004f70:	4651      	mov	r1, sl
 8004f72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f76:	4651      	mov	r1, sl
 8004f78:	00ca      	lsls	r2, r1, #3
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4603      	mov	r3, r0
 8004f80:	4642      	mov	r2, r8
 8004f82:	189b      	adds	r3, r3, r2
 8004f84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f88:	464b      	mov	r3, r9
 8004f8a:	460a      	mov	r2, r1
 8004f8c:	eb42 0303 	adc.w	r3, r2, r3
 8004f90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004fa0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004fa4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004fa8:	460b      	mov	r3, r1
 8004faa:	18db      	adds	r3, r3, r3
 8004fac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fae:	4613      	mov	r3, r2
 8004fb0:	eb42 0303 	adc.w	r3, r2, r3
 8004fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004fba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004fbe:	f7fb fc5d 	bl	800087c <__aeabi_uldivmod>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004ffc <UART_SetConfig+0x2d4>)
 8004fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fcc:	095b      	lsrs	r3, r3, #5
 8004fce:	2164      	movs	r1, #100	@ 0x64
 8004fd0:	fb01 f303 	mul.w	r3, r1, r3
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	3332      	adds	r3, #50	@ 0x32
 8004fda:	4a08      	ldr	r2, [pc, #32]	@ (8004ffc <UART_SetConfig+0x2d4>)
 8004fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe0:	095b      	lsrs	r3, r3, #5
 8004fe2:	f003 0207 	and.w	r2, r3, #7
 8004fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4422      	add	r2, r4
 8004fee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ff0:	e106      	b.n	8005200 <UART_SetConfig+0x4d8>
 8004ff2:	bf00      	nop
 8004ff4:	40011000 	.word	0x40011000
 8004ff8:	40011400 	.word	0x40011400
 8004ffc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005000:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005004:	2200      	movs	r2, #0
 8005006:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800500a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800500e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005012:	4642      	mov	r2, r8
 8005014:	464b      	mov	r3, r9
 8005016:	1891      	adds	r1, r2, r2
 8005018:	6239      	str	r1, [r7, #32]
 800501a:	415b      	adcs	r3, r3
 800501c:	627b      	str	r3, [r7, #36]	@ 0x24
 800501e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005022:	4641      	mov	r1, r8
 8005024:	1854      	adds	r4, r2, r1
 8005026:	4649      	mov	r1, r9
 8005028:	eb43 0501 	adc.w	r5, r3, r1
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	00eb      	lsls	r3, r5, #3
 8005036:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800503a:	00e2      	lsls	r2, r4, #3
 800503c:	4614      	mov	r4, r2
 800503e:	461d      	mov	r5, r3
 8005040:	4643      	mov	r3, r8
 8005042:	18e3      	adds	r3, r4, r3
 8005044:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005048:	464b      	mov	r3, r9
 800504a:	eb45 0303 	adc.w	r3, r5, r3
 800504e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800505e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	f04f 0300 	mov.w	r3, #0
 800506a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800506e:	4629      	mov	r1, r5
 8005070:	008b      	lsls	r3, r1, #2
 8005072:	4621      	mov	r1, r4
 8005074:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005078:	4621      	mov	r1, r4
 800507a:	008a      	lsls	r2, r1, #2
 800507c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005080:	f7fb fbfc 	bl	800087c <__aeabi_uldivmod>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4b60      	ldr	r3, [pc, #384]	@ (800520c <UART_SetConfig+0x4e4>)
 800508a:	fba3 2302 	umull	r2, r3, r3, r2
 800508e:	095b      	lsrs	r3, r3, #5
 8005090:	011c      	lsls	r4, r3, #4
 8005092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005096:	2200      	movs	r2, #0
 8005098:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800509c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80050a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80050a4:	4642      	mov	r2, r8
 80050a6:	464b      	mov	r3, r9
 80050a8:	1891      	adds	r1, r2, r2
 80050aa:	61b9      	str	r1, [r7, #24]
 80050ac:	415b      	adcs	r3, r3
 80050ae:	61fb      	str	r3, [r7, #28]
 80050b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050b4:	4641      	mov	r1, r8
 80050b6:	1851      	adds	r1, r2, r1
 80050b8:	6139      	str	r1, [r7, #16]
 80050ba:	4649      	mov	r1, r9
 80050bc:	414b      	adcs	r3, r1
 80050be:	617b      	str	r3, [r7, #20]
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050cc:	4659      	mov	r1, fp
 80050ce:	00cb      	lsls	r3, r1, #3
 80050d0:	4651      	mov	r1, sl
 80050d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050d6:	4651      	mov	r1, sl
 80050d8:	00ca      	lsls	r2, r1, #3
 80050da:	4610      	mov	r0, r2
 80050dc:	4619      	mov	r1, r3
 80050de:	4603      	mov	r3, r0
 80050e0:	4642      	mov	r2, r8
 80050e2:	189b      	adds	r3, r3, r2
 80050e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80050e8:	464b      	mov	r3, r9
 80050ea:	460a      	mov	r2, r1
 80050ec:	eb42 0303 	adc.w	r3, r2, r3
 80050f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80050f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80050fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	f04f 0300 	mov.w	r3, #0
 8005108:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800510c:	4649      	mov	r1, r9
 800510e:	008b      	lsls	r3, r1, #2
 8005110:	4641      	mov	r1, r8
 8005112:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005116:	4641      	mov	r1, r8
 8005118:	008a      	lsls	r2, r1, #2
 800511a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800511e:	f7fb fbad 	bl	800087c <__aeabi_uldivmod>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	4611      	mov	r1, r2
 8005128:	4b38      	ldr	r3, [pc, #224]	@ (800520c <UART_SetConfig+0x4e4>)
 800512a:	fba3 2301 	umull	r2, r3, r3, r1
 800512e:	095b      	lsrs	r3, r3, #5
 8005130:	2264      	movs	r2, #100	@ 0x64
 8005132:	fb02 f303 	mul.w	r3, r2, r3
 8005136:	1acb      	subs	r3, r1, r3
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	3332      	adds	r3, #50	@ 0x32
 800513c:	4a33      	ldr	r2, [pc, #204]	@ (800520c <UART_SetConfig+0x4e4>)
 800513e:	fba2 2303 	umull	r2, r3, r2, r3
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005148:	441c      	add	r4, r3
 800514a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800514e:	2200      	movs	r2, #0
 8005150:	673b      	str	r3, [r7, #112]	@ 0x70
 8005152:	677a      	str	r2, [r7, #116]	@ 0x74
 8005154:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005158:	4642      	mov	r2, r8
 800515a:	464b      	mov	r3, r9
 800515c:	1891      	adds	r1, r2, r2
 800515e:	60b9      	str	r1, [r7, #8]
 8005160:	415b      	adcs	r3, r3
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005168:	4641      	mov	r1, r8
 800516a:	1851      	adds	r1, r2, r1
 800516c:	6039      	str	r1, [r7, #0]
 800516e:	4649      	mov	r1, r9
 8005170:	414b      	adcs	r3, r1
 8005172:	607b      	str	r3, [r7, #4]
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005180:	4659      	mov	r1, fp
 8005182:	00cb      	lsls	r3, r1, #3
 8005184:	4651      	mov	r1, sl
 8005186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800518a:	4651      	mov	r1, sl
 800518c:	00ca      	lsls	r2, r1, #3
 800518e:	4610      	mov	r0, r2
 8005190:	4619      	mov	r1, r3
 8005192:	4603      	mov	r3, r0
 8005194:	4642      	mov	r2, r8
 8005196:	189b      	adds	r3, r3, r2
 8005198:	66bb      	str	r3, [r7, #104]	@ 0x68
 800519a:	464b      	mov	r3, r9
 800519c:	460a      	mov	r2, r1
 800519e:	eb42 0303 	adc.w	r3, r2, r3
 80051a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80051ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	f04f 0300 	mov.w	r3, #0
 80051b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80051bc:	4649      	mov	r1, r9
 80051be:	008b      	lsls	r3, r1, #2
 80051c0:	4641      	mov	r1, r8
 80051c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051c6:	4641      	mov	r1, r8
 80051c8:	008a      	lsls	r2, r1, #2
 80051ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80051ce:	f7fb fb55 	bl	800087c <__aeabi_uldivmod>
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	4b0d      	ldr	r3, [pc, #52]	@ (800520c <UART_SetConfig+0x4e4>)
 80051d8:	fba3 1302 	umull	r1, r3, r3, r2
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	2164      	movs	r1, #100	@ 0x64
 80051e0:	fb01 f303 	mul.w	r3, r1, r3
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	3332      	adds	r3, #50	@ 0x32
 80051ea:	4a08      	ldr	r2, [pc, #32]	@ (800520c <UART_SetConfig+0x4e4>)
 80051ec:	fba2 2303 	umull	r2, r3, r2, r3
 80051f0:	095b      	lsrs	r3, r3, #5
 80051f2:	f003 020f 	and.w	r2, r3, #15
 80051f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4422      	add	r2, r4
 80051fe:	609a      	str	r2, [r3, #8]
}
 8005200:	bf00      	nop
 8005202:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005206:	46bd      	mov	sp, r7
 8005208:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800520c:	51eb851f 	.word	0x51eb851f

08005210 <siprintf>:
 8005210:	b40e      	push	{r1, r2, r3}
 8005212:	b500      	push	{lr}
 8005214:	b09c      	sub	sp, #112	@ 0x70
 8005216:	ab1d      	add	r3, sp, #116	@ 0x74
 8005218:	9002      	str	r0, [sp, #8]
 800521a:	9006      	str	r0, [sp, #24]
 800521c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005220:	4809      	ldr	r0, [pc, #36]	@ (8005248 <siprintf+0x38>)
 8005222:	9107      	str	r1, [sp, #28]
 8005224:	9104      	str	r1, [sp, #16]
 8005226:	4909      	ldr	r1, [pc, #36]	@ (800524c <siprintf+0x3c>)
 8005228:	f853 2b04 	ldr.w	r2, [r3], #4
 800522c:	9105      	str	r1, [sp, #20]
 800522e:	6800      	ldr	r0, [r0, #0]
 8005230:	9301      	str	r3, [sp, #4]
 8005232:	a902      	add	r1, sp, #8
 8005234:	f000 f994 	bl	8005560 <_svfiprintf_r>
 8005238:	9b02      	ldr	r3, [sp, #8]
 800523a:	2200      	movs	r2, #0
 800523c:	701a      	strb	r2, [r3, #0]
 800523e:	b01c      	add	sp, #112	@ 0x70
 8005240:	f85d eb04 	ldr.w	lr, [sp], #4
 8005244:	b003      	add	sp, #12
 8005246:	4770      	bx	lr
 8005248:	2000000c 	.word	0x2000000c
 800524c:	ffff0208 	.word	0xffff0208

08005250 <memset>:
 8005250:	4402      	add	r2, r0
 8005252:	4603      	mov	r3, r0
 8005254:	4293      	cmp	r3, r2
 8005256:	d100      	bne.n	800525a <memset+0xa>
 8005258:	4770      	bx	lr
 800525a:	f803 1b01 	strb.w	r1, [r3], #1
 800525e:	e7f9      	b.n	8005254 <memset+0x4>

08005260 <__errno>:
 8005260:	4b01      	ldr	r3, [pc, #4]	@ (8005268 <__errno+0x8>)
 8005262:	6818      	ldr	r0, [r3, #0]
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	2000000c 	.word	0x2000000c

0800526c <__libc_init_array>:
 800526c:	b570      	push	{r4, r5, r6, lr}
 800526e:	4d0d      	ldr	r5, [pc, #52]	@ (80052a4 <__libc_init_array+0x38>)
 8005270:	4c0d      	ldr	r4, [pc, #52]	@ (80052a8 <__libc_init_array+0x3c>)
 8005272:	1b64      	subs	r4, r4, r5
 8005274:	10a4      	asrs	r4, r4, #2
 8005276:	2600      	movs	r6, #0
 8005278:	42a6      	cmp	r6, r4
 800527a:	d109      	bne.n	8005290 <__libc_init_array+0x24>
 800527c:	4d0b      	ldr	r5, [pc, #44]	@ (80052ac <__libc_init_array+0x40>)
 800527e:	4c0c      	ldr	r4, [pc, #48]	@ (80052b0 <__libc_init_array+0x44>)
 8005280:	f000 fc66 	bl	8005b50 <_init>
 8005284:	1b64      	subs	r4, r4, r5
 8005286:	10a4      	asrs	r4, r4, #2
 8005288:	2600      	movs	r6, #0
 800528a:	42a6      	cmp	r6, r4
 800528c:	d105      	bne.n	800529a <__libc_init_array+0x2e>
 800528e:	bd70      	pop	{r4, r5, r6, pc}
 8005290:	f855 3b04 	ldr.w	r3, [r5], #4
 8005294:	4798      	blx	r3
 8005296:	3601      	adds	r6, #1
 8005298:	e7ee      	b.n	8005278 <__libc_init_array+0xc>
 800529a:	f855 3b04 	ldr.w	r3, [r5], #4
 800529e:	4798      	blx	r3
 80052a0:	3601      	adds	r6, #1
 80052a2:	e7f2      	b.n	800528a <__libc_init_array+0x1e>
 80052a4:	08005bdc 	.word	0x08005bdc
 80052a8:	08005bdc 	.word	0x08005bdc
 80052ac:	08005bdc 	.word	0x08005bdc
 80052b0:	08005be0 	.word	0x08005be0

080052b4 <__retarget_lock_acquire_recursive>:
 80052b4:	4770      	bx	lr

080052b6 <__retarget_lock_release_recursive>:
 80052b6:	4770      	bx	lr

080052b8 <_free_r>:
 80052b8:	b538      	push	{r3, r4, r5, lr}
 80052ba:	4605      	mov	r5, r0
 80052bc:	2900      	cmp	r1, #0
 80052be:	d041      	beq.n	8005344 <_free_r+0x8c>
 80052c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052c4:	1f0c      	subs	r4, r1, #4
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	bfb8      	it	lt
 80052ca:	18e4      	addlt	r4, r4, r3
 80052cc:	f000 f8e0 	bl	8005490 <__malloc_lock>
 80052d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005348 <_free_r+0x90>)
 80052d2:	6813      	ldr	r3, [r2, #0]
 80052d4:	b933      	cbnz	r3, 80052e4 <_free_r+0x2c>
 80052d6:	6063      	str	r3, [r4, #4]
 80052d8:	6014      	str	r4, [r2, #0]
 80052da:	4628      	mov	r0, r5
 80052dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052e0:	f000 b8dc 	b.w	800549c <__malloc_unlock>
 80052e4:	42a3      	cmp	r3, r4
 80052e6:	d908      	bls.n	80052fa <_free_r+0x42>
 80052e8:	6820      	ldr	r0, [r4, #0]
 80052ea:	1821      	adds	r1, r4, r0
 80052ec:	428b      	cmp	r3, r1
 80052ee:	bf01      	itttt	eq
 80052f0:	6819      	ldreq	r1, [r3, #0]
 80052f2:	685b      	ldreq	r3, [r3, #4]
 80052f4:	1809      	addeq	r1, r1, r0
 80052f6:	6021      	streq	r1, [r4, #0]
 80052f8:	e7ed      	b.n	80052d6 <_free_r+0x1e>
 80052fa:	461a      	mov	r2, r3
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	b10b      	cbz	r3, 8005304 <_free_r+0x4c>
 8005300:	42a3      	cmp	r3, r4
 8005302:	d9fa      	bls.n	80052fa <_free_r+0x42>
 8005304:	6811      	ldr	r1, [r2, #0]
 8005306:	1850      	adds	r0, r2, r1
 8005308:	42a0      	cmp	r0, r4
 800530a:	d10b      	bne.n	8005324 <_free_r+0x6c>
 800530c:	6820      	ldr	r0, [r4, #0]
 800530e:	4401      	add	r1, r0
 8005310:	1850      	adds	r0, r2, r1
 8005312:	4283      	cmp	r3, r0
 8005314:	6011      	str	r1, [r2, #0]
 8005316:	d1e0      	bne.n	80052da <_free_r+0x22>
 8005318:	6818      	ldr	r0, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	6053      	str	r3, [r2, #4]
 800531e:	4408      	add	r0, r1
 8005320:	6010      	str	r0, [r2, #0]
 8005322:	e7da      	b.n	80052da <_free_r+0x22>
 8005324:	d902      	bls.n	800532c <_free_r+0x74>
 8005326:	230c      	movs	r3, #12
 8005328:	602b      	str	r3, [r5, #0]
 800532a:	e7d6      	b.n	80052da <_free_r+0x22>
 800532c:	6820      	ldr	r0, [r4, #0]
 800532e:	1821      	adds	r1, r4, r0
 8005330:	428b      	cmp	r3, r1
 8005332:	bf04      	itt	eq
 8005334:	6819      	ldreq	r1, [r3, #0]
 8005336:	685b      	ldreq	r3, [r3, #4]
 8005338:	6063      	str	r3, [r4, #4]
 800533a:	bf04      	itt	eq
 800533c:	1809      	addeq	r1, r1, r0
 800533e:	6021      	streq	r1, [r4, #0]
 8005340:	6054      	str	r4, [r2, #4]
 8005342:	e7ca      	b.n	80052da <_free_r+0x22>
 8005344:	bd38      	pop	{r3, r4, r5, pc}
 8005346:	bf00      	nop
 8005348:	200003b0 	.word	0x200003b0

0800534c <sbrk_aligned>:
 800534c:	b570      	push	{r4, r5, r6, lr}
 800534e:	4e0f      	ldr	r6, [pc, #60]	@ (800538c <sbrk_aligned+0x40>)
 8005350:	460c      	mov	r4, r1
 8005352:	6831      	ldr	r1, [r6, #0]
 8005354:	4605      	mov	r5, r0
 8005356:	b911      	cbnz	r1, 800535e <sbrk_aligned+0x12>
 8005358:	f000 fba6 	bl	8005aa8 <_sbrk_r>
 800535c:	6030      	str	r0, [r6, #0]
 800535e:	4621      	mov	r1, r4
 8005360:	4628      	mov	r0, r5
 8005362:	f000 fba1 	bl	8005aa8 <_sbrk_r>
 8005366:	1c43      	adds	r3, r0, #1
 8005368:	d103      	bne.n	8005372 <sbrk_aligned+0x26>
 800536a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800536e:	4620      	mov	r0, r4
 8005370:	bd70      	pop	{r4, r5, r6, pc}
 8005372:	1cc4      	adds	r4, r0, #3
 8005374:	f024 0403 	bic.w	r4, r4, #3
 8005378:	42a0      	cmp	r0, r4
 800537a:	d0f8      	beq.n	800536e <sbrk_aligned+0x22>
 800537c:	1a21      	subs	r1, r4, r0
 800537e:	4628      	mov	r0, r5
 8005380:	f000 fb92 	bl	8005aa8 <_sbrk_r>
 8005384:	3001      	adds	r0, #1
 8005386:	d1f2      	bne.n	800536e <sbrk_aligned+0x22>
 8005388:	e7ef      	b.n	800536a <sbrk_aligned+0x1e>
 800538a:	bf00      	nop
 800538c:	200003ac 	.word	0x200003ac

08005390 <_malloc_r>:
 8005390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005394:	1ccd      	adds	r5, r1, #3
 8005396:	f025 0503 	bic.w	r5, r5, #3
 800539a:	3508      	adds	r5, #8
 800539c:	2d0c      	cmp	r5, #12
 800539e:	bf38      	it	cc
 80053a0:	250c      	movcc	r5, #12
 80053a2:	2d00      	cmp	r5, #0
 80053a4:	4606      	mov	r6, r0
 80053a6:	db01      	blt.n	80053ac <_malloc_r+0x1c>
 80053a8:	42a9      	cmp	r1, r5
 80053aa:	d904      	bls.n	80053b6 <_malloc_r+0x26>
 80053ac:	230c      	movs	r3, #12
 80053ae:	6033      	str	r3, [r6, #0]
 80053b0:	2000      	movs	r0, #0
 80053b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800548c <_malloc_r+0xfc>
 80053ba:	f000 f869 	bl	8005490 <__malloc_lock>
 80053be:	f8d8 3000 	ldr.w	r3, [r8]
 80053c2:	461c      	mov	r4, r3
 80053c4:	bb44      	cbnz	r4, 8005418 <_malloc_r+0x88>
 80053c6:	4629      	mov	r1, r5
 80053c8:	4630      	mov	r0, r6
 80053ca:	f7ff ffbf 	bl	800534c <sbrk_aligned>
 80053ce:	1c43      	adds	r3, r0, #1
 80053d0:	4604      	mov	r4, r0
 80053d2:	d158      	bne.n	8005486 <_malloc_r+0xf6>
 80053d4:	f8d8 4000 	ldr.w	r4, [r8]
 80053d8:	4627      	mov	r7, r4
 80053da:	2f00      	cmp	r7, #0
 80053dc:	d143      	bne.n	8005466 <_malloc_r+0xd6>
 80053de:	2c00      	cmp	r4, #0
 80053e0:	d04b      	beq.n	800547a <_malloc_r+0xea>
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	4639      	mov	r1, r7
 80053e6:	4630      	mov	r0, r6
 80053e8:	eb04 0903 	add.w	r9, r4, r3
 80053ec:	f000 fb5c 	bl	8005aa8 <_sbrk_r>
 80053f0:	4581      	cmp	r9, r0
 80053f2:	d142      	bne.n	800547a <_malloc_r+0xea>
 80053f4:	6821      	ldr	r1, [r4, #0]
 80053f6:	1a6d      	subs	r5, r5, r1
 80053f8:	4629      	mov	r1, r5
 80053fa:	4630      	mov	r0, r6
 80053fc:	f7ff ffa6 	bl	800534c <sbrk_aligned>
 8005400:	3001      	adds	r0, #1
 8005402:	d03a      	beq.n	800547a <_malloc_r+0xea>
 8005404:	6823      	ldr	r3, [r4, #0]
 8005406:	442b      	add	r3, r5
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	f8d8 3000 	ldr.w	r3, [r8]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	bb62      	cbnz	r2, 800546c <_malloc_r+0xdc>
 8005412:	f8c8 7000 	str.w	r7, [r8]
 8005416:	e00f      	b.n	8005438 <_malloc_r+0xa8>
 8005418:	6822      	ldr	r2, [r4, #0]
 800541a:	1b52      	subs	r2, r2, r5
 800541c:	d420      	bmi.n	8005460 <_malloc_r+0xd0>
 800541e:	2a0b      	cmp	r2, #11
 8005420:	d917      	bls.n	8005452 <_malloc_r+0xc2>
 8005422:	1961      	adds	r1, r4, r5
 8005424:	42a3      	cmp	r3, r4
 8005426:	6025      	str	r5, [r4, #0]
 8005428:	bf18      	it	ne
 800542a:	6059      	strne	r1, [r3, #4]
 800542c:	6863      	ldr	r3, [r4, #4]
 800542e:	bf08      	it	eq
 8005430:	f8c8 1000 	streq.w	r1, [r8]
 8005434:	5162      	str	r2, [r4, r5]
 8005436:	604b      	str	r3, [r1, #4]
 8005438:	4630      	mov	r0, r6
 800543a:	f000 f82f 	bl	800549c <__malloc_unlock>
 800543e:	f104 000b 	add.w	r0, r4, #11
 8005442:	1d23      	adds	r3, r4, #4
 8005444:	f020 0007 	bic.w	r0, r0, #7
 8005448:	1ac2      	subs	r2, r0, r3
 800544a:	bf1c      	itt	ne
 800544c:	1a1b      	subne	r3, r3, r0
 800544e:	50a3      	strne	r3, [r4, r2]
 8005450:	e7af      	b.n	80053b2 <_malloc_r+0x22>
 8005452:	6862      	ldr	r2, [r4, #4]
 8005454:	42a3      	cmp	r3, r4
 8005456:	bf0c      	ite	eq
 8005458:	f8c8 2000 	streq.w	r2, [r8]
 800545c:	605a      	strne	r2, [r3, #4]
 800545e:	e7eb      	b.n	8005438 <_malloc_r+0xa8>
 8005460:	4623      	mov	r3, r4
 8005462:	6864      	ldr	r4, [r4, #4]
 8005464:	e7ae      	b.n	80053c4 <_malloc_r+0x34>
 8005466:	463c      	mov	r4, r7
 8005468:	687f      	ldr	r7, [r7, #4]
 800546a:	e7b6      	b.n	80053da <_malloc_r+0x4a>
 800546c:	461a      	mov	r2, r3
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	42a3      	cmp	r3, r4
 8005472:	d1fb      	bne.n	800546c <_malloc_r+0xdc>
 8005474:	2300      	movs	r3, #0
 8005476:	6053      	str	r3, [r2, #4]
 8005478:	e7de      	b.n	8005438 <_malloc_r+0xa8>
 800547a:	230c      	movs	r3, #12
 800547c:	6033      	str	r3, [r6, #0]
 800547e:	4630      	mov	r0, r6
 8005480:	f000 f80c 	bl	800549c <__malloc_unlock>
 8005484:	e794      	b.n	80053b0 <_malloc_r+0x20>
 8005486:	6005      	str	r5, [r0, #0]
 8005488:	e7d6      	b.n	8005438 <_malloc_r+0xa8>
 800548a:	bf00      	nop
 800548c:	200003b0 	.word	0x200003b0

08005490 <__malloc_lock>:
 8005490:	4801      	ldr	r0, [pc, #4]	@ (8005498 <__malloc_lock+0x8>)
 8005492:	f7ff bf0f 	b.w	80052b4 <__retarget_lock_acquire_recursive>
 8005496:	bf00      	nop
 8005498:	200003a8 	.word	0x200003a8

0800549c <__malloc_unlock>:
 800549c:	4801      	ldr	r0, [pc, #4]	@ (80054a4 <__malloc_unlock+0x8>)
 800549e:	f7ff bf0a 	b.w	80052b6 <__retarget_lock_release_recursive>
 80054a2:	bf00      	nop
 80054a4:	200003a8 	.word	0x200003a8

080054a8 <__ssputs_r>:
 80054a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054ac:	688e      	ldr	r6, [r1, #8]
 80054ae:	461f      	mov	r7, r3
 80054b0:	42be      	cmp	r6, r7
 80054b2:	680b      	ldr	r3, [r1, #0]
 80054b4:	4682      	mov	sl, r0
 80054b6:	460c      	mov	r4, r1
 80054b8:	4690      	mov	r8, r2
 80054ba:	d82d      	bhi.n	8005518 <__ssputs_r+0x70>
 80054bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80054c4:	d026      	beq.n	8005514 <__ssputs_r+0x6c>
 80054c6:	6965      	ldr	r5, [r4, #20]
 80054c8:	6909      	ldr	r1, [r1, #16]
 80054ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054ce:	eba3 0901 	sub.w	r9, r3, r1
 80054d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054d6:	1c7b      	adds	r3, r7, #1
 80054d8:	444b      	add	r3, r9
 80054da:	106d      	asrs	r5, r5, #1
 80054dc:	429d      	cmp	r5, r3
 80054de:	bf38      	it	cc
 80054e0:	461d      	movcc	r5, r3
 80054e2:	0553      	lsls	r3, r2, #21
 80054e4:	d527      	bpl.n	8005536 <__ssputs_r+0x8e>
 80054e6:	4629      	mov	r1, r5
 80054e8:	f7ff ff52 	bl	8005390 <_malloc_r>
 80054ec:	4606      	mov	r6, r0
 80054ee:	b360      	cbz	r0, 800554a <__ssputs_r+0xa2>
 80054f0:	6921      	ldr	r1, [r4, #16]
 80054f2:	464a      	mov	r2, r9
 80054f4:	f000 fae8 	bl	8005ac8 <memcpy>
 80054f8:	89a3      	ldrh	r3, [r4, #12]
 80054fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80054fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005502:	81a3      	strh	r3, [r4, #12]
 8005504:	6126      	str	r6, [r4, #16]
 8005506:	6165      	str	r5, [r4, #20]
 8005508:	444e      	add	r6, r9
 800550a:	eba5 0509 	sub.w	r5, r5, r9
 800550e:	6026      	str	r6, [r4, #0]
 8005510:	60a5      	str	r5, [r4, #8]
 8005512:	463e      	mov	r6, r7
 8005514:	42be      	cmp	r6, r7
 8005516:	d900      	bls.n	800551a <__ssputs_r+0x72>
 8005518:	463e      	mov	r6, r7
 800551a:	6820      	ldr	r0, [r4, #0]
 800551c:	4632      	mov	r2, r6
 800551e:	4641      	mov	r1, r8
 8005520:	f000 faa8 	bl	8005a74 <memmove>
 8005524:	68a3      	ldr	r3, [r4, #8]
 8005526:	1b9b      	subs	r3, r3, r6
 8005528:	60a3      	str	r3, [r4, #8]
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	4433      	add	r3, r6
 800552e:	6023      	str	r3, [r4, #0]
 8005530:	2000      	movs	r0, #0
 8005532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005536:	462a      	mov	r2, r5
 8005538:	f000 fad4 	bl	8005ae4 <_realloc_r>
 800553c:	4606      	mov	r6, r0
 800553e:	2800      	cmp	r0, #0
 8005540:	d1e0      	bne.n	8005504 <__ssputs_r+0x5c>
 8005542:	6921      	ldr	r1, [r4, #16]
 8005544:	4650      	mov	r0, sl
 8005546:	f7ff feb7 	bl	80052b8 <_free_r>
 800554a:	230c      	movs	r3, #12
 800554c:	f8ca 3000 	str.w	r3, [sl]
 8005550:	89a3      	ldrh	r3, [r4, #12]
 8005552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005556:	81a3      	strh	r3, [r4, #12]
 8005558:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800555c:	e7e9      	b.n	8005532 <__ssputs_r+0x8a>
	...

08005560 <_svfiprintf_r>:
 8005560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005564:	4698      	mov	r8, r3
 8005566:	898b      	ldrh	r3, [r1, #12]
 8005568:	061b      	lsls	r3, r3, #24
 800556a:	b09d      	sub	sp, #116	@ 0x74
 800556c:	4607      	mov	r7, r0
 800556e:	460d      	mov	r5, r1
 8005570:	4614      	mov	r4, r2
 8005572:	d510      	bpl.n	8005596 <_svfiprintf_r+0x36>
 8005574:	690b      	ldr	r3, [r1, #16]
 8005576:	b973      	cbnz	r3, 8005596 <_svfiprintf_r+0x36>
 8005578:	2140      	movs	r1, #64	@ 0x40
 800557a:	f7ff ff09 	bl	8005390 <_malloc_r>
 800557e:	6028      	str	r0, [r5, #0]
 8005580:	6128      	str	r0, [r5, #16]
 8005582:	b930      	cbnz	r0, 8005592 <_svfiprintf_r+0x32>
 8005584:	230c      	movs	r3, #12
 8005586:	603b      	str	r3, [r7, #0]
 8005588:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800558c:	b01d      	add	sp, #116	@ 0x74
 800558e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005592:	2340      	movs	r3, #64	@ 0x40
 8005594:	616b      	str	r3, [r5, #20]
 8005596:	2300      	movs	r3, #0
 8005598:	9309      	str	r3, [sp, #36]	@ 0x24
 800559a:	2320      	movs	r3, #32
 800559c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80055a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80055a4:	2330      	movs	r3, #48	@ 0x30
 80055a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005744 <_svfiprintf_r+0x1e4>
 80055aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80055ae:	f04f 0901 	mov.w	r9, #1
 80055b2:	4623      	mov	r3, r4
 80055b4:	469a      	mov	sl, r3
 80055b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055ba:	b10a      	cbz	r2, 80055c0 <_svfiprintf_r+0x60>
 80055bc:	2a25      	cmp	r2, #37	@ 0x25
 80055be:	d1f9      	bne.n	80055b4 <_svfiprintf_r+0x54>
 80055c0:	ebba 0b04 	subs.w	fp, sl, r4
 80055c4:	d00b      	beq.n	80055de <_svfiprintf_r+0x7e>
 80055c6:	465b      	mov	r3, fp
 80055c8:	4622      	mov	r2, r4
 80055ca:	4629      	mov	r1, r5
 80055cc:	4638      	mov	r0, r7
 80055ce:	f7ff ff6b 	bl	80054a8 <__ssputs_r>
 80055d2:	3001      	adds	r0, #1
 80055d4:	f000 80a7 	beq.w	8005726 <_svfiprintf_r+0x1c6>
 80055d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055da:	445a      	add	r2, fp
 80055dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80055de:	f89a 3000 	ldrb.w	r3, [sl]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 809f 	beq.w	8005726 <_svfiprintf_r+0x1c6>
 80055e8:	2300      	movs	r3, #0
 80055ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80055ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055f2:	f10a 0a01 	add.w	sl, sl, #1
 80055f6:	9304      	str	r3, [sp, #16]
 80055f8:	9307      	str	r3, [sp, #28]
 80055fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80055fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8005600:	4654      	mov	r4, sl
 8005602:	2205      	movs	r2, #5
 8005604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005608:	484e      	ldr	r0, [pc, #312]	@ (8005744 <_svfiprintf_r+0x1e4>)
 800560a:	f7fa fde1 	bl	80001d0 <memchr>
 800560e:	9a04      	ldr	r2, [sp, #16]
 8005610:	b9d8      	cbnz	r0, 800564a <_svfiprintf_r+0xea>
 8005612:	06d0      	lsls	r0, r2, #27
 8005614:	bf44      	itt	mi
 8005616:	2320      	movmi	r3, #32
 8005618:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800561c:	0711      	lsls	r1, r2, #28
 800561e:	bf44      	itt	mi
 8005620:	232b      	movmi	r3, #43	@ 0x2b
 8005622:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005626:	f89a 3000 	ldrb.w	r3, [sl]
 800562a:	2b2a      	cmp	r3, #42	@ 0x2a
 800562c:	d015      	beq.n	800565a <_svfiprintf_r+0xfa>
 800562e:	9a07      	ldr	r2, [sp, #28]
 8005630:	4654      	mov	r4, sl
 8005632:	2000      	movs	r0, #0
 8005634:	f04f 0c0a 	mov.w	ip, #10
 8005638:	4621      	mov	r1, r4
 800563a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800563e:	3b30      	subs	r3, #48	@ 0x30
 8005640:	2b09      	cmp	r3, #9
 8005642:	d94b      	bls.n	80056dc <_svfiprintf_r+0x17c>
 8005644:	b1b0      	cbz	r0, 8005674 <_svfiprintf_r+0x114>
 8005646:	9207      	str	r2, [sp, #28]
 8005648:	e014      	b.n	8005674 <_svfiprintf_r+0x114>
 800564a:	eba0 0308 	sub.w	r3, r0, r8
 800564e:	fa09 f303 	lsl.w	r3, r9, r3
 8005652:	4313      	orrs	r3, r2
 8005654:	9304      	str	r3, [sp, #16]
 8005656:	46a2      	mov	sl, r4
 8005658:	e7d2      	b.n	8005600 <_svfiprintf_r+0xa0>
 800565a:	9b03      	ldr	r3, [sp, #12]
 800565c:	1d19      	adds	r1, r3, #4
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	9103      	str	r1, [sp, #12]
 8005662:	2b00      	cmp	r3, #0
 8005664:	bfbb      	ittet	lt
 8005666:	425b      	neglt	r3, r3
 8005668:	f042 0202 	orrlt.w	r2, r2, #2
 800566c:	9307      	strge	r3, [sp, #28]
 800566e:	9307      	strlt	r3, [sp, #28]
 8005670:	bfb8      	it	lt
 8005672:	9204      	strlt	r2, [sp, #16]
 8005674:	7823      	ldrb	r3, [r4, #0]
 8005676:	2b2e      	cmp	r3, #46	@ 0x2e
 8005678:	d10a      	bne.n	8005690 <_svfiprintf_r+0x130>
 800567a:	7863      	ldrb	r3, [r4, #1]
 800567c:	2b2a      	cmp	r3, #42	@ 0x2a
 800567e:	d132      	bne.n	80056e6 <_svfiprintf_r+0x186>
 8005680:	9b03      	ldr	r3, [sp, #12]
 8005682:	1d1a      	adds	r2, r3, #4
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	9203      	str	r2, [sp, #12]
 8005688:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800568c:	3402      	adds	r4, #2
 800568e:	9305      	str	r3, [sp, #20]
 8005690:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005754 <_svfiprintf_r+0x1f4>
 8005694:	7821      	ldrb	r1, [r4, #0]
 8005696:	2203      	movs	r2, #3
 8005698:	4650      	mov	r0, sl
 800569a:	f7fa fd99 	bl	80001d0 <memchr>
 800569e:	b138      	cbz	r0, 80056b0 <_svfiprintf_r+0x150>
 80056a0:	9b04      	ldr	r3, [sp, #16]
 80056a2:	eba0 000a 	sub.w	r0, r0, sl
 80056a6:	2240      	movs	r2, #64	@ 0x40
 80056a8:	4082      	lsls	r2, r0
 80056aa:	4313      	orrs	r3, r2
 80056ac:	3401      	adds	r4, #1
 80056ae:	9304      	str	r3, [sp, #16]
 80056b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056b4:	4824      	ldr	r0, [pc, #144]	@ (8005748 <_svfiprintf_r+0x1e8>)
 80056b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056ba:	2206      	movs	r2, #6
 80056bc:	f7fa fd88 	bl	80001d0 <memchr>
 80056c0:	2800      	cmp	r0, #0
 80056c2:	d036      	beq.n	8005732 <_svfiprintf_r+0x1d2>
 80056c4:	4b21      	ldr	r3, [pc, #132]	@ (800574c <_svfiprintf_r+0x1ec>)
 80056c6:	bb1b      	cbnz	r3, 8005710 <_svfiprintf_r+0x1b0>
 80056c8:	9b03      	ldr	r3, [sp, #12]
 80056ca:	3307      	adds	r3, #7
 80056cc:	f023 0307 	bic.w	r3, r3, #7
 80056d0:	3308      	adds	r3, #8
 80056d2:	9303      	str	r3, [sp, #12]
 80056d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056d6:	4433      	add	r3, r6
 80056d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80056da:	e76a      	b.n	80055b2 <_svfiprintf_r+0x52>
 80056dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80056e0:	460c      	mov	r4, r1
 80056e2:	2001      	movs	r0, #1
 80056e4:	e7a8      	b.n	8005638 <_svfiprintf_r+0xd8>
 80056e6:	2300      	movs	r3, #0
 80056e8:	3401      	adds	r4, #1
 80056ea:	9305      	str	r3, [sp, #20]
 80056ec:	4619      	mov	r1, r3
 80056ee:	f04f 0c0a 	mov.w	ip, #10
 80056f2:	4620      	mov	r0, r4
 80056f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056f8:	3a30      	subs	r2, #48	@ 0x30
 80056fa:	2a09      	cmp	r2, #9
 80056fc:	d903      	bls.n	8005706 <_svfiprintf_r+0x1a6>
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0c6      	beq.n	8005690 <_svfiprintf_r+0x130>
 8005702:	9105      	str	r1, [sp, #20]
 8005704:	e7c4      	b.n	8005690 <_svfiprintf_r+0x130>
 8005706:	fb0c 2101 	mla	r1, ip, r1, r2
 800570a:	4604      	mov	r4, r0
 800570c:	2301      	movs	r3, #1
 800570e:	e7f0      	b.n	80056f2 <_svfiprintf_r+0x192>
 8005710:	ab03      	add	r3, sp, #12
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	462a      	mov	r2, r5
 8005716:	4b0e      	ldr	r3, [pc, #56]	@ (8005750 <_svfiprintf_r+0x1f0>)
 8005718:	a904      	add	r1, sp, #16
 800571a:	4638      	mov	r0, r7
 800571c:	f3af 8000 	nop.w
 8005720:	1c42      	adds	r2, r0, #1
 8005722:	4606      	mov	r6, r0
 8005724:	d1d6      	bne.n	80056d4 <_svfiprintf_r+0x174>
 8005726:	89ab      	ldrh	r3, [r5, #12]
 8005728:	065b      	lsls	r3, r3, #25
 800572a:	f53f af2d 	bmi.w	8005588 <_svfiprintf_r+0x28>
 800572e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005730:	e72c      	b.n	800558c <_svfiprintf_r+0x2c>
 8005732:	ab03      	add	r3, sp, #12
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	462a      	mov	r2, r5
 8005738:	4b05      	ldr	r3, [pc, #20]	@ (8005750 <_svfiprintf_r+0x1f0>)
 800573a:	a904      	add	r1, sp, #16
 800573c:	4638      	mov	r0, r7
 800573e:	f000 f879 	bl	8005834 <_printf_i>
 8005742:	e7ed      	b.n	8005720 <_svfiprintf_r+0x1c0>
 8005744:	08005ba0 	.word	0x08005ba0
 8005748:	08005baa 	.word	0x08005baa
 800574c:	00000000 	.word	0x00000000
 8005750:	080054a9 	.word	0x080054a9
 8005754:	08005ba6 	.word	0x08005ba6

08005758 <_printf_common>:
 8005758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800575c:	4616      	mov	r6, r2
 800575e:	4698      	mov	r8, r3
 8005760:	688a      	ldr	r2, [r1, #8]
 8005762:	690b      	ldr	r3, [r1, #16]
 8005764:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005768:	4293      	cmp	r3, r2
 800576a:	bfb8      	it	lt
 800576c:	4613      	movlt	r3, r2
 800576e:	6033      	str	r3, [r6, #0]
 8005770:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005774:	4607      	mov	r7, r0
 8005776:	460c      	mov	r4, r1
 8005778:	b10a      	cbz	r2, 800577e <_printf_common+0x26>
 800577a:	3301      	adds	r3, #1
 800577c:	6033      	str	r3, [r6, #0]
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	0699      	lsls	r1, r3, #26
 8005782:	bf42      	ittt	mi
 8005784:	6833      	ldrmi	r3, [r6, #0]
 8005786:	3302      	addmi	r3, #2
 8005788:	6033      	strmi	r3, [r6, #0]
 800578a:	6825      	ldr	r5, [r4, #0]
 800578c:	f015 0506 	ands.w	r5, r5, #6
 8005790:	d106      	bne.n	80057a0 <_printf_common+0x48>
 8005792:	f104 0a19 	add.w	sl, r4, #25
 8005796:	68e3      	ldr	r3, [r4, #12]
 8005798:	6832      	ldr	r2, [r6, #0]
 800579a:	1a9b      	subs	r3, r3, r2
 800579c:	42ab      	cmp	r3, r5
 800579e:	dc26      	bgt.n	80057ee <_printf_common+0x96>
 80057a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80057a4:	6822      	ldr	r2, [r4, #0]
 80057a6:	3b00      	subs	r3, #0
 80057a8:	bf18      	it	ne
 80057aa:	2301      	movne	r3, #1
 80057ac:	0692      	lsls	r2, r2, #26
 80057ae:	d42b      	bmi.n	8005808 <_printf_common+0xb0>
 80057b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057b4:	4641      	mov	r1, r8
 80057b6:	4638      	mov	r0, r7
 80057b8:	47c8      	blx	r9
 80057ba:	3001      	adds	r0, #1
 80057bc:	d01e      	beq.n	80057fc <_printf_common+0xa4>
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	6922      	ldr	r2, [r4, #16]
 80057c2:	f003 0306 	and.w	r3, r3, #6
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	bf02      	ittt	eq
 80057ca:	68e5      	ldreq	r5, [r4, #12]
 80057cc:	6833      	ldreq	r3, [r6, #0]
 80057ce:	1aed      	subeq	r5, r5, r3
 80057d0:	68a3      	ldr	r3, [r4, #8]
 80057d2:	bf0c      	ite	eq
 80057d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057d8:	2500      	movne	r5, #0
 80057da:	4293      	cmp	r3, r2
 80057dc:	bfc4      	itt	gt
 80057de:	1a9b      	subgt	r3, r3, r2
 80057e0:	18ed      	addgt	r5, r5, r3
 80057e2:	2600      	movs	r6, #0
 80057e4:	341a      	adds	r4, #26
 80057e6:	42b5      	cmp	r5, r6
 80057e8:	d11a      	bne.n	8005820 <_printf_common+0xc8>
 80057ea:	2000      	movs	r0, #0
 80057ec:	e008      	b.n	8005800 <_printf_common+0xa8>
 80057ee:	2301      	movs	r3, #1
 80057f0:	4652      	mov	r2, sl
 80057f2:	4641      	mov	r1, r8
 80057f4:	4638      	mov	r0, r7
 80057f6:	47c8      	blx	r9
 80057f8:	3001      	adds	r0, #1
 80057fa:	d103      	bne.n	8005804 <_printf_common+0xac>
 80057fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005804:	3501      	adds	r5, #1
 8005806:	e7c6      	b.n	8005796 <_printf_common+0x3e>
 8005808:	18e1      	adds	r1, r4, r3
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	2030      	movs	r0, #48	@ 0x30
 800580e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005812:	4422      	add	r2, r4
 8005814:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005818:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800581c:	3302      	adds	r3, #2
 800581e:	e7c7      	b.n	80057b0 <_printf_common+0x58>
 8005820:	2301      	movs	r3, #1
 8005822:	4622      	mov	r2, r4
 8005824:	4641      	mov	r1, r8
 8005826:	4638      	mov	r0, r7
 8005828:	47c8      	blx	r9
 800582a:	3001      	adds	r0, #1
 800582c:	d0e6      	beq.n	80057fc <_printf_common+0xa4>
 800582e:	3601      	adds	r6, #1
 8005830:	e7d9      	b.n	80057e6 <_printf_common+0x8e>
	...

08005834 <_printf_i>:
 8005834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005838:	7e0f      	ldrb	r7, [r1, #24]
 800583a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800583c:	2f78      	cmp	r7, #120	@ 0x78
 800583e:	4691      	mov	r9, r2
 8005840:	4680      	mov	r8, r0
 8005842:	460c      	mov	r4, r1
 8005844:	469a      	mov	sl, r3
 8005846:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800584a:	d807      	bhi.n	800585c <_printf_i+0x28>
 800584c:	2f62      	cmp	r7, #98	@ 0x62
 800584e:	d80a      	bhi.n	8005866 <_printf_i+0x32>
 8005850:	2f00      	cmp	r7, #0
 8005852:	f000 80d2 	beq.w	80059fa <_printf_i+0x1c6>
 8005856:	2f58      	cmp	r7, #88	@ 0x58
 8005858:	f000 80b9 	beq.w	80059ce <_printf_i+0x19a>
 800585c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005860:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005864:	e03a      	b.n	80058dc <_printf_i+0xa8>
 8005866:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800586a:	2b15      	cmp	r3, #21
 800586c:	d8f6      	bhi.n	800585c <_printf_i+0x28>
 800586e:	a101      	add	r1, pc, #4	@ (adr r1, 8005874 <_printf_i+0x40>)
 8005870:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005874:	080058cd 	.word	0x080058cd
 8005878:	080058e1 	.word	0x080058e1
 800587c:	0800585d 	.word	0x0800585d
 8005880:	0800585d 	.word	0x0800585d
 8005884:	0800585d 	.word	0x0800585d
 8005888:	0800585d 	.word	0x0800585d
 800588c:	080058e1 	.word	0x080058e1
 8005890:	0800585d 	.word	0x0800585d
 8005894:	0800585d 	.word	0x0800585d
 8005898:	0800585d 	.word	0x0800585d
 800589c:	0800585d 	.word	0x0800585d
 80058a0:	080059e1 	.word	0x080059e1
 80058a4:	0800590b 	.word	0x0800590b
 80058a8:	0800599b 	.word	0x0800599b
 80058ac:	0800585d 	.word	0x0800585d
 80058b0:	0800585d 	.word	0x0800585d
 80058b4:	08005a03 	.word	0x08005a03
 80058b8:	0800585d 	.word	0x0800585d
 80058bc:	0800590b 	.word	0x0800590b
 80058c0:	0800585d 	.word	0x0800585d
 80058c4:	0800585d 	.word	0x0800585d
 80058c8:	080059a3 	.word	0x080059a3
 80058cc:	6833      	ldr	r3, [r6, #0]
 80058ce:	1d1a      	adds	r2, r3, #4
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6032      	str	r2, [r6, #0]
 80058d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058dc:	2301      	movs	r3, #1
 80058de:	e09d      	b.n	8005a1c <_printf_i+0x1e8>
 80058e0:	6833      	ldr	r3, [r6, #0]
 80058e2:	6820      	ldr	r0, [r4, #0]
 80058e4:	1d19      	adds	r1, r3, #4
 80058e6:	6031      	str	r1, [r6, #0]
 80058e8:	0606      	lsls	r6, r0, #24
 80058ea:	d501      	bpl.n	80058f0 <_printf_i+0xbc>
 80058ec:	681d      	ldr	r5, [r3, #0]
 80058ee:	e003      	b.n	80058f8 <_printf_i+0xc4>
 80058f0:	0645      	lsls	r5, r0, #25
 80058f2:	d5fb      	bpl.n	80058ec <_printf_i+0xb8>
 80058f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80058f8:	2d00      	cmp	r5, #0
 80058fa:	da03      	bge.n	8005904 <_printf_i+0xd0>
 80058fc:	232d      	movs	r3, #45	@ 0x2d
 80058fe:	426d      	negs	r5, r5
 8005900:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005904:	4859      	ldr	r0, [pc, #356]	@ (8005a6c <_printf_i+0x238>)
 8005906:	230a      	movs	r3, #10
 8005908:	e011      	b.n	800592e <_printf_i+0xfa>
 800590a:	6821      	ldr	r1, [r4, #0]
 800590c:	6833      	ldr	r3, [r6, #0]
 800590e:	0608      	lsls	r0, r1, #24
 8005910:	f853 5b04 	ldr.w	r5, [r3], #4
 8005914:	d402      	bmi.n	800591c <_printf_i+0xe8>
 8005916:	0649      	lsls	r1, r1, #25
 8005918:	bf48      	it	mi
 800591a:	b2ad      	uxthmi	r5, r5
 800591c:	2f6f      	cmp	r7, #111	@ 0x6f
 800591e:	4853      	ldr	r0, [pc, #332]	@ (8005a6c <_printf_i+0x238>)
 8005920:	6033      	str	r3, [r6, #0]
 8005922:	bf14      	ite	ne
 8005924:	230a      	movne	r3, #10
 8005926:	2308      	moveq	r3, #8
 8005928:	2100      	movs	r1, #0
 800592a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800592e:	6866      	ldr	r6, [r4, #4]
 8005930:	60a6      	str	r6, [r4, #8]
 8005932:	2e00      	cmp	r6, #0
 8005934:	bfa2      	ittt	ge
 8005936:	6821      	ldrge	r1, [r4, #0]
 8005938:	f021 0104 	bicge.w	r1, r1, #4
 800593c:	6021      	strge	r1, [r4, #0]
 800593e:	b90d      	cbnz	r5, 8005944 <_printf_i+0x110>
 8005940:	2e00      	cmp	r6, #0
 8005942:	d04b      	beq.n	80059dc <_printf_i+0x1a8>
 8005944:	4616      	mov	r6, r2
 8005946:	fbb5 f1f3 	udiv	r1, r5, r3
 800594a:	fb03 5711 	mls	r7, r3, r1, r5
 800594e:	5dc7      	ldrb	r7, [r0, r7]
 8005950:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005954:	462f      	mov	r7, r5
 8005956:	42bb      	cmp	r3, r7
 8005958:	460d      	mov	r5, r1
 800595a:	d9f4      	bls.n	8005946 <_printf_i+0x112>
 800595c:	2b08      	cmp	r3, #8
 800595e:	d10b      	bne.n	8005978 <_printf_i+0x144>
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	07df      	lsls	r7, r3, #31
 8005964:	d508      	bpl.n	8005978 <_printf_i+0x144>
 8005966:	6923      	ldr	r3, [r4, #16]
 8005968:	6861      	ldr	r1, [r4, #4]
 800596a:	4299      	cmp	r1, r3
 800596c:	bfde      	ittt	le
 800596e:	2330      	movle	r3, #48	@ 0x30
 8005970:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005974:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005978:	1b92      	subs	r2, r2, r6
 800597a:	6122      	str	r2, [r4, #16]
 800597c:	f8cd a000 	str.w	sl, [sp]
 8005980:	464b      	mov	r3, r9
 8005982:	aa03      	add	r2, sp, #12
 8005984:	4621      	mov	r1, r4
 8005986:	4640      	mov	r0, r8
 8005988:	f7ff fee6 	bl	8005758 <_printf_common>
 800598c:	3001      	adds	r0, #1
 800598e:	d14a      	bne.n	8005a26 <_printf_i+0x1f2>
 8005990:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005994:	b004      	add	sp, #16
 8005996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	f043 0320 	orr.w	r3, r3, #32
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	4833      	ldr	r0, [pc, #204]	@ (8005a70 <_printf_i+0x23c>)
 80059a4:	2778      	movs	r7, #120	@ 0x78
 80059a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	6831      	ldr	r1, [r6, #0]
 80059ae:	061f      	lsls	r7, r3, #24
 80059b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80059b4:	d402      	bmi.n	80059bc <_printf_i+0x188>
 80059b6:	065f      	lsls	r7, r3, #25
 80059b8:	bf48      	it	mi
 80059ba:	b2ad      	uxthmi	r5, r5
 80059bc:	6031      	str	r1, [r6, #0]
 80059be:	07d9      	lsls	r1, r3, #31
 80059c0:	bf44      	itt	mi
 80059c2:	f043 0320 	orrmi.w	r3, r3, #32
 80059c6:	6023      	strmi	r3, [r4, #0]
 80059c8:	b11d      	cbz	r5, 80059d2 <_printf_i+0x19e>
 80059ca:	2310      	movs	r3, #16
 80059cc:	e7ac      	b.n	8005928 <_printf_i+0xf4>
 80059ce:	4827      	ldr	r0, [pc, #156]	@ (8005a6c <_printf_i+0x238>)
 80059d0:	e7e9      	b.n	80059a6 <_printf_i+0x172>
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	f023 0320 	bic.w	r3, r3, #32
 80059d8:	6023      	str	r3, [r4, #0]
 80059da:	e7f6      	b.n	80059ca <_printf_i+0x196>
 80059dc:	4616      	mov	r6, r2
 80059de:	e7bd      	b.n	800595c <_printf_i+0x128>
 80059e0:	6833      	ldr	r3, [r6, #0]
 80059e2:	6825      	ldr	r5, [r4, #0]
 80059e4:	6961      	ldr	r1, [r4, #20]
 80059e6:	1d18      	adds	r0, r3, #4
 80059e8:	6030      	str	r0, [r6, #0]
 80059ea:	062e      	lsls	r6, r5, #24
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	d501      	bpl.n	80059f4 <_printf_i+0x1c0>
 80059f0:	6019      	str	r1, [r3, #0]
 80059f2:	e002      	b.n	80059fa <_printf_i+0x1c6>
 80059f4:	0668      	lsls	r0, r5, #25
 80059f6:	d5fb      	bpl.n	80059f0 <_printf_i+0x1bc>
 80059f8:	8019      	strh	r1, [r3, #0]
 80059fa:	2300      	movs	r3, #0
 80059fc:	6123      	str	r3, [r4, #16]
 80059fe:	4616      	mov	r6, r2
 8005a00:	e7bc      	b.n	800597c <_printf_i+0x148>
 8005a02:	6833      	ldr	r3, [r6, #0]
 8005a04:	1d1a      	adds	r2, r3, #4
 8005a06:	6032      	str	r2, [r6, #0]
 8005a08:	681e      	ldr	r6, [r3, #0]
 8005a0a:	6862      	ldr	r2, [r4, #4]
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	4630      	mov	r0, r6
 8005a10:	f7fa fbde 	bl	80001d0 <memchr>
 8005a14:	b108      	cbz	r0, 8005a1a <_printf_i+0x1e6>
 8005a16:	1b80      	subs	r0, r0, r6
 8005a18:	6060      	str	r0, [r4, #4]
 8005a1a:	6863      	ldr	r3, [r4, #4]
 8005a1c:	6123      	str	r3, [r4, #16]
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a24:	e7aa      	b.n	800597c <_printf_i+0x148>
 8005a26:	6923      	ldr	r3, [r4, #16]
 8005a28:	4632      	mov	r2, r6
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	4640      	mov	r0, r8
 8005a2e:	47d0      	blx	sl
 8005a30:	3001      	adds	r0, #1
 8005a32:	d0ad      	beq.n	8005990 <_printf_i+0x15c>
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	079b      	lsls	r3, r3, #30
 8005a38:	d413      	bmi.n	8005a62 <_printf_i+0x22e>
 8005a3a:	68e0      	ldr	r0, [r4, #12]
 8005a3c:	9b03      	ldr	r3, [sp, #12]
 8005a3e:	4298      	cmp	r0, r3
 8005a40:	bfb8      	it	lt
 8005a42:	4618      	movlt	r0, r3
 8005a44:	e7a6      	b.n	8005994 <_printf_i+0x160>
 8005a46:	2301      	movs	r3, #1
 8005a48:	4632      	mov	r2, r6
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	4640      	mov	r0, r8
 8005a4e:	47d0      	blx	sl
 8005a50:	3001      	adds	r0, #1
 8005a52:	d09d      	beq.n	8005990 <_printf_i+0x15c>
 8005a54:	3501      	adds	r5, #1
 8005a56:	68e3      	ldr	r3, [r4, #12]
 8005a58:	9903      	ldr	r1, [sp, #12]
 8005a5a:	1a5b      	subs	r3, r3, r1
 8005a5c:	42ab      	cmp	r3, r5
 8005a5e:	dcf2      	bgt.n	8005a46 <_printf_i+0x212>
 8005a60:	e7eb      	b.n	8005a3a <_printf_i+0x206>
 8005a62:	2500      	movs	r5, #0
 8005a64:	f104 0619 	add.w	r6, r4, #25
 8005a68:	e7f5      	b.n	8005a56 <_printf_i+0x222>
 8005a6a:	bf00      	nop
 8005a6c:	08005bb1 	.word	0x08005bb1
 8005a70:	08005bc2 	.word	0x08005bc2

08005a74 <memmove>:
 8005a74:	4288      	cmp	r0, r1
 8005a76:	b510      	push	{r4, lr}
 8005a78:	eb01 0402 	add.w	r4, r1, r2
 8005a7c:	d902      	bls.n	8005a84 <memmove+0x10>
 8005a7e:	4284      	cmp	r4, r0
 8005a80:	4623      	mov	r3, r4
 8005a82:	d807      	bhi.n	8005a94 <memmove+0x20>
 8005a84:	1e43      	subs	r3, r0, #1
 8005a86:	42a1      	cmp	r1, r4
 8005a88:	d008      	beq.n	8005a9c <memmove+0x28>
 8005a8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a92:	e7f8      	b.n	8005a86 <memmove+0x12>
 8005a94:	4402      	add	r2, r0
 8005a96:	4601      	mov	r1, r0
 8005a98:	428a      	cmp	r2, r1
 8005a9a:	d100      	bne.n	8005a9e <memmove+0x2a>
 8005a9c:	bd10      	pop	{r4, pc}
 8005a9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005aa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005aa6:	e7f7      	b.n	8005a98 <memmove+0x24>

08005aa8 <_sbrk_r>:
 8005aa8:	b538      	push	{r3, r4, r5, lr}
 8005aaa:	4d06      	ldr	r5, [pc, #24]	@ (8005ac4 <_sbrk_r+0x1c>)
 8005aac:	2300      	movs	r3, #0
 8005aae:	4604      	mov	r4, r0
 8005ab0:	4608      	mov	r0, r1
 8005ab2:	602b      	str	r3, [r5, #0]
 8005ab4:	f7fb fe74 	bl	80017a0 <_sbrk>
 8005ab8:	1c43      	adds	r3, r0, #1
 8005aba:	d102      	bne.n	8005ac2 <_sbrk_r+0x1a>
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	b103      	cbz	r3, 8005ac2 <_sbrk_r+0x1a>
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	200003a4 	.word	0x200003a4

08005ac8 <memcpy>:
 8005ac8:	440a      	add	r2, r1
 8005aca:	4291      	cmp	r1, r2
 8005acc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005ad0:	d100      	bne.n	8005ad4 <memcpy+0xc>
 8005ad2:	4770      	bx	lr
 8005ad4:	b510      	push	{r4, lr}
 8005ad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ada:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ade:	4291      	cmp	r1, r2
 8005ae0:	d1f9      	bne.n	8005ad6 <memcpy+0xe>
 8005ae2:	bd10      	pop	{r4, pc}

08005ae4 <_realloc_r>:
 8005ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae8:	4680      	mov	r8, r0
 8005aea:	4615      	mov	r5, r2
 8005aec:	460c      	mov	r4, r1
 8005aee:	b921      	cbnz	r1, 8005afa <_realloc_r+0x16>
 8005af0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005af4:	4611      	mov	r1, r2
 8005af6:	f7ff bc4b 	b.w	8005390 <_malloc_r>
 8005afa:	b92a      	cbnz	r2, 8005b08 <_realloc_r+0x24>
 8005afc:	f7ff fbdc 	bl	80052b8 <_free_r>
 8005b00:	2400      	movs	r4, #0
 8005b02:	4620      	mov	r0, r4
 8005b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b08:	f000 f81a 	bl	8005b40 <_malloc_usable_size_r>
 8005b0c:	4285      	cmp	r5, r0
 8005b0e:	4606      	mov	r6, r0
 8005b10:	d802      	bhi.n	8005b18 <_realloc_r+0x34>
 8005b12:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005b16:	d8f4      	bhi.n	8005b02 <_realloc_r+0x1e>
 8005b18:	4629      	mov	r1, r5
 8005b1a:	4640      	mov	r0, r8
 8005b1c:	f7ff fc38 	bl	8005390 <_malloc_r>
 8005b20:	4607      	mov	r7, r0
 8005b22:	2800      	cmp	r0, #0
 8005b24:	d0ec      	beq.n	8005b00 <_realloc_r+0x1c>
 8005b26:	42b5      	cmp	r5, r6
 8005b28:	462a      	mov	r2, r5
 8005b2a:	4621      	mov	r1, r4
 8005b2c:	bf28      	it	cs
 8005b2e:	4632      	movcs	r2, r6
 8005b30:	f7ff ffca 	bl	8005ac8 <memcpy>
 8005b34:	4621      	mov	r1, r4
 8005b36:	4640      	mov	r0, r8
 8005b38:	f7ff fbbe 	bl	80052b8 <_free_r>
 8005b3c:	463c      	mov	r4, r7
 8005b3e:	e7e0      	b.n	8005b02 <_realloc_r+0x1e>

08005b40 <_malloc_usable_size_r>:
 8005b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b44:	1f18      	subs	r0, r3, #4
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	bfbc      	itt	lt
 8005b4a:	580b      	ldrlt	r3, [r1, r0]
 8005b4c:	18c0      	addlt	r0, r0, r3
 8005b4e:	4770      	bx	lr

08005b50 <_init>:
 8005b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b52:	bf00      	nop
 8005b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b56:	bc08      	pop	{r3}
 8005b58:	469e      	mov	lr, r3
 8005b5a:	4770      	bx	lr

08005b5c <_fini>:
 8005b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5e:	bf00      	nop
 8005b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b62:	bc08      	pop	{r3}
 8005b64:	469e      	mov	lr, r3
 8005b66:	4770      	bx	lr
