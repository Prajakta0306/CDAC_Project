
can_rx1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004678  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004808  08004808  00005808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800489c  0800489c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  0800489c  0800489c  0000589c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048a4  080048a4  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048a4  080048a4  000058a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048a8  080048a8  000058a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080048ac  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000298  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002f4  200002f4  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000becb  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a6b  00000000  00000000  00011f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a70  00000000  00000000  000139c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000082c  00000000  00000000  00014438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020cef  00000000  00000000  00014c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c956  00000000  00000000  00035953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7abf  00000000  00000000  000422a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00109d68  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003224  00000000  00000000  00109dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  0010cfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080047f0 	.word	0x080047f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080047f0 	.word	0x080047f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <HAL_CAN_RxFifo1MsgPendingCallback>:
uint32_t TxMailbox;




void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8000d54:	4b2d      	ldr	r3, [pc, #180]	@ (8000e0c <HAL_CAN_RxFifo1MsgPendingCallback+0xc0>)
 8000d56:	4a2e      	ldr	r2, [pc, #184]	@ (8000e10 <HAL_CAN_RxFifo1MsgPendingCallback+0xc4>)
 8000d58:	2101      	movs	r1, #1
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f001 f880 	bl	8001e60 <HAL_CAN_GetRxMessage>
	if(RxHeader.DLC == 2)
 8000d60:	4b2b      	ldr	r3, [pc, #172]	@ (8000e10 <HAL_CAN_RxFifo1MsgPendingCallback+0xc4>)
 8000d62:	691b      	ldr	r3, [r3, #16]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d102      	bne.n	8000d6e <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
		datacheck = 1;
 8000d68:	4b2a      	ldr	r3, [pc, #168]	@ (8000e14 <HAL_CAN_RxFifo1MsgPendingCallback+0xc8>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	601a      	str	r2, [r3, #0]
//mq
	if(RxHeader.StdId==0x446){
 8000d6e:	4b28      	ldr	r3, [pc, #160]	@ (8000e10 <HAL_CAN_RxFifo1MsgPendingCallback+0xc4>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f240 4246 	movw	r2, #1094	@ 0x446
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d112      	bne.n	8000da0 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
				sensor=1;
 8000d7a:	4b27      	ldr	r3, [pc, #156]	@ (8000e18 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d86:	4825      	ldr	r0, [pc, #148]	@ (8000e1c <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 8000d88:	f001 fe90 	bl	8002aac <HAL_GPIO_WritePin>
				HAL_Delay(500);
 8000d8c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d90:	f000 fd52 	bl	8001838 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d9a:	4820      	ldr	r0, [pc, #128]	@ (8000e1c <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 8000d9c:	f001 fe86 	bl	8002aac <HAL_GPIO_WritePin>
			}


	//lm
		if(RxHeader.StdId==0x445){
 8000da0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e10 <HAL_CAN_RxFifo1MsgPendingCallback+0xc4>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f240 4245 	movw	r2, #1093	@ 0x445
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d112      	bne.n	8000dd2 <HAL_CAN_RxFifo1MsgPendingCallback+0x86>
					sensor=2;
 8000dac:	4b1a      	ldr	r3, [pc, #104]	@ (8000e18 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 8000dae:	2202      	movs	r2, #2
 8000db0:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000db8:	4818      	ldr	r0, [pc, #96]	@ (8000e1c <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 8000dba:	f001 fe77 	bl	8002aac <HAL_GPIO_WritePin>
					HAL_Delay(500);
 8000dbe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000dc2:	f000 fd39 	bl	8001838 <HAL_Delay>
				    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dcc:	4813      	ldr	r0, [pc, #76]	@ (8000e1c <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 8000dce:	f001 fe6d 	bl	8002aac <HAL_GPIO_WritePin>
				}
		//ultra
			if(RxHeader.StdId==0x44A){
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <HAL_CAN_RxFifo1MsgPendingCallback+0xc4>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f240 424a 	movw	r2, #1098	@ 0x44a
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d112      	bne.n	8000e04 <HAL_CAN_RxFifo1MsgPendingCallback+0xb8>
						sensor=3;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 8000de0:	2203      	movs	r2, #3
 8000de2:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dea:	480c      	ldr	r0, [pc, #48]	@ (8000e1c <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 8000dec:	f001 fe5e 	bl	8002aac <HAL_GPIO_WritePin>
						HAL_Delay(500);
 8000df0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000df4:	f000 fd20 	bl	8001838 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dfe:	4807      	ldr	r0, [pc, #28]	@ (8000e1c <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>)
 8000e00:	f001 fe54 	bl	8002aac <HAL_GPIO_WritePin>

}
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000198 	.word	0x20000198
 8000e10:	20000174 	.word	0x20000174
 8000e14:	20000150 	.word	0x20000150
 8000e18:	20000154 	.word	0x20000154
 8000e1c:	40020c00 	.word	0x40020c00

08000e20 <Calculate_Speed>:

void Calculate_Speed(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
    // Calculate the change in distance
	distance=(RxData[0]<<8)|RxData[1];
 8000e26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea4 <Calculate_Speed+0x84>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	b21a      	sxth	r2, r3
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea4 <Calculate_Speed+0x84>)
 8000e30:	785b      	ldrb	r3, [r3, #1]
 8000e32:	b21b      	sxth	r3, r3
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b21b      	sxth	r3, r3
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea8 <Calculate_Speed+0x88>)
 8000e3c:	801a      	strh	r2, [r3, #0]
    int16_t distanceChange = distance - previousDistance;
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea8 <Calculate_Speed+0x88>)
 8000e40:	881a      	ldrh	r2, [r3, #0]
 8000e42:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <Calculate_Speed+0x8c>)
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	80fb      	strh	r3, [r7, #6]

    // Get the current time in milliseconds
    currentTime = HAL_GetTick();
 8000e4c:	f000 fce8 	bl	8001820 <HAL_GetTick>
 8000e50:	4603      	mov	r3, r0
 8000e52:	4a17      	ldr	r2, [pc, #92]	@ (8000eb0 <Calculate_Speed+0x90>)
 8000e54:	6013      	str	r3, [r2, #0]

    // Calculate the time interval (in seconds)
    uint8_t timeInterval = (currentTime - previousTime) / 1000; // Convert ms to seconds
 8000e56:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <Calculate_Speed+0x90>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <Calculate_Speed+0x94>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	4a15      	ldr	r2, [pc, #84]	@ (8000eb8 <Calculate_Speed+0x98>)
 8000e62:	fba2 2303 	umull	r2, r3, r2, r3
 8000e66:	099b      	lsrs	r3, r3, #6
 8000e68:	717b      	strb	r3, [r7, #5]

    // Calculate speed if the time interval is greater than zero
    if (timeInterval > 0)
 8000e6a:	797b      	ldrb	r3, [r7, #5]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d00c      	beq.n	8000e8a <Calculate_Speed+0x6a>
    {
        speed = abs(distanceChange) / timeInterval;  // Speed in cm/s
 8000e70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	bfb8      	it	lt
 8000e78:	425b      	neglt	r3, r3
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	797b      	ldrb	r3, [r7, #5]
 8000e80:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b0d      	ldr	r3, [pc, #52]	@ (8000ebc <Calculate_Speed+0x9c>)
 8000e88:	601a      	str	r2, [r3, #0]
    }

    // Store the current distance and time for the next measurement
    previousDistance = distance;
 8000e8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ea8 <Calculate_Speed+0x88>)
 8000e8c:	881a      	ldrh	r2, [r3, #0]
 8000e8e:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <Calculate_Speed+0x8c>)
 8000e90:	801a      	strh	r2, [r3, #0]
    previousTime = currentTime;
 8000e92:	4b07      	ldr	r3, [pc, #28]	@ (8000eb0 <Calculate_Speed+0x90>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a07      	ldr	r2, [pc, #28]	@ (8000eb4 <Calculate_Speed+0x94>)
 8000e98:	6013      	str	r3, [r2, #0]

}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000198 	.word	0x20000198
 8000ea8:	20000158 	.word	0x20000158
 8000eac:	2000013c 	.word	0x2000013c
 8000eb0:	20000148 	.word	0x20000148
 8000eb4:	20000144 	.word	0x20000144
 8000eb8:	10624dd3 	.word	0x10624dd3
 8000ebc:	20000140 	.word	0x20000140

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b0b2      	sub	sp, #200	@ 0xc8
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec6:	f000 fc45 	bl	8001754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eca:	f000 f913 	bl	80010f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ece:	f000 fa27 	bl	8001320 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000ed2:	f000 f979 	bl	80011c8 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000ed6:	f000 f9cb 	bl	8001270 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000eda:	f000 f9f7 	bl	80012cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_CAN_Start(&hcan1);
 8000ede:	4876      	ldr	r0, [pc, #472]	@ (80010b8 <main+0x1f8>)
 8000ee0:	f000 feaa 	bl	8001c38 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000ee4:	2110      	movs	r1, #16
 8000ee6:	4874      	ldr	r0, [pc, #464]	@ (80010b8 <main+0x1f8>)
 8000ee8:	f001 f8dc 	bl	80020a4 <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 2;
 8000eec:	4b73      	ldr	r3, [pc, #460]	@ (80010bc <main+0x1fc>)
 8000eee:	2202      	movs	r2, #2
 8000ef0:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000ef2:	4b72      	ldr	r3, [pc, #456]	@ (80010bc <main+0x1fc>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000ef8:	4b70      	ldr	r3, [pc, #448]	@ (80010bc <main+0x1fc>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x103;
 8000efe:	4b6f      	ldr	r3, [pc, #444]	@ (80010bc <main+0x1fc>)
 8000f00:	f240 1203 	movw	r2, #259	@ 0x103
 8000f04:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x00;
 8000f06:	4b6d      	ldr	r3, [pc, #436]	@ (80010bc <main+0x1fc>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	605a      	str	r2, [r3, #4]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000f0c:	4b6b      	ldr	r3, [pc, #428]	@ (80010bc <main+0x1fc>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	751a      	strb	r2, [r3, #20]

  TxData[0] = 50; //ms delay
 8000f12:	4b6b      	ldr	r3, [pc, #428]	@ (80010c0 <main+0x200>)
 8000f14:	2232      	movs	r2, #50	@ 0x32
 8000f16:	701a      	strb	r2, [r3, #0]
  TxData[1] = 20; //loop rep
 8000f18:	4b69      	ldr	r3, [pc, #420]	@ (80010c0 <main+0x200>)
 8000f1a:	2214      	movs	r2, #20
 8000f1c:	705a      	strb	r2, [r3, #1]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	   if(datacheck){
 8000f1e:	4b69      	ldr	r3, [pc, #420]	@ (80010c4 <main+0x204>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d0fb      	beq.n	8000f1e <main+0x5e>

	   if(sensor==1){
 8000f26:	4b68      	ldr	r3, [pc, #416]	@ (80010c8 <main+0x208>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d136      	bne.n	8000f9c <main+0xdc>
		   uint16_t mq=(RxData[0]<<8)|RxData[1];
 8000f2e:	4b67      	ldr	r3, [pc, #412]	@ (80010cc <main+0x20c>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	b21a      	sxth	r2, r3
 8000f36:	4b65      	ldr	r3, [pc, #404]	@ (80010cc <main+0x20c>)
 8000f38:	785b      	ldrb	r3, [r3, #1]
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	b21b      	sxth	r3, r3
 8000f40:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6

	  			 if (mq >=900 )
 8000f44:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	@ 0xc6
 8000f48:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000f4c:	d326      	bcc.n	8000f9c <main+0xdc>
	  			 	  {
	  			 		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,GPIO_PIN_SET);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f54:	485e      	ldr	r0, [pc, #376]	@ (80010d0 <main+0x210>)
 8000f56:	f001 fda9 	bl	8002aac <HAL_GPIO_WritePin>
	  			 		  HAL_Delay(8000);
 8000f5a:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8000f5e:	f000 fc6b 	bl	8001838 <HAL_Delay>
	  			 		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f68:	4859      	ldr	r0, [pc, #356]	@ (80010d0 <main+0x210>)
 8000f6a:	f001 fd9f 	bl	8002aac <HAL_GPIO_WritePin>
	  			 		sprintf(str2, "ALCOHOL DETECTED!!! ");
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4958      	ldr	r1, [pc, #352]	@ (80010d4 <main+0x214>)
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 ff9c 	bl	8003eb0 <siprintf>
	  			 			  			 	 			 HAL_UART_Transmit(&huart2,(uint8_t*)str, strlen(str),HAL_MAX_DELAY );
 8000f78:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff f927 	bl	80001d0 <strlen>
 8000f82:	4603      	mov	r3, r0
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f8e:	4852      	ldr	r0, [pc, #328]	@ (80010d8 <main+0x218>)
 8000f90:	f002 fbd2 	bl	8003738 <HAL_UART_Transmit>
	  			 			  			 	 			 HAL_Delay(1000);
 8000f94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f98:	f000 fc4e 	bl	8001838 <HAL_Delay>
	  		//MQ3_CHECK_END==================================================



	  		//TEMPERATURE_COUNTING===========================================
	   if(sensor==2){
 8000f9c:	4b4a      	ldr	r3, [pc, #296]	@ (80010c8 <main+0x208>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d152      	bne.n	800104a <main+0x18a>
	  			uint16_t lm=(RxData[0]<<8)|RxData[1];
 8000fa4:	4b49      	ldr	r3, [pc, #292]	@ (80010cc <main+0x20c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	b21a      	sxth	r2, r3
 8000fac:	4b47      	ldr	r3, [pc, #284]	@ (80010cc <main+0x20c>)
 8000fae:	785b      	ldrb	r3, [r3, #1]
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	b21b      	sxth	r3, r3
 8000fb6:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4

	  			uint16_t Voltage = ((lm*3.3)/4095) ;
 8000fba:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	@ 0xc4
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fab0 	bl	8000524 <__aeabi_i2d>
 8000fc4:	a338      	add	r3, pc, #224	@ (adr r3, 80010a8 <main+0x1e8>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	f7ff fb15 	bl	80005f8 <__aeabi_dmul>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	a336      	add	r3, pc, #216	@ (adr r3, 80010b0 <main+0x1f0>)
 8000fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fdc:	f7ff fc36 	bl	800084c <__aeabi_ddiv>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f7ff fd18 	bl	8000a1c <__aeabi_d2uiz>
 8000fec:	4603      	mov	r3, r0
 8000fee:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
	  			 	 	  	  temperature = Voltage*100 ;
 8000ff2:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	0092      	lsls	r2, r2, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	0091      	lsls	r1, r2, #2
 8001000:	461a      	mov	r2, r3
 8001002:	460b      	mov	r3, r1
 8001004:	4413      	add	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	b29a      	uxth	r2, r3
 800100a:	4b34      	ldr	r3, [pc, #208]	@ (80010dc <main+0x21c>)
 800100c:	801a      	strh	r2, [r3, #0]
	  			 	 	      sprintf(str, "temperature=%d\r\n ",temperature);
 800100e:	4b33      	ldr	r3, [pc, #204]	@ (80010dc <main+0x21c>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001018:	4931      	ldr	r1, [pc, #196]	@ (80010e0 <main+0x220>)
 800101a:	4618      	mov	r0, r3
 800101c:	f002 ff48 	bl	8003eb0 <siprintf>
	  			 	 	 		 HAL_UART_Transmit(&huart2,(uint8_t*)str, strlen(str),HAL_MAX_DELAY );
 8001020:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff f8d3 	bl	80001d0 <strlen>
 800102a:	4603      	mov	r3, r0
 800102c:	b29a      	uxth	r2, r3
 800102e:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8001032:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001036:	4828      	ldr	r0, [pc, #160]	@ (80010d8 <main+0x218>)
 8001038:	f002 fb7e 	bl	8003738 <HAL_UART_Transmit>
	  			 	 	 		 HAL_Delay(1000);
 800103c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001040:	f000 fbfa 	bl	8001838 <HAL_Delay>

	  			 	 	 		 datacheck = 0;
 8001044:	4b1f      	ldr	r3, [pc, #124]	@ (80010c4 <main+0x204>)
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
	  		//Temp_end=======================================================



	  		//ULTRASONIC_SPEED==============================================
		 if(sensor==3){
 800104a:	4b1f      	ldr	r3, [pc, #124]	@ (80010c8 <main+0x208>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b03      	cmp	r3, #3
 8001050:	d120      	bne.n	8001094 <main+0x1d4>
	  			 	 	 	Calculate_Speed();
 8001052:	f7ff fee5 	bl	8000e20 <Calculate_Speed>
	  			 	 	sprintf(str1, "Distance=%d\r\nSpeed=%ld\r\n ", distance,speed );
 8001056:	4b23      	ldr	r3, [pc, #140]	@ (80010e4 <main+0x224>)
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	4b22      	ldr	r3, [pc, #136]	@ (80010e8 <main+0x228>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001064:	4921      	ldr	r1, [pc, #132]	@ (80010ec <main+0x22c>)
 8001066:	f002 ff23 	bl	8003eb0 <siprintf>
	  			 	 			 HAL_UART_Transmit(&huart2,(uint8_t*)str, strlen(str),HAL_MAX_DELAY );
 800106a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff f8ae 	bl	80001d0 <strlen>
 8001074:	4603      	mov	r3, r0
 8001076:	b29a      	uxth	r2, r3
 8001078:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 800107c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001080:	4815      	ldr	r0, [pc, #84]	@ (80010d8 <main+0x218>)
 8001082:	f002 fb59 	bl	8003738 <HAL_UART_Transmit>
	  			 	 			 HAL_Delay(1000);
 8001086:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800108a:	f000 fbd5 	bl	8001838 <HAL_Delay>
	  			 	 		 datacheck=0;
 800108e:	4b0d      	ldr	r3, [pc, #52]	@ (80010c4 <main+0x204>)
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
	  	    //SPEED_END=====================================================
	  		  //}

	  		 //sprintf(str1, "Alcohol=%d\r\n Temperature=%d\r\n Speed=%d", RxData[0], RxData[1],RxData[2]);

	  		 HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001094:	4b16      	ldr	r3, [pc, #88]	@ (80010f0 <main+0x230>)
 8001096:	4a0a      	ldr	r2, [pc, #40]	@ (80010c0 <main+0x200>)
 8001098:	4908      	ldr	r1, [pc, #32]	@ (80010bc <main+0x1fc>)
 800109a:	4807      	ldr	r0, [pc, #28]	@ (80010b8 <main+0x1f8>)
 800109c:	f000 fe10 	bl	8001cc0 <HAL_CAN_AddTxMessage>
	   if(datacheck){
 80010a0:	e73d      	b.n	8000f1e <main+0x5e>
 80010a2:	bf00      	nop
 80010a4:	f3af 8000 	nop.w
 80010a8:	66666666 	.word	0x66666666
 80010ac:	400a6666 	.word	0x400a6666
 80010b0:	00000000 	.word	0x00000000
 80010b4:	40affe00 	.word	0x40affe00
 80010b8:	20000078 	.word	0x20000078
 80010bc:	2000015c 	.word	0x2000015c
 80010c0:	20000190 	.word	0x20000190
 80010c4:	20000150 	.word	0x20000150
 80010c8:	20000154 	.word	0x20000154
 80010cc:	20000198 	.word	0x20000198
 80010d0:	40020c00 	.word	0x40020c00
 80010d4:	08004808 	.word	0x08004808
 80010d8:	200000f4 	.word	0x200000f4
 80010dc:	2000014c 	.word	0x2000014c
 80010e0:	08004820 	.word	0x08004820
 80010e4:	20000158 	.word	0x20000158
 80010e8:	20000140 	.word	0x20000140
 80010ec:	08004834 	.word	0x08004834
 80010f0:	200001a0 	.word	0x200001a0

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b094      	sub	sp, #80	@ 0x50
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 0320 	add.w	r3, r7, #32
 80010fe:	2230      	movs	r2, #48	@ 0x30
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f002 fef4 	bl	8003ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	4b28      	ldr	r3, [pc, #160]	@ (80011c0 <SystemClock_Config+0xcc>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001120:	4a27      	ldr	r2, [pc, #156]	@ (80011c0 <SystemClock_Config+0xcc>)
 8001122:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001126:	6413      	str	r3, [r2, #64]	@ 0x40
 8001128:	4b25      	ldr	r3, [pc, #148]	@ (80011c0 <SystemClock_Config+0xcc>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	4b22      	ldr	r3, [pc, #136]	@ (80011c4 <SystemClock_Config+0xd0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a21      	ldr	r2, [pc, #132]	@ (80011c4 <SystemClock_Config+0xd0>)
 800113e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4b1f      	ldr	r3, [pc, #124]	@ (80011c4 <SystemClock_Config+0xd0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001150:	2301      	movs	r3, #1
 8001152:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001154:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001158:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115a:	2302      	movs	r3, #2
 800115c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800115e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001162:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001164:	2304      	movs	r3, #4
 8001166:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001168:	23a8      	movs	r3, #168	@ 0xa8
 800116a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800116c:	2302      	movs	r3, #2
 800116e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001170:	2307      	movs	r3, #7
 8001172:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001174:	f107 0320 	add.w	r3, r7, #32
 8001178:	4618      	mov	r0, r3
 800117a:	f001 fdf5 	bl	8002d68 <HAL_RCC_OscConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001184:	f000 f92c 	bl	80013e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001188:	230f      	movs	r3, #15
 800118a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118c:	2302      	movs	r3, #2
 800118e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001194:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001198:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800119a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800119e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	2105      	movs	r1, #5
 80011a6:	4618      	mov	r0, r3
 80011a8:	f002 f856 	bl	8003258 <HAL_RCC_ClockConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011b2:	f000 f915 	bl	80013e0 <Error_Handler>
  }
}
 80011b6:	bf00      	nop
 80011b8:	3750      	adds	r7, #80	@ 0x50
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40007000 	.word	0x40007000

080011c8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	@ 0x28
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80011ce:	4b26      	ldr	r3, [pc, #152]	@ (8001268 <MX_CAN1_Init+0xa0>)
 80011d0:	4a26      	ldr	r2, [pc, #152]	@ (800126c <MX_CAN1_Init+0xa4>)
 80011d2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 80011d4:	4b24      	ldr	r3, [pc, #144]	@ (8001268 <MX_CAN1_Init+0xa0>)
 80011d6:	2215      	movs	r2, #21
 80011d8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80011da:	4b23      	ldr	r3, [pc, #140]	@ (8001268 <MX_CAN1_Init+0xa0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011e0:	4b21      	ldr	r3, [pc, #132]	@ (8001268 <MX_CAN1_Init+0xa0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80011e6:	4b20      	ldr	r3, [pc, #128]	@ (8001268 <MX_CAN1_Init+0xa0>)
 80011e8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011ec:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80011ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001268 <MX_CAN1_Init+0xa0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80011f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001268 <MX_CAN1_Init+0xa0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80011fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001268 <MX_CAN1_Init+0xa0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001200:	4b19      	ldr	r3, [pc, #100]	@ (8001268 <MX_CAN1_Init+0xa0>)
 8001202:	2200      	movs	r2, #0
 8001204:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001206:	4b18      	ldr	r3, [pc, #96]	@ (8001268 <MX_CAN1_Init+0xa0>)
 8001208:	2200      	movs	r2, #0
 800120a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800120c:	4b16      	ldr	r3, [pc, #88]	@ (8001268 <MX_CAN1_Init+0xa0>)
 800120e:	2200      	movs	r2, #0
 8001210:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001212:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <MX_CAN1_Init+0xa0>)
 8001214:	2200      	movs	r2, #0
 8001216:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001218:	4813      	ldr	r0, [pc, #76]	@ (8001268 <MX_CAN1_Init+0xa0>)
 800121a:	f000 fb31 	bl	8001880 <HAL_CAN_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001224:	f000 f8dc 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001228:	2301      	movs	r3, #1
 800122a:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 2;
 800122c:	2302      	movs	r3, #2
 800122e:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8001230:	2301      	movs	r3, #1
 8001232:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x446<<5;
 8001234:	f648 03c0 	movw	r3, #35008	@ 0x88c0
 8001238:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800123e:	2300      	movs	r3, #0
 8001240:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterMaskIdHigh = 0xFF0<<5;
 8001242:	f44f 33ff 	mov.w	r3, #130560	@ 0x1fe00
 8001246:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800124c:	2301      	movs	r3, #1
 800124e:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 14;
 8001250:	230e      	movs	r3, #14
 8001252:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8001254:	463b      	mov	r3, r7
 8001256:	4619      	mov	r1, r3
 8001258:	4803      	ldr	r0, [pc, #12]	@ (8001268 <MX_CAN1_Init+0xa0>)
 800125a:	f000 fc0d 	bl	8001a78 <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN1_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	3728      	adds	r7, #40	@ 0x28
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000078 	.word	0x20000078
 800126c:	40006400 	.word	0x40006400

08001270 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <MX_I2C1_Init+0x50>)
 8001276:	4a13      	ldr	r2, [pc, #76]	@ (80012c4 <MX_I2C1_Init+0x54>)
 8001278:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800127a:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <MX_I2C1_Init+0x50>)
 800127c:	4a12      	ldr	r2, [pc, #72]	@ (80012c8 <MX_I2C1_Init+0x58>)
 800127e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001280:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <MX_I2C1_Init+0x50>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001286:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <MX_I2C1_Init+0x50>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800128c:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <MX_I2C1_Init+0x50>)
 800128e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001292:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001294:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <MX_I2C1_Init+0x50>)
 8001296:	2200      	movs	r2, #0
 8001298:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800129a:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <MX_I2C1_Init+0x50>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a0:	4b07      	ldr	r3, [pc, #28]	@ (80012c0 <MX_I2C1_Init+0x50>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a6:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <MX_I2C1_Init+0x50>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012ac:	4804      	ldr	r0, [pc, #16]	@ (80012c0 <MX_I2C1_Init+0x50>)
 80012ae:	f001 fc17 	bl	8002ae0 <HAL_I2C_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012b8:	f000 f892 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200000a0 	.word	0x200000a0
 80012c4:	40005400 	.word	0x40005400
 80012c8:	000186a0 	.word	0x000186a0

080012cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012d0:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 80012d2:	4a12      	ldr	r2, [pc, #72]	@ (800131c <MX_USART2_UART_Init+0x50>)
 80012d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012d6:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 80012d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012de:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f0:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 80012f2:	220c      	movs	r2, #12
 80012f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f6:	4b08      	ldr	r3, [pc, #32]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 8001304:	f002 f9c8 	bl	8003698 <HAL_UART_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800130e:	f000 f867 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200000f4 	.word	0x200000f4
 800131c:	40004400 	.word	0x40004400

08001320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	@ 0x28
 8001324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b27      	ldr	r3, [pc, #156]	@ (80013d8 <MX_GPIO_Init+0xb8>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	4a26      	ldr	r2, [pc, #152]	@ (80013d8 <MX_GPIO_Init+0xb8>)
 8001340:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001344:	6313      	str	r3, [r2, #48]	@ 0x30
 8001346:	4b24      	ldr	r3, [pc, #144]	@ (80013d8 <MX_GPIO_Init+0xb8>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b20      	ldr	r3, [pc, #128]	@ (80013d8 <MX_GPIO_Init+0xb8>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	4a1f      	ldr	r2, [pc, #124]	@ (80013d8 <MX_GPIO_Init+0xb8>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6313      	str	r3, [r2, #48]	@ 0x30
 8001362:	4b1d      	ldr	r3, [pc, #116]	@ (80013d8 <MX_GPIO_Init+0xb8>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	4b19      	ldr	r3, [pc, #100]	@ (80013d8 <MX_GPIO_Init+0xb8>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4a18      	ldr	r2, [pc, #96]	@ (80013d8 <MX_GPIO_Init+0xb8>)
 8001378:	f043 0308 	orr.w	r3, r3, #8
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b16      	ldr	r3, [pc, #88]	@ (80013d8 <MX_GPIO_Init+0xb8>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	4b12      	ldr	r3, [pc, #72]	@ (80013d8 <MX_GPIO_Init+0xb8>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a11      	ldr	r2, [pc, #68]	@ (80013d8 <MX_GPIO_Init+0xb8>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b0f      	ldr	r3, [pc, #60]	@ (80013d8 <MX_GPIO_Init+0xb8>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80013ac:	480b      	ldr	r0, [pc, #44]	@ (80013dc <MX_GPIO_Init+0xbc>)
 80013ae:	f001 fb7d 	bl	8002aac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80013b2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80013b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	4804      	ldr	r0, [pc, #16]	@ (80013dc <MX_GPIO_Init+0xbc>)
 80013cc:	f001 f9d2 	bl	8002774 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013d0:	bf00      	nop
 80013d2:	3728      	adds	r7, #40	@ 0x28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020c00 	.word	0x40020c00

080013e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <Error_Handler+0x8>

080013ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <HAL_MspInit+0x4c>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001438 <HAL_MspInit+0x4c>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001400:	6453      	str	r3, [r2, #68]	@ 0x44
 8001402:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <HAL_MspInit+0x4c>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <HAL_MspInit+0x4c>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	4a08      	ldr	r2, [pc, #32]	@ (8001438 <HAL_MspInit+0x4c>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800141c:	6413      	str	r3, [r2, #64]	@ 0x40
 800141e:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <HAL_MspInit+0x4c>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800142a:	2007      	movs	r0, #7
 800142c:	f001 f960 	bl	80026f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40023800 	.word	0x40023800

0800143c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	@ 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a1d      	ldr	r2, [pc, #116]	@ (80014d0 <HAL_CAN_MspInit+0x94>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d134      	bne.n	80014c8 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b1c      	ldr	r3, [pc, #112]	@ (80014d4 <HAL_CAN_MspInit+0x98>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	4a1b      	ldr	r2, [pc, #108]	@ (80014d4 <HAL_CAN_MspInit+0x98>)
 8001468:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800146c:	6413      	str	r3, [r2, #64]	@ 0x40
 800146e:	4b19      	ldr	r3, [pc, #100]	@ (80014d4 <HAL_CAN_MspInit+0x98>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <HAL_CAN_MspInit+0x98>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	4a14      	ldr	r2, [pc, #80]	@ (80014d4 <HAL_CAN_MspInit+0x98>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	6313      	str	r3, [r2, #48]	@ 0x30
 800148a:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <HAL_CAN_MspInit+0x98>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001496:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80014a8:	2309      	movs	r3, #9
 80014aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	4809      	ldr	r0, [pc, #36]	@ (80014d8 <HAL_CAN_MspInit+0x9c>)
 80014b4:	f001 f95e 	bl	8002774 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2100      	movs	r1, #0
 80014bc:	2015      	movs	r0, #21
 80014be:	f001 f922 	bl	8002706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80014c2:	2015      	movs	r0, #21
 80014c4:	f001 f93b 	bl	800273e <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	@ 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40006400 	.word	0x40006400
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020400 	.word	0x40020400

080014dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	@ 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a19      	ldr	r2, [pc, #100]	@ (8001560 <HAL_I2C_MspInit+0x84>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d12b      	bne.n	8001556 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <HAL_I2C_MspInit+0x88>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a17      	ldr	r2, [pc, #92]	@ (8001564 <HAL_I2C_MspInit+0x88>)
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <HAL_I2C_MspInit+0x88>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800151a:	23c0      	movs	r3, #192	@ 0xc0
 800151c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800151e:	2312      	movs	r3, #18
 8001520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001526:	2303      	movs	r3, #3
 8001528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800152a:	2304      	movs	r3, #4
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	480c      	ldr	r0, [pc, #48]	@ (8001568 <HAL_I2C_MspInit+0x8c>)
 8001536:	f001 f91d 	bl	8002774 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <HAL_I2C_MspInit+0x88>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	4a08      	ldr	r2, [pc, #32]	@ (8001564 <HAL_I2C_MspInit+0x88>)
 8001544:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001548:	6413      	str	r3, [r2, #64]	@ 0x40
 800154a:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <HAL_I2C_MspInit+0x88>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001556:	bf00      	nop
 8001558:	3728      	adds	r7, #40	@ 0x28
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40005400 	.word	0x40005400
 8001564:	40023800 	.word	0x40023800
 8001568:	40020400 	.word	0x40020400

0800156c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	@ 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a19      	ldr	r2, [pc, #100]	@ (80015f0 <HAL_UART_MspInit+0x84>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d12b      	bne.n	80015e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	4b18      	ldr	r3, [pc, #96]	@ (80015f4 <HAL_UART_MspInit+0x88>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	4a17      	ldr	r2, [pc, #92]	@ (80015f4 <HAL_UART_MspInit+0x88>)
 8001598:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800159c:	6413      	str	r3, [r2, #64]	@ 0x40
 800159e:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <HAL_UART_MspInit+0x88>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <HAL_UART_MspInit+0x88>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	4a10      	ldr	r2, [pc, #64]	@ (80015f4 <HAL_UART_MspInit+0x88>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ba:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <HAL_UART_MspInit+0x88>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015c6:	230c      	movs	r3, #12
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d2:	2303      	movs	r3, #3
 80015d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015d6:	2307      	movs	r3, #7
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	4805      	ldr	r0, [pc, #20]	@ (80015f8 <HAL_UART_MspInit+0x8c>)
 80015e2:	f001 f8c7 	bl	8002774 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80015e6:	bf00      	nop
 80015e8:	3728      	adds	r7, #40	@ 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40004400 	.word	0x40004400
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020000 	.word	0x40020000

080015fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <NMI_Handler+0x4>

08001604 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <HardFault_Handler+0x4>

0800160c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <MemManage_Handler+0x4>

08001614 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <BusFault_Handler+0x4>

0800161c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <UsageFault_Handler+0x4>

08001624 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001652:	f000 f8d1 	bl	80017f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001660:	4802      	ldr	r0, [pc, #8]	@ (800166c <CAN1_RX1_IRQHandler+0x10>)
 8001662:	f000 fd45 	bl	80020f0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000078 	.word	0x20000078

08001670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001678:	4a14      	ldr	r2, [pc, #80]	@ (80016cc <_sbrk+0x5c>)
 800167a:	4b15      	ldr	r3, [pc, #84]	@ (80016d0 <_sbrk+0x60>)
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001684:	4b13      	ldr	r3, [pc, #76]	@ (80016d4 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800168c:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <_sbrk+0x64>)
 800168e:	4a12      	ldr	r2, [pc, #72]	@ (80016d8 <_sbrk+0x68>)
 8001690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001692:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	429a      	cmp	r2, r3
 800169e:	d207      	bcs.n	80016b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a0:	f002 fc2e 	bl	8003f00 <__errno>
 80016a4:	4603      	mov	r3, r0
 80016a6:	220c      	movs	r2, #12
 80016a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016ae:	e009      	b.n	80016c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b0:	4b08      	ldr	r3, [pc, #32]	@ (80016d4 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b6:	4b07      	ldr	r3, [pc, #28]	@ (80016d4 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	4a05      	ldr	r2, [pc, #20]	@ (80016d4 <_sbrk+0x64>)
 80016c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20020000 	.word	0x20020000
 80016d0:	00000400 	.word	0x00000400
 80016d4:	200001a4 	.word	0x200001a4
 80016d8:	200002f8 	.word	0x200002f8

080016dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <SystemInit+0x20>)
 80016e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016e6:	4a05      	ldr	r2, [pc, #20]	@ (80016fc <SystemInit+0x20>)
 80016e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001700:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001738 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001704:	f7ff ffea 	bl	80016dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001708:	480c      	ldr	r0, [pc, #48]	@ (800173c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800170a:	490d      	ldr	r1, [pc, #52]	@ (8001740 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800170c:	4a0d      	ldr	r2, [pc, #52]	@ (8001744 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001710:	e002      	b.n	8001718 <LoopCopyDataInit>

08001712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001716:	3304      	adds	r3, #4

08001718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800171a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800171c:	d3f9      	bcc.n	8001712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171e:	4a0a      	ldr	r2, [pc, #40]	@ (8001748 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001720:	4c0a      	ldr	r4, [pc, #40]	@ (800174c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001724:	e001      	b.n	800172a <LoopFillZerobss>

08001726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001728:	3204      	adds	r2, #4

0800172a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800172a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800172c:	d3fb      	bcc.n	8001726 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800172e:	f002 fbed 	bl	8003f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001732:	f7ff fbc5 	bl	8000ec0 <main>
  bx  lr    
 8001736:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001738:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800173c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001740:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001744:	080048ac 	.word	0x080048ac
  ldr r2, =_sbss
 8001748:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800174c:	200002f4 	.word	0x200002f4

08001750 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001750:	e7fe      	b.n	8001750 <ADC_IRQHandler>
	...

08001754 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001758:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <HAL_Init+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0d      	ldr	r2, [pc, #52]	@ (8001794 <HAL_Init+0x40>)
 800175e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001762:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001764:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <HAL_Init+0x40>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0a      	ldr	r2, [pc, #40]	@ (8001794 <HAL_Init+0x40>)
 800176a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800176e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001770:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <HAL_Init+0x40>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a07      	ldr	r2, [pc, #28]	@ (8001794 <HAL_Init+0x40>)
 8001776:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800177a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800177c:	2003      	movs	r0, #3
 800177e:	f000 ffb7 	bl	80026f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001782:	2000      	movs	r0, #0
 8001784:	f000 f808 	bl	8001798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001788:	f7ff fe30 	bl	80013ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023c00 	.word	0x40023c00

08001798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a0:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <HAL_InitTick+0x54>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <HAL_InitTick+0x58>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	4619      	mov	r1, r3
 80017aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 ffcf 	bl	800275a <HAL_SYSTICK_Config>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e00e      	b.n	80017e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b0f      	cmp	r3, #15
 80017ca:	d80a      	bhi.n	80017e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017cc:	2200      	movs	r2, #0
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017d4:	f000 ff97 	bl	8002706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d8:	4a06      	ldr	r2, [pc, #24]	@ (80017f4 <HAL_InitTick+0x5c>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	e000      	b.n	80017e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000000 	.word	0x20000000
 80017f0:	20000008 	.word	0x20000008
 80017f4:	20000004 	.word	0x20000004

080017f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017fc:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <HAL_IncTick+0x20>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b06      	ldr	r3, [pc, #24]	@ (800181c <HAL_IncTick+0x24>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4413      	add	r3, r2
 8001808:	4a04      	ldr	r2, [pc, #16]	@ (800181c <HAL_IncTick+0x24>)
 800180a:	6013      	str	r3, [r2, #0]
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000008 	.word	0x20000008
 800181c:	200001a8 	.word	0x200001a8

08001820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return uwTick;
 8001824:	4b03      	ldr	r3, [pc, #12]	@ (8001834 <HAL_GetTick+0x14>)
 8001826:	681b      	ldr	r3, [r3, #0]
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	200001a8 	.word	0x200001a8

08001838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001840:	f7ff ffee 	bl	8001820 <HAL_GetTick>
 8001844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001850:	d005      	beq.n	800185e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001852:	4b0a      	ldr	r3, [pc, #40]	@ (800187c <HAL_Delay+0x44>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4413      	add	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800185e:	bf00      	nop
 8001860:	f7ff ffde 	bl	8001820 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	429a      	cmp	r2, r3
 800186e:	d8f7      	bhi.n	8001860 <HAL_Delay+0x28>
  {
  }
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000008 	.word	0x20000008

08001880 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e0ed      	b.n	8001a6e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d102      	bne.n	80018a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff fdcc 	bl	800143c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0201 	orr.w	r2, r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018b4:	f7ff ffb4 	bl	8001820 <HAL_GetTick>
 80018b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018ba:	e012      	b.n	80018e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018bc:	f7ff ffb0 	bl	8001820 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b0a      	cmp	r3, #10
 80018c8:	d90b      	bls.n	80018e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2205      	movs	r2, #5
 80018da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e0c5      	b.n	8001a6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0e5      	beq.n	80018bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0202 	bic.w	r2, r2, #2
 80018fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001900:	f7ff ff8e 	bl	8001820 <HAL_GetTick>
 8001904:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001906:	e012      	b.n	800192e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001908:	f7ff ff8a 	bl	8001820 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b0a      	cmp	r3, #10
 8001914:	d90b      	bls.n	800192e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2205      	movs	r2, #5
 8001926:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e09f      	b.n	8001a6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1e5      	bne.n	8001908 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7e1b      	ldrb	r3, [r3, #24]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d108      	bne.n	8001956 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	e007      	b.n	8001966 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001964:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	7e5b      	ldrb	r3, [r3, #25]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d108      	bne.n	8001980 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	e007      	b.n	8001990 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800198e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7e9b      	ldrb	r3, [r3, #26]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d108      	bne.n	80019aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0220 	orr.w	r2, r2, #32
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	e007      	b.n	80019ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0220 	bic.w	r2, r2, #32
 80019b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7edb      	ldrb	r3, [r3, #27]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d108      	bne.n	80019d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0210 	bic.w	r2, r2, #16
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	e007      	b.n	80019e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0210 	orr.w	r2, r2, #16
 80019e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	7f1b      	ldrb	r3, [r3, #28]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d108      	bne.n	80019fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0208 	orr.w	r2, r2, #8
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	e007      	b.n	8001a0e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0208 	bic.w	r2, r2, #8
 8001a0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7f5b      	ldrb	r3, [r3, #29]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d108      	bne.n	8001a28 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f042 0204 	orr.w	r2, r2, #4
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	e007      	b.n	8001a38 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0204 	bic.w	r2, r2, #4
 8001a36:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	ea42 0103 	orr.w	r1, r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	1e5a      	subs	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a8e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a90:	7cfb      	ldrb	r3, [r7, #19]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d003      	beq.n	8001a9e <HAL_CAN_ConfigFilter+0x26>
 8001a96:	7cfb      	ldrb	r3, [r7, #19]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	f040 80be 	bne.w	8001c1a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001a9e:	4b65      	ldr	r3, [pc, #404]	@ (8001c34 <HAL_CAN_ConfigFilter+0x1bc>)
 8001aa0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001aa8:	f043 0201 	orr.w	r2, r3, #1
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ab8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	2201      	movs	r2, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	43db      	mvns	r3, r3
 8001af0:	401a      	ands	r2, r3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d123      	bne.n	8001b48 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b22:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	3248      	adds	r2, #72	@ 0x48
 8001b28:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b3c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b3e:	6979      	ldr	r1, [r7, #20]
 8001b40:	3348      	adds	r3, #72	@ 0x48
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	440b      	add	r3, r1
 8001b46:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d122      	bne.n	8001b96 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b70:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	3248      	adds	r2, #72	@ 0x48
 8001b76:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b8a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b8c:	6979      	ldr	r1, [r7, #20]
 8001b8e:	3348      	adds	r3, #72	@ 0x48
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	440b      	add	r3, r1
 8001b94:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d109      	bne.n	8001bb2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	401a      	ands	r2, r3
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001bb0:	e007      	b.n	8001bc2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d109      	bne.n	8001bde <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001bdc:	e007      	b.n	8001bee <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	431a      	orrs	r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d107      	bne.n	8001c06 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c0c:	f023 0201 	bic.w	r2, r3, #1
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e006      	b.n	8001c28 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
  }
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	371c      	adds	r7, #28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	40006400 	.word	0x40006400

08001c38 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d12e      	bne.n	8001caa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0201 	bic.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c64:	f7ff fddc 	bl	8001820 <HAL_GetTick>
 8001c68:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c6a:	e012      	b.n	8001c92 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c6c:	f7ff fdd8 	bl	8001820 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b0a      	cmp	r3, #10
 8001c78:	d90b      	bls.n	8001c92 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2205      	movs	r2, #5
 8001c8a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e012      	b.n	8001cb8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1e5      	bne.n	8001c6c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e006      	b.n	8001cb8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cae:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
  }
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b089      	sub	sp, #36	@ 0x24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cd4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cde:	7ffb      	ldrb	r3, [r7, #31]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d003      	beq.n	8001cec <HAL_CAN_AddTxMessage+0x2c>
 8001ce4:	7ffb      	ldrb	r3, [r7, #31]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	f040 80ad 	bne.w	8001e46 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10a      	bne.n	8001d0c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d105      	bne.n	8001d0c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 8095 	beq.w	8001e36 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	0e1b      	lsrs	r3, r3, #24
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d16:	2201      	movs	r2, #1
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10d      	bne.n	8001d44 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d32:	68f9      	ldr	r1, [r7, #12]
 8001d34:	6809      	ldr	r1, [r1, #0]
 8001d36:	431a      	orrs	r2, r3
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	3318      	adds	r3, #24
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	440b      	add	r3, r1
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	e00f      	b.n	8001d64 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d4e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d54:	68f9      	ldr	r1, [r7, #12]
 8001d56:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001d58:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	3318      	adds	r3, #24
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	440b      	add	r3, r1
 8001d62:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6819      	ldr	r1, [r3, #0]
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	691a      	ldr	r2, [r3, #16]
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	3318      	adds	r3, #24
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	440b      	add	r3, r1
 8001d74:	3304      	adds	r3, #4
 8001d76:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	7d1b      	ldrb	r3, [r3, #20]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d111      	bne.n	8001da4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	3318      	adds	r3, #24
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	6811      	ldr	r1, [r2, #0]
 8001d94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	3318      	adds	r3, #24
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	440b      	add	r3, r1
 8001da0:	3304      	adds	r3, #4
 8001da2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3307      	adds	r3, #7
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	061a      	lsls	r2, r3, #24
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3306      	adds	r3, #6
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	041b      	lsls	r3, r3, #16
 8001db4:	431a      	orrs	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3305      	adds	r3, #5
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	021b      	lsls	r3, r3, #8
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	3204      	adds	r2, #4
 8001dc4:	7812      	ldrb	r2, [r2, #0]
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	6811      	ldr	r1, [r2, #0]
 8001dcc:	ea43 0200 	orr.w	r2, r3, r0
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	011b      	lsls	r3, r3, #4
 8001dd4:	440b      	add	r3, r1
 8001dd6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001dda:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3303      	adds	r3, #3
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	061a      	lsls	r2, r3, #24
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3302      	adds	r3, #2
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	041b      	lsls	r3, r3, #16
 8001dec:	431a      	orrs	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3301      	adds	r3, #1
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	021b      	lsls	r3, r3, #8
 8001df6:	4313      	orrs	r3, r2
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	7812      	ldrb	r2, [r2, #0]
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	6811      	ldr	r1, [r2, #0]
 8001e02:	ea43 0200 	orr.w	r2, r3, r0
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001e10:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	3318      	adds	r3, #24
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	4413      	add	r3, r2
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	6811      	ldr	r1, [r2, #0]
 8001e24:	f043 0201 	orr.w	r2, r3, #1
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	3318      	adds	r3, #24
 8001e2c:	011b      	lsls	r3, r3, #4
 8001e2e:	440b      	add	r3, r1
 8001e30:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	e00e      	b.n	8001e54 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e006      	b.n	8001e54 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
  }
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3724      	adds	r7, #36	@ 0x24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e60:	b480      	push	{r7}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
 8001e6c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e74:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e76:	7dfb      	ldrb	r3, [r7, #23]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d003      	beq.n	8001e84 <HAL_CAN_GetRxMessage+0x24>
 8001e7c:	7dfb      	ldrb	r3, [r7, #23]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	f040 8103 	bne.w	800208a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10e      	bne.n	8001ea8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d116      	bne.n	8001ec6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0f7      	b.n	8002098 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d107      	bne.n	8001ec6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e0e8      	b.n	8002098 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	331b      	adds	r3, #27
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	4413      	add	r3, r2
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0204 	and.w	r2, r3, #4
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10c      	bne.n	8001efe <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	331b      	adds	r3, #27
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	4413      	add	r3, r2
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	0d5b      	lsrs	r3, r3, #21
 8001ef4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	e00b      	b.n	8001f16 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	331b      	adds	r3, #27
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	4413      	add	r3, r2
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	331b      	adds	r3, #27
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	4413      	add	r3, r2
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0202 	and.w	r2, r3, #2
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	331b      	adds	r3, #27
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	4413      	add	r3, r2
 8001f38:	3304      	adds	r3, #4
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2208      	movs	r2, #8
 8001f48:	611a      	str	r2, [r3, #16]
 8001f4a:	e00b      	b.n	8001f64 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	331b      	adds	r3, #27
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	4413      	add	r3, r2
 8001f58:	3304      	adds	r3, #4
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 020f 	and.w	r2, r3, #15
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	331b      	adds	r3, #27
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	4413      	add	r3, r2
 8001f70:	3304      	adds	r3, #4
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	331b      	adds	r3, #27
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	4413      	add	r3, r2
 8001f88:	3304      	adds	r3, #4
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	0c1b      	lsrs	r3, r3, #16
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	0a1a      	lsrs	r2, r3, #8
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	0c1a      	lsrs	r2, r3, #16
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	3302      	adds	r3, #2
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	011b      	lsls	r3, r3, #4
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	0e1a      	lsrs	r2, r3, #24
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	3303      	adds	r3, #3
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	4413      	add	r3, r2
 8002002:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	3304      	adds	r3, #4
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	4413      	add	r3, r2
 800201a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	0a1a      	lsrs	r2, r3, #8
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	3305      	adds	r3, #5
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	4413      	add	r3, r2
 8002034:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	0c1a      	lsrs	r2, r3, #16
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	3306      	adds	r3, #6
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	4413      	add	r3, r2
 800204e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	0e1a      	lsrs	r2, r3, #24
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	3307      	adds	r3, #7
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d108      	bne.n	8002076 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0220 	orr.w	r2, r2, #32
 8002072:	60da      	str	r2, [r3, #12]
 8002074:	e007      	b.n	8002086 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	691a      	ldr	r2, [r3, #16]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f042 0220 	orr.w	r2, r2, #32
 8002084:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	e006      	b.n	8002098 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
  }
}
 8002098:	4618      	mov	r0, r3
 800209a:	371c      	adds	r7, #28
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020b4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d002      	beq.n	80020c2 <HAL_CAN_ActivateNotification+0x1e>
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d109      	bne.n	80020d6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6959      	ldr	r1, [r3, #20]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	e006      	b.n	80020e4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020da:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
  }
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	@ 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800212c:	6a3b      	ldr	r3, [r7, #32]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d07c      	beq.n	8002230 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b00      	cmp	r3, #0
 800213e:	d023      	beq.n	8002188 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2201      	movs	r2, #1
 8002146:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f983 	bl	800245e <HAL_CAN_TxMailbox0CompleteCallback>
 8002158:	e016      	b.n	8002188 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d004      	beq.n	800216e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002166:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800216a:	627b      	str	r3, [r7, #36]	@ 0x24
 800216c:	e00c      	b.n	8002188 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d004      	beq.n	8002182 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800217e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002180:	e002      	b.n	8002188 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f989 	bl	800249a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800218e:	2b00      	cmp	r3, #0
 8002190:	d024      	beq.n	80021dc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800219a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f963 	bl	8002472 <HAL_CAN_TxMailbox1CompleteCallback>
 80021ac:	e016      	b.n	80021dc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d004      	beq.n	80021c2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021be:	627b      	str	r3, [r7, #36]	@ 0x24
 80021c0:	e00c      	b.n	80021dc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d004      	beq.n	80021d6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80021cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80021d4:	e002      	b.n	80021dc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f969 	bl	80024ae <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d024      	beq.n	8002230 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80021ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f943 	bl	8002486 <HAL_CAN_TxMailbox2CompleteCallback>
 8002200:	e016      	b.n	8002230 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d004      	beq.n	8002216 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800220c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002212:	627b      	str	r3, [r7, #36]	@ 0x24
 8002214:	e00c      	b.n	8002230 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d004      	beq.n	800222a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002222:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002226:	627b      	str	r3, [r7, #36]	@ 0x24
 8002228:	e002      	b.n	8002230 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f949 	bl	80024c2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00c      	beq.n	8002254 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b00      	cmp	r3, #0
 8002242:	d007      	beq.n	8002254 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002246:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800224a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2210      	movs	r2, #16
 8002252:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00b      	beq.n	8002276 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b00      	cmp	r3, #0
 8002266:	d006      	beq.n	8002276 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2208      	movs	r2, #8
 800226e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f93a 	bl	80024ea <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d009      	beq.n	8002294 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f921 	bl	80024d6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00c      	beq.n	80022b8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	f003 0310 	and.w	r3, r3, #16
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d007      	beq.n	80022b8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80022a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022ae:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2210      	movs	r2, #16
 80022b6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00b      	beq.n	80022da <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d006      	beq.n	80022da <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2208      	movs	r2, #8
 80022d2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f912 	bl	80024fe <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	f003 0310 	and.w	r3, r3, #16
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d009      	beq.n	80022f8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7fe fd2a 	bl	8000d4c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00b      	beq.n	800231a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	2b00      	cmp	r3, #0
 800230a:	d006      	beq.n	800231a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2210      	movs	r2, #16
 8002312:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f8fc 	bl	8002512 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00b      	beq.n	800233c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d006      	beq.n	800233c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2208      	movs	r2, #8
 8002334:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f8f5 	bl	8002526 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d07b      	beq.n	800243e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	d072      	beq.n	8002436 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d008      	beq.n	800236c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002382:	f043 0302 	orr.w	r3, r3, #2
 8002386:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800238e:	2b00      	cmp	r3, #0
 8002390:	d008      	beq.n	80023a4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800239c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239e:	f043 0304 	orr.w	r3, r3, #4
 80023a2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d043      	beq.n	8002436 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d03e      	beq.n	8002436 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023be:	2b60      	cmp	r3, #96	@ 0x60
 80023c0:	d02b      	beq.n	800241a <HAL_CAN_IRQHandler+0x32a>
 80023c2:	2b60      	cmp	r3, #96	@ 0x60
 80023c4:	d82e      	bhi.n	8002424 <HAL_CAN_IRQHandler+0x334>
 80023c6:	2b50      	cmp	r3, #80	@ 0x50
 80023c8:	d022      	beq.n	8002410 <HAL_CAN_IRQHandler+0x320>
 80023ca:	2b50      	cmp	r3, #80	@ 0x50
 80023cc:	d82a      	bhi.n	8002424 <HAL_CAN_IRQHandler+0x334>
 80023ce:	2b40      	cmp	r3, #64	@ 0x40
 80023d0:	d019      	beq.n	8002406 <HAL_CAN_IRQHandler+0x316>
 80023d2:	2b40      	cmp	r3, #64	@ 0x40
 80023d4:	d826      	bhi.n	8002424 <HAL_CAN_IRQHandler+0x334>
 80023d6:	2b30      	cmp	r3, #48	@ 0x30
 80023d8:	d010      	beq.n	80023fc <HAL_CAN_IRQHandler+0x30c>
 80023da:	2b30      	cmp	r3, #48	@ 0x30
 80023dc:	d822      	bhi.n	8002424 <HAL_CAN_IRQHandler+0x334>
 80023de:	2b10      	cmp	r3, #16
 80023e0:	d002      	beq.n	80023e8 <HAL_CAN_IRQHandler+0x2f8>
 80023e2:	2b20      	cmp	r3, #32
 80023e4:	d005      	beq.n	80023f2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80023e6:	e01d      	b.n	8002424 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80023e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ea:	f043 0308 	orr.w	r3, r3, #8
 80023ee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023f0:	e019      	b.n	8002426 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80023f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f4:	f043 0310 	orr.w	r3, r3, #16
 80023f8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023fa:	e014      	b.n	8002426 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80023fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fe:	f043 0320 	orr.w	r3, r3, #32
 8002402:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002404:	e00f      	b.n	8002426 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800240c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800240e:	e00a      	b.n	8002426 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002416:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002418:	e005      	b.n	8002426 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002420:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002422:	e000      	b.n	8002426 <HAL_CAN_IRQHandler+0x336>
            break;
 8002424:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699a      	ldr	r2, [r3, #24]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002434:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2204      	movs	r2, #4
 800243c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f872 	bl	800253a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002456:	bf00      	nop
 8002458:	3728      	adds	r7, #40	@ 0x28
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002560:	4b0c      	ldr	r3, [pc, #48]	@ (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800256c:	4013      	ands	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002578:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800257c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002582:	4a04      	ldr	r2, [pc, #16]	@ (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	60d3      	str	r3, [r2, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800259c:	4b04      	ldr	r3, [pc, #16]	@ (80025b0 <__NVIC_GetPriorityGrouping+0x18>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	f003 0307 	and.w	r3, r3, #7
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	db0b      	blt.n	80025de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	f003 021f 	and.w	r2, r3, #31
 80025cc:	4907      	ldr	r1, [pc, #28]	@ (80025ec <__NVIC_EnableIRQ+0x38>)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	2001      	movs	r0, #1
 80025d6:	fa00 f202 	lsl.w	r2, r0, r2
 80025da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000e100 	.word	0xe000e100

080025f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	6039      	str	r1, [r7, #0]
 80025fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002600:	2b00      	cmp	r3, #0
 8002602:	db0a      	blt.n	800261a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	b2da      	uxtb	r2, r3
 8002608:	490c      	ldr	r1, [pc, #48]	@ (800263c <__NVIC_SetPriority+0x4c>)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	0112      	lsls	r2, r2, #4
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	440b      	add	r3, r1
 8002614:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002618:	e00a      	b.n	8002630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	b2da      	uxtb	r2, r3
 800261e:	4908      	ldr	r1, [pc, #32]	@ (8002640 <__NVIC_SetPriority+0x50>)
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	3b04      	subs	r3, #4
 8002628:	0112      	lsls	r2, r2, #4
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	440b      	add	r3, r1
 800262e:	761a      	strb	r2, [r3, #24]
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	e000e100 	.word	0xe000e100
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	@ 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f1c3 0307 	rsb	r3, r3, #7
 800265e:	2b04      	cmp	r3, #4
 8002660:	bf28      	it	cs
 8002662:	2304      	movcs	r3, #4
 8002664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3304      	adds	r3, #4
 800266a:	2b06      	cmp	r3, #6
 800266c:	d902      	bls.n	8002674 <NVIC_EncodePriority+0x30>
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3b03      	subs	r3, #3
 8002672:	e000      	b.n	8002676 <NVIC_EncodePriority+0x32>
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002678:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43da      	mvns	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	401a      	ands	r2, r3
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800268c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	43d9      	mvns	r1, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	4313      	orrs	r3, r2
         );
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3724      	adds	r7, #36	@ 0x24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026bc:	d301      	bcc.n	80026c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026be:	2301      	movs	r3, #1
 80026c0:	e00f      	b.n	80026e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c2:	4a0a      	ldr	r2, [pc, #40]	@ (80026ec <SysTick_Config+0x40>)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ca:	210f      	movs	r1, #15
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80026d0:	f7ff ff8e 	bl	80025f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d4:	4b05      	ldr	r3, [pc, #20]	@ (80026ec <SysTick_Config+0x40>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026da:	4b04      	ldr	r3, [pc, #16]	@ (80026ec <SysTick_Config+0x40>)
 80026dc:	2207      	movs	r2, #7
 80026de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	e000e010 	.word	0xe000e010

080026f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff ff29 	bl	8002550 <__NVIC_SetPriorityGrouping>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002706:	b580      	push	{r7, lr}
 8002708:	b086      	sub	sp, #24
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002718:	f7ff ff3e 	bl	8002598 <__NVIC_GetPriorityGrouping>
 800271c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	6978      	ldr	r0, [r7, #20]
 8002724:	f7ff ff8e 	bl	8002644 <NVIC_EncodePriority>
 8002728:	4602      	mov	r2, r0
 800272a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff5d 	bl	80025f0 <__NVIC_SetPriority>
}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff31 	bl	80025b4 <__NVIC_EnableIRQ>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ffa2 	bl	80026ac <SysTick_Config>
 8002768:	4603      	mov	r3, r0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002774:	b480      	push	{r7}
 8002776:	b089      	sub	sp, #36	@ 0x24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
 800278e:	e16b      	b.n	8002a68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002790:	2201      	movs	r2, #1
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	f040 815a 	bne.w	8002a62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d005      	beq.n	80027c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d130      	bne.n	8002828 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	2203      	movs	r2, #3
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027fc:	2201      	movs	r2, #1
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	f003 0201 	and.w	r2, r3, #1
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	2b03      	cmp	r3, #3
 8002832:	d017      	beq.n	8002864 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	2203      	movs	r2, #3
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d123      	bne.n	80028b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	08da      	lsrs	r2, r3, #3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3208      	adds	r2, #8
 8002878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800287c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	220f      	movs	r2, #15
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	08da      	lsrs	r2, r3, #3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3208      	adds	r2, #8
 80028b2:	69b9      	ldr	r1, [r7, #24]
 80028b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	2203      	movs	r2, #3
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 0203 	and.w	r2, r3, #3
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 80b4 	beq.w	8002a62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	4b60      	ldr	r3, [pc, #384]	@ (8002a80 <HAL_GPIO_Init+0x30c>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002902:	4a5f      	ldr	r2, [pc, #380]	@ (8002a80 <HAL_GPIO_Init+0x30c>)
 8002904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002908:	6453      	str	r3, [r2, #68]	@ 0x44
 800290a:	4b5d      	ldr	r3, [pc, #372]	@ (8002a80 <HAL_GPIO_Init+0x30c>)
 800290c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002916:	4a5b      	ldr	r2, [pc, #364]	@ (8002a84 <HAL_GPIO_Init+0x310>)
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	089b      	lsrs	r3, r3, #2
 800291c:	3302      	adds	r3, #2
 800291e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002922:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	220f      	movs	r2, #15
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a52      	ldr	r2, [pc, #328]	@ (8002a88 <HAL_GPIO_Init+0x314>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d02b      	beq.n	800299a <HAL_GPIO_Init+0x226>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a51      	ldr	r2, [pc, #324]	@ (8002a8c <HAL_GPIO_Init+0x318>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d025      	beq.n	8002996 <HAL_GPIO_Init+0x222>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a50      	ldr	r2, [pc, #320]	@ (8002a90 <HAL_GPIO_Init+0x31c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d01f      	beq.n	8002992 <HAL_GPIO_Init+0x21e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a4f      	ldr	r2, [pc, #316]	@ (8002a94 <HAL_GPIO_Init+0x320>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d019      	beq.n	800298e <HAL_GPIO_Init+0x21a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a4e      	ldr	r2, [pc, #312]	@ (8002a98 <HAL_GPIO_Init+0x324>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d013      	beq.n	800298a <HAL_GPIO_Init+0x216>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a4d      	ldr	r2, [pc, #308]	@ (8002a9c <HAL_GPIO_Init+0x328>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00d      	beq.n	8002986 <HAL_GPIO_Init+0x212>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a4c      	ldr	r2, [pc, #304]	@ (8002aa0 <HAL_GPIO_Init+0x32c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d007      	beq.n	8002982 <HAL_GPIO_Init+0x20e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a4b      	ldr	r2, [pc, #300]	@ (8002aa4 <HAL_GPIO_Init+0x330>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d101      	bne.n	800297e <HAL_GPIO_Init+0x20a>
 800297a:	2307      	movs	r3, #7
 800297c:	e00e      	b.n	800299c <HAL_GPIO_Init+0x228>
 800297e:	2308      	movs	r3, #8
 8002980:	e00c      	b.n	800299c <HAL_GPIO_Init+0x228>
 8002982:	2306      	movs	r3, #6
 8002984:	e00a      	b.n	800299c <HAL_GPIO_Init+0x228>
 8002986:	2305      	movs	r3, #5
 8002988:	e008      	b.n	800299c <HAL_GPIO_Init+0x228>
 800298a:	2304      	movs	r3, #4
 800298c:	e006      	b.n	800299c <HAL_GPIO_Init+0x228>
 800298e:	2303      	movs	r3, #3
 8002990:	e004      	b.n	800299c <HAL_GPIO_Init+0x228>
 8002992:	2302      	movs	r3, #2
 8002994:	e002      	b.n	800299c <HAL_GPIO_Init+0x228>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <HAL_GPIO_Init+0x228>
 800299a:	2300      	movs	r3, #0
 800299c:	69fa      	ldr	r2, [r7, #28]
 800299e:	f002 0203 	and.w	r2, r2, #3
 80029a2:	0092      	lsls	r2, r2, #2
 80029a4:	4093      	lsls	r3, r2
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029ac:	4935      	ldr	r1, [pc, #212]	@ (8002a84 <HAL_GPIO_Init+0x310>)
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	089b      	lsrs	r3, r3, #2
 80029b2:	3302      	adds	r3, #2
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ba:	4b3b      	ldr	r3, [pc, #236]	@ (8002aa8 <HAL_GPIO_Init+0x334>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029de:	4a32      	ldr	r2, [pc, #200]	@ (8002aa8 <HAL_GPIO_Init+0x334>)
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029e4:	4b30      	ldr	r3, [pc, #192]	@ (8002aa8 <HAL_GPIO_Init+0x334>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a08:	4a27      	ldr	r2, [pc, #156]	@ (8002aa8 <HAL_GPIO_Init+0x334>)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a0e:	4b26      	ldr	r3, [pc, #152]	@ (8002aa8 <HAL_GPIO_Init+0x334>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a32:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa8 <HAL_GPIO_Init+0x334>)
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a38:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa8 <HAL_GPIO_Init+0x334>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a5c:	4a12      	ldr	r2, [pc, #72]	@ (8002aa8 <HAL_GPIO_Init+0x334>)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3301      	adds	r3, #1
 8002a66:	61fb      	str	r3, [r7, #28]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	2b0f      	cmp	r3, #15
 8002a6c:	f67f ae90 	bls.w	8002790 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	3724      	adds	r7, #36	@ 0x24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40013800 	.word	0x40013800
 8002a88:	40020000 	.word	0x40020000
 8002a8c:	40020400 	.word	0x40020400
 8002a90:	40020800 	.word	0x40020800
 8002a94:	40020c00 	.word	0x40020c00
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40021400 	.word	0x40021400
 8002aa0:	40021800 	.word	0x40021800
 8002aa4:	40021c00 	.word	0x40021c00
 8002aa8:	40013c00 	.word	0x40013c00

08002aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	807b      	strh	r3, [r7, #2]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002abc:	787b      	ldrb	r3, [r7, #1]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ac2:	887a      	ldrh	r2, [r7, #2]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ac8:	e003      	b.n	8002ad2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aca:	887b      	ldrh	r3, [r7, #2]
 8002acc:	041a      	lsls	r2, r3, #16
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	619a      	str	r2, [r3, #24]
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
	...

08002ae0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e12b      	b.n	8002d4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d106      	bne.n	8002b0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7fe fce8 	bl	80014dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2224      	movs	r2, #36	@ 0x24
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0201 	bic.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b44:	f000 fd80 	bl	8003648 <HAL_RCC_GetPCLK1Freq>
 8002b48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	4a81      	ldr	r2, [pc, #516]	@ (8002d54 <HAL_I2C_Init+0x274>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d807      	bhi.n	8002b64 <HAL_I2C_Init+0x84>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4a80      	ldr	r2, [pc, #512]	@ (8002d58 <HAL_I2C_Init+0x278>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	bf94      	ite	ls
 8002b5c:	2301      	movls	r3, #1
 8002b5e:	2300      	movhi	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	e006      	b.n	8002b72 <HAL_I2C_Init+0x92>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4a7d      	ldr	r2, [pc, #500]	@ (8002d5c <HAL_I2C_Init+0x27c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	bf94      	ite	ls
 8002b6c:	2301      	movls	r3, #1
 8002b6e:	2300      	movhi	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e0e7      	b.n	8002d4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4a78      	ldr	r2, [pc, #480]	@ (8002d60 <HAL_I2C_Init+0x280>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	0c9b      	lsrs	r3, r3, #18
 8002b84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	4a6a      	ldr	r2, [pc, #424]	@ (8002d54 <HAL_I2C_Init+0x274>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d802      	bhi.n	8002bb4 <HAL_I2C_Init+0xd4>
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	e009      	b.n	8002bc8 <HAL_I2C_Init+0xe8>
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002bba:	fb02 f303 	mul.w	r3, r2, r3
 8002bbe:	4a69      	ldr	r2, [pc, #420]	@ (8002d64 <HAL_I2C_Init+0x284>)
 8002bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc4:	099b      	lsrs	r3, r3, #6
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002bda:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	495c      	ldr	r1, [pc, #368]	@ (8002d54 <HAL_I2C_Init+0x274>)
 8002be4:	428b      	cmp	r3, r1
 8002be6:	d819      	bhi.n	8002c1c <HAL_I2C_Init+0x13c>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1e59      	subs	r1, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bf6:	1c59      	adds	r1, r3, #1
 8002bf8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002bfc:	400b      	ands	r3, r1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <HAL_I2C_Init+0x138>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	1e59      	subs	r1, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c10:	3301      	adds	r3, #1
 8002c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c16:	e051      	b.n	8002cbc <HAL_I2C_Init+0x1dc>
 8002c18:	2304      	movs	r3, #4
 8002c1a:	e04f      	b.n	8002cbc <HAL_I2C_Init+0x1dc>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d111      	bne.n	8002c48 <HAL_I2C_Init+0x168>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	1e58      	subs	r0, r3, #1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6859      	ldr	r1, [r3, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	440b      	add	r3, r1
 8002c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c36:	3301      	adds	r3, #1
 8002c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	bf0c      	ite	eq
 8002c40:	2301      	moveq	r3, #1
 8002c42:	2300      	movne	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	e012      	b.n	8002c6e <HAL_I2C_Init+0x18e>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1e58      	subs	r0, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6859      	ldr	r1, [r3, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	0099      	lsls	r1, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c5e:	3301      	adds	r3, #1
 8002c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bf0c      	ite	eq
 8002c68:	2301      	moveq	r3, #1
 8002c6a:	2300      	movne	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_I2C_Init+0x196>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e022      	b.n	8002cbc <HAL_I2C_Init+0x1dc>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10e      	bne.n	8002c9c <HAL_I2C_Init+0x1bc>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	1e58      	subs	r0, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6859      	ldr	r1, [r3, #4]
 8002c86:	460b      	mov	r3, r1
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	440b      	add	r3, r1
 8002c8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c90:	3301      	adds	r3, #1
 8002c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c9a:	e00f      	b.n	8002cbc <HAL_I2C_Init+0x1dc>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1e58      	subs	r0, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6859      	ldr	r1, [r3, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	0099      	lsls	r1, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	6809      	ldr	r1, [r1, #0]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69da      	ldr	r2, [r3, #28]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002cea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6911      	ldr	r1, [r2, #16]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	68d2      	ldr	r2, [r2, #12]
 8002cf6:	4311      	orrs	r1, r2
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2220      	movs	r2, #32
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	000186a0 	.word	0x000186a0
 8002d58:	001e847f 	.word	0x001e847f
 8002d5c:	003d08ff 	.word	0x003d08ff
 8002d60:	431bde83 	.word	0x431bde83
 8002d64:	10624dd3 	.word	0x10624dd3

08002d68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e267      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d075      	beq.n	8002e72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d86:	4b88      	ldr	r3, [pc, #544]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d00c      	beq.n	8002dac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d92:	4b85      	ldr	r3, [pc, #532]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d112      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d9e:	4b82      	ldr	r3, [pc, #520]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002da6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002daa:	d10b      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dac:	4b7e      	ldr	r3, [pc, #504]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d05b      	beq.n	8002e70 <HAL_RCC_OscConfig+0x108>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d157      	bne.n	8002e70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e242      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dcc:	d106      	bne.n	8002ddc <HAL_RCC_OscConfig+0x74>
 8002dce:	4b76      	ldr	r3, [pc, #472]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a75      	ldr	r2, [pc, #468]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	e01d      	b.n	8002e18 <HAL_RCC_OscConfig+0xb0>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCC_OscConfig+0x98>
 8002de6:	4b70      	ldr	r3, [pc, #448]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a6f      	ldr	r2, [pc, #444]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002dec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	4b6d      	ldr	r3, [pc, #436]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a6c      	ldr	r2, [pc, #432]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	e00b      	b.n	8002e18 <HAL_RCC_OscConfig+0xb0>
 8002e00:	4b69      	ldr	r3, [pc, #420]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a68      	ldr	r2, [pc, #416]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	4b66      	ldr	r3, [pc, #408]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a65      	ldr	r2, [pc, #404]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d013      	beq.n	8002e48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e20:	f7fe fcfe 	bl	8001820 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e28:	f7fe fcfa 	bl	8001820 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	@ 0x64
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e207      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3a:	4b5b      	ldr	r3, [pc, #364]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0xc0>
 8002e46:	e014      	b.n	8002e72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e48:	f7fe fcea 	bl	8001820 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e50:	f7fe fce6 	bl	8001820 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	@ 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e1f3      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e62:	4b51      	ldr	r3, [pc, #324]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0xe8>
 8002e6e:	e000      	b.n	8002e72 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d063      	beq.n	8002f46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e7e:	4b4a      	ldr	r3, [pc, #296]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00b      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8a:	4b47      	ldr	r3, [pc, #284]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d11c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e96:	4b44      	ldr	r3, [pc, #272]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d116      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea2:	4b41      	ldr	r3, [pc, #260]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d005      	beq.n	8002eba <HAL_RCC_OscConfig+0x152>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e1c7      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eba:	4b3b      	ldr	r3, [pc, #236]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4937      	ldr	r1, [pc, #220]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ece:	e03a      	b.n	8002f46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d020      	beq.n	8002f1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed8:	4b34      	ldr	r3, [pc, #208]	@ (8002fac <HAL_RCC_OscConfig+0x244>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ede:	f7fe fc9f 	bl	8001820 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee6:	f7fe fc9b 	bl	8001820 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e1a8      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f0      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f04:	4b28      	ldr	r3, [pc, #160]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	4925      	ldr	r1, [pc, #148]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]
 8002f18:	e015      	b.n	8002f46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1a:	4b24      	ldr	r3, [pc, #144]	@ (8002fac <HAL_RCC_OscConfig+0x244>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7fe fc7e 	bl	8001820 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f28:	f7fe fc7a 	bl	8001820 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e187      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d036      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d016      	beq.n	8002f88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f5a:	4b15      	ldr	r3, [pc, #84]	@ (8002fb0 <HAL_RCC_OscConfig+0x248>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f60:	f7fe fc5e 	bl	8001820 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f68:	f7fe fc5a 	bl	8001820 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e167      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa8 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0x200>
 8002f86:	e01b      	b.n	8002fc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f88:	4b09      	ldr	r3, [pc, #36]	@ (8002fb0 <HAL_RCC_OscConfig+0x248>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8e:	f7fe fc47 	bl	8001820 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f94:	e00e      	b.n	8002fb4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f96:	f7fe fc43 	bl	8001820 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d907      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e150      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	42470000 	.word	0x42470000
 8002fb0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb4:	4b88      	ldr	r3, [pc, #544]	@ (80031d8 <HAL_RCC_OscConfig+0x470>)
 8002fb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1ea      	bne.n	8002f96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 8097 	beq.w	80030fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd2:	4b81      	ldr	r3, [pc, #516]	@ (80031d8 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10f      	bne.n	8002ffe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	4b7d      	ldr	r3, [pc, #500]	@ (80031d8 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe6:	4a7c      	ldr	r2, [pc, #496]	@ (80031d8 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fee:	4b7a      	ldr	r3, [pc, #488]	@ (80031d8 <HAL_RCC_OscConfig+0x470>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffe:	4b77      	ldr	r3, [pc, #476]	@ (80031dc <HAL_RCC_OscConfig+0x474>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003006:	2b00      	cmp	r3, #0
 8003008:	d118      	bne.n	800303c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800300a:	4b74      	ldr	r3, [pc, #464]	@ (80031dc <HAL_RCC_OscConfig+0x474>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a73      	ldr	r2, [pc, #460]	@ (80031dc <HAL_RCC_OscConfig+0x474>)
 8003010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003016:	f7fe fc03 	bl	8001820 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800301e:	f7fe fbff 	bl	8001820 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e10c      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003030:	4b6a      	ldr	r3, [pc, #424]	@ (80031dc <HAL_RCC_OscConfig+0x474>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0f0      	beq.n	800301e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d106      	bne.n	8003052 <HAL_RCC_OscConfig+0x2ea>
 8003044:	4b64      	ldr	r3, [pc, #400]	@ (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003048:	4a63      	ldr	r2, [pc, #396]	@ (80031d8 <HAL_RCC_OscConfig+0x470>)
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003050:	e01c      	b.n	800308c <HAL_RCC_OscConfig+0x324>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b05      	cmp	r3, #5
 8003058:	d10c      	bne.n	8003074 <HAL_RCC_OscConfig+0x30c>
 800305a:	4b5f      	ldr	r3, [pc, #380]	@ (80031d8 <HAL_RCC_OscConfig+0x470>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800305e:	4a5e      	ldr	r2, [pc, #376]	@ (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003060:	f043 0304 	orr.w	r3, r3, #4
 8003064:	6713      	str	r3, [r2, #112]	@ 0x70
 8003066:	4b5c      	ldr	r3, [pc, #368]	@ (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306a:	4a5b      	ldr	r2, [pc, #364]	@ (80031d8 <HAL_RCC_OscConfig+0x470>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	6713      	str	r3, [r2, #112]	@ 0x70
 8003072:	e00b      	b.n	800308c <HAL_RCC_OscConfig+0x324>
 8003074:	4b58      	ldr	r3, [pc, #352]	@ (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003078:	4a57      	ldr	r2, [pc, #348]	@ (80031d8 <HAL_RCC_OscConfig+0x470>)
 800307a:	f023 0301 	bic.w	r3, r3, #1
 800307e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003080:	4b55      	ldr	r3, [pc, #340]	@ (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003084:	4a54      	ldr	r2, [pc, #336]	@ (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003086:	f023 0304 	bic.w	r3, r3, #4
 800308a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d015      	beq.n	80030c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003094:	f7fe fbc4 	bl	8001820 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309a:	e00a      	b.n	80030b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309c:	f7fe fbc0 	bl	8001820 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e0cb      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b2:	4b49      	ldr	r3, [pc, #292]	@ (80031d8 <HAL_RCC_OscConfig+0x470>)
 80030b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0ee      	beq.n	800309c <HAL_RCC_OscConfig+0x334>
 80030be:	e014      	b.n	80030ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c0:	f7fe fbae 	bl	8001820 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c6:	e00a      	b.n	80030de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c8:	f7fe fbaa 	bl	8001820 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e0b5      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030de:	4b3e      	ldr	r3, [pc, #248]	@ (80031d8 <HAL_RCC_OscConfig+0x470>)
 80030e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1ee      	bne.n	80030c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030ea:	7dfb      	ldrb	r3, [r7, #23]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d105      	bne.n	80030fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f0:	4b39      	ldr	r3, [pc, #228]	@ (80031d8 <HAL_RCC_OscConfig+0x470>)
 80030f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f4:	4a38      	ldr	r2, [pc, #224]	@ (80031d8 <HAL_RCC_OscConfig+0x470>)
 80030f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 80a1 	beq.w	8003248 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003106:	4b34      	ldr	r3, [pc, #208]	@ (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b08      	cmp	r3, #8
 8003110:	d05c      	beq.n	80031cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d141      	bne.n	800319e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311a:	4b31      	ldr	r3, [pc, #196]	@ (80031e0 <HAL_RCC_OscConfig+0x478>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7fe fb7e 	bl	8001820 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003128:	f7fe fb7a 	bl	8001820 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e087      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313a:	4b27      	ldr	r3, [pc, #156]	@ (80031d8 <HAL_RCC_OscConfig+0x470>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69da      	ldr	r2, [r3, #28]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003154:	019b      	lsls	r3, r3, #6
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315c:	085b      	lsrs	r3, r3, #1
 800315e:	3b01      	subs	r3, #1
 8003160:	041b      	lsls	r3, r3, #16
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003168:	061b      	lsls	r3, r3, #24
 800316a:	491b      	ldr	r1, [pc, #108]	@ (80031d8 <HAL_RCC_OscConfig+0x470>)
 800316c:	4313      	orrs	r3, r2
 800316e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003170:	4b1b      	ldr	r3, [pc, #108]	@ (80031e0 <HAL_RCC_OscConfig+0x478>)
 8003172:	2201      	movs	r2, #1
 8003174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003176:	f7fe fb53 	bl	8001820 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317e:	f7fe fb4f 	bl	8001820 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e05c      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003190:	4b11      	ldr	r3, [pc, #68]	@ (80031d8 <HAL_RCC_OscConfig+0x470>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x416>
 800319c:	e054      	b.n	8003248 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319e:	4b10      	ldr	r3, [pc, #64]	@ (80031e0 <HAL_RCC_OscConfig+0x478>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a4:	f7fe fb3c 	bl	8001820 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ac:	f7fe fb38 	bl	8001820 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e045      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031be:	4b06      	ldr	r3, [pc, #24]	@ (80031d8 <HAL_RCC_OscConfig+0x470>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x444>
 80031ca:	e03d      	b.n	8003248 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d107      	bne.n	80031e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e038      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
 80031d8:	40023800 	.word	0x40023800
 80031dc:	40007000 	.word	0x40007000
 80031e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003254 <HAL_RCC_OscConfig+0x4ec>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d028      	beq.n	8003244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d121      	bne.n	8003244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320a:	429a      	cmp	r2, r3
 800320c:	d11a      	bne.n	8003244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003214:	4013      	ands	r3, r2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800321a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800321c:	4293      	cmp	r3, r2
 800321e:	d111      	bne.n	8003244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322a:	085b      	lsrs	r3, r3, #1
 800322c:	3b01      	subs	r3, #1
 800322e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003230:	429a      	cmp	r2, r3
 8003232:	d107      	bne.n	8003244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d001      	beq.n	8003248 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800

08003258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0cc      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800326c:	4b68      	ldr	r3, [pc, #416]	@ (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d90c      	bls.n	8003294 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327a:	4b65      	ldr	r3, [pc, #404]	@ (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003282:	4b63      	ldr	r3, [pc, #396]	@ (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	d001      	beq.n	8003294 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0b8      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d020      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032ac:	4b59      	ldr	r3, [pc, #356]	@ (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	4a58      	ldr	r2, [pc, #352]	@ (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d005      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032c4:	4b53      	ldr	r3, [pc, #332]	@ (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	4a52      	ldr	r2, [pc, #328]	@ (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d0:	4b50      	ldr	r3, [pc, #320]	@ (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	494d      	ldr	r1, [pc, #308]	@ (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d044      	beq.n	8003378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d107      	bne.n	8003306 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f6:	4b47      	ldr	r3, [pc, #284]	@ (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d119      	bne.n	8003336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e07f      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b02      	cmp	r3, #2
 800330c:	d003      	beq.n	8003316 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003312:	2b03      	cmp	r3, #3
 8003314:	d107      	bne.n	8003326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003316:	4b3f      	ldr	r3, [pc, #252]	@ (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e06f      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003326:	4b3b      	ldr	r3, [pc, #236]	@ (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e067      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003336:	4b37      	ldr	r3, [pc, #220]	@ (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f023 0203 	bic.w	r2, r3, #3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	4934      	ldr	r1, [pc, #208]	@ (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003344:	4313      	orrs	r3, r2
 8003346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003348:	f7fe fa6a 	bl	8001820 <HAL_GetTick>
 800334c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334e:	e00a      	b.n	8003366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003350:	f7fe fa66 	bl	8001820 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800335e:	4293      	cmp	r3, r2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e04f      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003366:	4b2b      	ldr	r3, [pc, #172]	@ (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 020c 	and.w	r2, r3, #12
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	429a      	cmp	r2, r3
 8003376:	d1eb      	bne.n	8003350 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003378:	4b25      	ldr	r3, [pc, #148]	@ (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d20c      	bcs.n	80033a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003386:	4b22      	ldr	r3, [pc, #136]	@ (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800338e:	4b20      	ldr	r3, [pc, #128]	@ (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	429a      	cmp	r2, r3
 800339a:	d001      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e032      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033ac:	4b19      	ldr	r3, [pc, #100]	@ (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4916      	ldr	r1, [pc, #88]	@ (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d009      	beq.n	80033de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ca:	4b12      	ldr	r3, [pc, #72]	@ (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	490e      	ldr	r1, [pc, #56]	@ (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033de:	f000 f821 	bl	8003424 <HAL_RCC_GetSysClockFreq>
 80033e2:	4602      	mov	r2, r0
 80033e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	490a      	ldr	r1, [pc, #40]	@ (8003418 <HAL_RCC_ClockConfig+0x1c0>)
 80033f0:	5ccb      	ldrb	r3, [r1, r3]
 80033f2:	fa22 f303 	lsr.w	r3, r2, r3
 80033f6:	4a09      	ldr	r2, [pc, #36]	@ (800341c <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80033fa:	4b09      	ldr	r3, [pc, #36]	@ (8003420 <HAL_RCC_ClockConfig+0x1c8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fe f9ca 	bl	8001798 <HAL_InitTick>

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40023c00 	.word	0x40023c00
 8003414:	40023800 	.word	0x40023800
 8003418:	08004850 	.word	0x08004850
 800341c:	20000000 	.word	0x20000000
 8003420:	20000004 	.word	0x20000004

08003424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003428:	b094      	sub	sp, #80	@ 0x50
 800342a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800343c:	4b79      	ldr	r3, [pc, #484]	@ (8003624 <HAL_RCC_GetSysClockFreq+0x200>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 030c 	and.w	r3, r3, #12
 8003444:	2b08      	cmp	r3, #8
 8003446:	d00d      	beq.n	8003464 <HAL_RCC_GetSysClockFreq+0x40>
 8003448:	2b08      	cmp	r3, #8
 800344a:	f200 80e1 	bhi.w	8003610 <HAL_RCC_GetSysClockFreq+0x1ec>
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <HAL_RCC_GetSysClockFreq+0x34>
 8003452:	2b04      	cmp	r3, #4
 8003454:	d003      	beq.n	800345e <HAL_RCC_GetSysClockFreq+0x3a>
 8003456:	e0db      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003458:	4b73      	ldr	r3, [pc, #460]	@ (8003628 <HAL_RCC_GetSysClockFreq+0x204>)
 800345a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800345c:	e0db      	b.n	8003616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800345e:	4b73      	ldr	r3, [pc, #460]	@ (800362c <HAL_RCC_GetSysClockFreq+0x208>)
 8003460:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003462:	e0d8      	b.n	8003616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003464:	4b6f      	ldr	r3, [pc, #444]	@ (8003624 <HAL_RCC_GetSysClockFreq+0x200>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800346c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800346e:	4b6d      	ldr	r3, [pc, #436]	@ (8003624 <HAL_RCC_GetSysClockFreq+0x200>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d063      	beq.n	8003542 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347a:	4b6a      	ldr	r3, [pc, #424]	@ (8003624 <HAL_RCC_GetSysClockFreq+0x200>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	099b      	lsrs	r3, r3, #6
 8003480:	2200      	movs	r2, #0
 8003482:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003484:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800348c:	633b      	str	r3, [r7, #48]	@ 0x30
 800348e:	2300      	movs	r3, #0
 8003490:	637b      	str	r3, [r7, #52]	@ 0x34
 8003492:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003496:	4622      	mov	r2, r4
 8003498:	462b      	mov	r3, r5
 800349a:	f04f 0000 	mov.w	r0, #0
 800349e:	f04f 0100 	mov.w	r1, #0
 80034a2:	0159      	lsls	r1, r3, #5
 80034a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034a8:	0150      	lsls	r0, r2, #5
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4621      	mov	r1, r4
 80034b0:	1a51      	subs	r1, r2, r1
 80034b2:	6139      	str	r1, [r7, #16]
 80034b4:	4629      	mov	r1, r5
 80034b6:	eb63 0301 	sbc.w	r3, r3, r1
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034c8:	4659      	mov	r1, fp
 80034ca:	018b      	lsls	r3, r1, #6
 80034cc:	4651      	mov	r1, sl
 80034ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034d2:	4651      	mov	r1, sl
 80034d4:	018a      	lsls	r2, r1, #6
 80034d6:	4651      	mov	r1, sl
 80034d8:	ebb2 0801 	subs.w	r8, r2, r1
 80034dc:	4659      	mov	r1, fp
 80034de:	eb63 0901 	sbc.w	r9, r3, r1
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034f6:	4690      	mov	r8, r2
 80034f8:	4699      	mov	r9, r3
 80034fa:	4623      	mov	r3, r4
 80034fc:	eb18 0303 	adds.w	r3, r8, r3
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	462b      	mov	r3, r5
 8003504:	eb49 0303 	adc.w	r3, r9, r3
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003516:	4629      	mov	r1, r5
 8003518:	024b      	lsls	r3, r1, #9
 800351a:	4621      	mov	r1, r4
 800351c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003520:	4621      	mov	r1, r4
 8003522:	024a      	lsls	r2, r1, #9
 8003524:	4610      	mov	r0, r2
 8003526:	4619      	mov	r1, r3
 8003528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800352a:	2200      	movs	r2, #0
 800352c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800352e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003530:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003534:	f7fd fa92 	bl	8000a5c <__aeabi_uldivmod>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4613      	mov	r3, r2
 800353e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003540:	e058      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003542:	4b38      	ldr	r3, [pc, #224]	@ (8003624 <HAL_RCC_GetSysClockFreq+0x200>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	099b      	lsrs	r3, r3, #6
 8003548:	2200      	movs	r2, #0
 800354a:	4618      	mov	r0, r3
 800354c:	4611      	mov	r1, r2
 800354e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003552:	623b      	str	r3, [r7, #32]
 8003554:	2300      	movs	r3, #0
 8003556:	627b      	str	r3, [r7, #36]	@ 0x24
 8003558:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800355c:	4642      	mov	r2, r8
 800355e:	464b      	mov	r3, r9
 8003560:	f04f 0000 	mov.w	r0, #0
 8003564:	f04f 0100 	mov.w	r1, #0
 8003568:	0159      	lsls	r1, r3, #5
 800356a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800356e:	0150      	lsls	r0, r2, #5
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4641      	mov	r1, r8
 8003576:	ebb2 0a01 	subs.w	sl, r2, r1
 800357a:	4649      	mov	r1, r9
 800357c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800358c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003590:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003594:	ebb2 040a 	subs.w	r4, r2, sl
 8003598:	eb63 050b 	sbc.w	r5, r3, fp
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	00eb      	lsls	r3, r5, #3
 80035a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035aa:	00e2      	lsls	r2, r4, #3
 80035ac:	4614      	mov	r4, r2
 80035ae:	461d      	mov	r5, r3
 80035b0:	4643      	mov	r3, r8
 80035b2:	18e3      	adds	r3, r4, r3
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	464b      	mov	r3, r9
 80035b8:	eb45 0303 	adc.w	r3, r5, r3
 80035bc:	607b      	str	r3, [r7, #4]
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ca:	4629      	mov	r1, r5
 80035cc:	028b      	lsls	r3, r1, #10
 80035ce:	4621      	mov	r1, r4
 80035d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035d4:	4621      	mov	r1, r4
 80035d6:	028a      	lsls	r2, r1, #10
 80035d8:	4610      	mov	r0, r2
 80035da:	4619      	mov	r1, r3
 80035dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035de:	2200      	movs	r2, #0
 80035e0:	61bb      	str	r3, [r7, #24]
 80035e2:	61fa      	str	r2, [r7, #28]
 80035e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035e8:	f7fd fa38 	bl	8000a5c <__aeabi_uldivmod>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4613      	mov	r3, r2
 80035f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80035f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003624 <HAL_RCC_GetSysClockFreq+0x200>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	0c1b      	lsrs	r3, r3, #16
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	3301      	adds	r3, #1
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003604:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003608:	fbb2 f3f3 	udiv	r3, r2, r3
 800360c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800360e:	e002      	b.n	8003616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003610:	4b05      	ldr	r3, [pc, #20]	@ (8003628 <HAL_RCC_GetSysClockFreq+0x204>)
 8003612:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003616:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003618:	4618      	mov	r0, r3
 800361a:	3750      	adds	r7, #80	@ 0x50
 800361c:	46bd      	mov	sp, r7
 800361e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003622:	bf00      	nop
 8003624:	40023800 	.word	0x40023800
 8003628:	00f42400 	.word	0x00f42400
 800362c:	007a1200 	.word	0x007a1200

08003630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003634:	4b03      	ldr	r3, [pc, #12]	@ (8003644 <HAL_RCC_GetHCLKFreq+0x14>)
 8003636:	681b      	ldr	r3, [r3, #0]
}
 8003638:	4618      	mov	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	20000000 	.word	0x20000000

08003648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800364c:	f7ff fff0 	bl	8003630 <HAL_RCC_GetHCLKFreq>
 8003650:	4602      	mov	r2, r0
 8003652:	4b05      	ldr	r3, [pc, #20]	@ (8003668 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	0a9b      	lsrs	r3, r3, #10
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	4903      	ldr	r1, [pc, #12]	@ (800366c <HAL_RCC_GetPCLK1Freq+0x24>)
 800365e:	5ccb      	ldrb	r3, [r1, r3]
 8003660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003664:	4618      	mov	r0, r3
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40023800 	.word	0x40023800
 800366c:	08004860 	.word	0x08004860

08003670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003674:	f7ff ffdc 	bl	8003630 <HAL_RCC_GetHCLKFreq>
 8003678:	4602      	mov	r2, r0
 800367a:	4b05      	ldr	r3, [pc, #20]	@ (8003690 <HAL_RCC_GetPCLK2Freq+0x20>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	0b5b      	lsrs	r3, r3, #13
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	4903      	ldr	r1, [pc, #12]	@ (8003694 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003686:	5ccb      	ldrb	r3, [r1, r3]
 8003688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800368c:	4618      	mov	r0, r3
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40023800 	.word	0x40023800
 8003694:	08004860 	.word	0x08004860

08003698 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e042      	b.n	8003730 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fd ff54 	bl	800156c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2224      	movs	r2, #36	@ 0x24
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f973 	bl	80039c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695a      	ldr	r2, [r3, #20]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003700:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003710:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08a      	sub	sp, #40	@ 0x28
 800373c:	af02      	add	r7, sp, #8
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	603b      	str	r3, [r7, #0]
 8003744:	4613      	mov	r3, r2
 8003746:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b20      	cmp	r3, #32
 8003756:	d175      	bne.n	8003844 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <HAL_UART_Transmit+0x2c>
 800375e:	88fb      	ldrh	r3, [r7, #6]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e06e      	b.n	8003846 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2221      	movs	r2, #33	@ 0x21
 8003772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003776:	f7fe f853 	bl	8001820 <HAL_GetTick>
 800377a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	88fa      	ldrh	r2, [r7, #6]
 8003780:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	88fa      	ldrh	r2, [r7, #6]
 8003786:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003790:	d108      	bne.n	80037a4 <HAL_UART_Transmit+0x6c>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d104      	bne.n	80037a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800379a:	2300      	movs	r3, #0
 800379c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	61bb      	str	r3, [r7, #24]
 80037a2:	e003      	b.n	80037ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037a8:	2300      	movs	r3, #0
 80037aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037ac:	e02e      	b.n	800380c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2200      	movs	r2, #0
 80037b6:	2180      	movs	r1, #128	@ 0x80
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 f848 	bl	800384e <UART_WaitOnFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e03a      	b.n	8003846 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10b      	bne.n	80037ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	3302      	adds	r3, #2
 80037ea:	61bb      	str	r3, [r7, #24]
 80037ec:	e007      	b.n	80037fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	781a      	ldrb	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	3301      	adds	r3, #1
 80037fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003810:	b29b      	uxth	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1cb      	bne.n	80037ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2200      	movs	r2, #0
 800381e:	2140      	movs	r1, #64	@ 0x40
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 f814 	bl	800384e <UART_WaitOnFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e006      	b.n	8003846 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	e000      	b.n	8003846 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003844:	2302      	movs	r3, #2
  }
}
 8003846:	4618      	mov	r0, r3
 8003848:	3720      	adds	r7, #32
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b086      	sub	sp, #24
 8003852:	af00      	add	r7, sp, #0
 8003854:	60f8      	str	r0, [r7, #12]
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	603b      	str	r3, [r7, #0]
 800385a:	4613      	mov	r3, r2
 800385c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800385e:	e03b      	b.n	80038d8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003866:	d037      	beq.n	80038d8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003868:	f7fd ffda 	bl	8001820 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	6a3a      	ldr	r2, [r7, #32]
 8003874:	429a      	cmp	r2, r3
 8003876:	d302      	bcc.n	800387e <UART_WaitOnFlagUntilTimeout+0x30>
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e03a      	b.n	80038f8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d023      	beq.n	80038d8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b80      	cmp	r3, #128	@ 0x80
 8003894:	d020      	beq.n	80038d8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b40      	cmp	r3, #64	@ 0x40
 800389a:	d01d      	beq.n	80038d8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d116      	bne.n	80038d8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f81d 	bl	8003900 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2208      	movs	r2, #8
 80038ca:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e00f      	b.n	80038f8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	4013      	ands	r3, r2
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	bf0c      	ite	eq
 80038e8:	2301      	moveq	r3, #1
 80038ea:	2300      	movne	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	461a      	mov	r2, r3
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d0b4      	beq.n	8003860 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3718      	adds	r7, #24
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003900:	b480      	push	{r7}
 8003902:	b095      	sub	sp, #84	@ 0x54
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	330c      	adds	r3, #12
 800390e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003912:	e853 3f00 	ldrex	r3, [r3]
 8003916:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800391e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	330c      	adds	r3, #12
 8003926:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003928:	643a      	str	r2, [r7, #64]	@ 0x40
 800392a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800392e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003930:	e841 2300 	strex	r3, r2, [r1]
 8003934:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1e5      	bne.n	8003908 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3314      	adds	r3, #20
 8003942:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	e853 3f00 	ldrex	r3, [r3]
 800394a:	61fb      	str	r3, [r7, #28]
   return(result);
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f023 0301 	bic.w	r3, r3, #1
 8003952:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3314      	adds	r3, #20
 800395a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800395c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800395e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003960:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003962:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003964:	e841 2300 	strex	r3, r2, [r1]
 8003968:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e5      	bne.n	800393c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003974:	2b01      	cmp	r3, #1
 8003976:	d119      	bne.n	80039ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	330c      	adds	r3, #12
 800397e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	e853 3f00 	ldrex	r3, [r3]
 8003986:	60bb      	str	r3, [r7, #8]
   return(result);
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f023 0310 	bic.w	r3, r3, #16
 800398e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	330c      	adds	r3, #12
 8003996:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003998:	61ba      	str	r2, [r7, #24]
 800399a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399c:	6979      	ldr	r1, [r7, #20]
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	e841 2300 	strex	r3, r2, [r1]
 80039a4:	613b      	str	r3, [r7, #16]
   return(result);
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1e5      	bne.n	8003978 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80039ba:	bf00      	nop
 80039bc:	3754      	adds	r7, #84	@ 0x54
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
	...

080039c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039cc:	b0c0      	sub	sp, #256	@ 0x100
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80039e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e4:	68d9      	ldr	r1, [r3, #12]
 80039e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	ea40 0301 	orr.w	r3, r0, r1
 80039f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	431a      	orrs	r2, r3
 8003a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	431a      	orrs	r2, r3
 8003a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a20:	f021 010c 	bic.w	r1, r1, #12
 8003a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a42:	6999      	ldr	r1, [r3, #24]
 8003a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	ea40 0301 	orr.w	r3, r0, r1
 8003a4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	4b8f      	ldr	r3, [pc, #572]	@ (8003c94 <UART_SetConfig+0x2cc>)
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d005      	beq.n	8003a68 <UART_SetConfig+0xa0>
 8003a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	4b8d      	ldr	r3, [pc, #564]	@ (8003c98 <UART_SetConfig+0x2d0>)
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d104      	bne.n	8003a72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a68:	f7ff fe02 	bl	8003670 <HAL_RCC_GetPCLK2Freq>
 8003a6c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a70:	e003      	b.n	8003a7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a72:	f7ff fde9 	bl	8003648 <HAL_RCC_GetPCLK1Freq>
 8003a76:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a84:	f040 810c 	bne.w	8003ca0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a92:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a9a:	4622      	mov	r2, r4
 8003a9c:	462b      	mov	r3, r5
 8003a9e:	1891      	adds	r1, r2, r2
 8003aa0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003aa2:	415b      	adcs	r3, r3
 8003aa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003aa6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003aaa:	4621      	mov	r1, r4
 8003aac:	eb12 0801 	adds.w	r8, r2, r1
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	eb43 0901 	adc.w	r9, r3, r1
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	f04f 0300 	mov.w	r3, #0
 8003abe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ac2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ac6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003aca:	4690      	mov	r8, r2
 8003acc:	4699      	mov	r9, r3
 8003ace:	4623      	mov	r3, r4
 8003ad0:	eb18 0303 	adds.w	r3, r8, r3
 8003ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ad8:	462b      	mov	r3, r5
 8003ada:	eb49 0303 	adc.w	r3, r9, r3
 8003ade:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003aee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003af2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003af6:	460b      	mov	r3, r1
 8003af8:	18db      	adds	r3, r3, r3
 8003afa:	653b      	str	r3, [r7, #80]	@ 0x50
 8003afc:	4613      	mov	r3, r2
 8003afe:	eb42 0303 	adc.w	r3, r2, r3
 8003b02:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b0c:	f7fc ffa6 	bl	8000a5c <__aeabi_uldivmod>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4b61      	ldr	r3, [pc, #388]	@ (8003c9c <UART_SetConfig+0x2d4>)
 8003b16:	fba3 2302 	umull	r2, r3, r3, r2
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	011c      	lsls	r4, r3, #4
 8003b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b22:	2200      	movs	r2, #0
 8003b24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b28:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b30:	4642      	mov	r2, r8
 8003b32:	464b      	mov	r3, r9
 8003b34:	1891      	adds	r1, r2, r2
 8003b36:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b38:	415b      	adcs	r3, r3
 8003b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b40:	4641      	mov	r1, r8
 8003b42:	eb12 0a01 	adds.w	sl, r2, r1
 8003b46:	4649      	mov	r1, r9
 8003b48:	eb43 0b01 	adc.w	fp, r3, r1
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	f04f 0300 	mov.w	r3, #0
 8003b54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b60:	4692      	mov	sl, r2
 8003b62:	469b      	mov	fp, r3
 8003b64:	4643      	mov	r3, r8
 8003b66:	eb1a 0303 	adds.w	r3, sl, r3
 8003b6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b6e:	464b      	mov	r3, r9
 8003b70:	eb4b 0303 	adc.w	r3, fp, r3
 8003b74:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b84:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	18db      	adds	r3, r3, r3
 8003b90:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b92:	4613      	mov	r3, r2
 8003b94:	eb42 0303 	adc.w	r3, r2, r3
 8003b98:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ba2:	f7fc ff5b 	bl	8000a5c <__aeabi_uldivmod>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4611      	mov	r1, r2
 8003bac:	4b3b      	ldr	r3, [pc, #236]	@ (8003c9c <UART_SetConfig+0x2d4>)
 8003bae:	fba3 2301 	umull	r2, r3, r3, r1
 8003bb2:	095b      	lsrs	r3, r3, #5
 8003bb4:	2264      	movs	r2, #100	@ 0x64
 8003bb6:	fb02 f303 	mul.w	r3, r2, r3
 8003bba:	1acb      	subs	r3, r1, r3
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003bc2:	4b36      	ldr	r3, [pc, #216]	@ (8003c9c <UART_SetConfig+0x2d4>)
 8003bc4:	fba3 2302 	umull	r2, r3, r3, r2
 8003bc8:	095b      	lsrs	r3, r3, #5
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003bd0:	441c      	add	r4, r3
 8003bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bdc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003be0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003be4:	4642      	mov	r2, r8
 8003be6:	464b      	mov	r3, r9
 8003be8:	1891      	adds	r1, r2, r2
 8003bea:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003bec:	415b      	adcs	r3, r3
 8003bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003bf4:	4641      	mov	r1, r8
 8003bf6:	1851      	adds	r1, r2, r1
 8003bf8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	414b      	adcs	r3, r1
 8003bfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c0c:	4659      	mov	r1, fp
 8003c0e:	00cb      	lsls	r3, r1, #3
 8003c10:	4651      	mov	r1, sl
 8003c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c16:	4651      	mov	r1, sl
 8003c18:	00ca      	lsls	r2, r1, #3
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4603      	mov	r3, r0
 8003c20:	4642      	mov	r2, r8
 8003c22:	189b      	adds	r3, r3, r2
 8003c24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c28:	464b      	mov	r3, r9
 8003c2a:	460a      	mov	r2, r1
 8003c2c:	eb42 0303 	adc.w	r3, r2, r3
 8003c30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c40:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c48:	460b      	mov	r3, r1
 8003c4a:	18db      	adds	r3, r3, r3
 8003c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c4e:	4613      	mov	r3, r2
 8003c50:	eb42 0303 	adc.w	r3, r2, r3
 8003c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c5e:	f7fc fefd 	bl	8000a5c <__aeabi_uldivmod>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4b0d      	ldr	r3, [pc, #52]	@ (8003c9c <UART_SetConfig+0x2d4>)
 8003c68:	fba3 1302 	umull	r1, r3, r3, r2
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	2164      	movs	r1, #100	@ 0x64
 8003c70:	fb01 f303 	mul.w	r3, r1, r3
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	3332      	adds	r3, #50	@ 0x32
 8003c7a:	4a08      	ldr	r2, [pc, #32]	@ (8003c9c <UART_SetConfig+0x2d4>)
 8003c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c80:	095b      	lsrs	r3, r3, #5
 8003c82:	f003 0207 	and.w	r2, r3, #7
 8003c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4422      	add	r2, r4
 8003c8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c90:	e106      	b.n	8003ea0 <UART_SetConfig+0x4d8>
 8003c92:	bf00      	nop
 8003c94:	40011000 	.word	0x40011000
 8003c98:	40011400 	.word	0x40011400
 8003c9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ca0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003caa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003cae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003cb2:	4642      	mov	r2, r8
 8003cb4:	464b      	mov	r3, r9
 8003cb6:	1891      	adds	r1, r2, r2
 8003cb8:	6239      	str	r1, [r7, #32]
 8003cba:	415b      	adcs	r3, r3
 8003cbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cc2:	4641      	mov	r1, r8
 8003cc4:	1854      	adds	r4, r2, r1
 8003cc6:	4649      	mov	r1, r9
 8003cc8:	eb43 0501 	adc.w	r5, r3, r1
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	00eb      	lsls	r3, r5, #3
 8003cd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cda:	00e2      	lsls	r2, r4, #3
 8003cdc:	4614      	mov	r4, r2
 8003cde:	461d      	mov	r5, r3
 8003ce0:	4643      	mov	r3, r8
 8003ce2:	18e3      	adds	r3, r4, r3
 8003ce4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ce8:	464b      	mov	r3, r9
 8003cea:	eb45 0303 	adc.w	r3, r5, r3
 8003cee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003cfe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	f04f 0300 	mov.w	r3, #0
 8003d0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d0e:	4629      	mov	r1, r5
 8003d10:	008b      	lsls	r3, r1, #2
 8003d12:	4621      	mov	r1, r4
 8003d14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d18:	4621      	mov	r1, r4
 8003d1a:	008a      	lsls	r2, r1, #2
 8003d1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d20:	f7fc fe9c 	bl	8000a5c <__aeabi_uldivmod>
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	4b60      	ldr	r3, [pc, #384]	@ (8003eac <UART_SetConfig+0x4e4>)
 8003d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d2e:	095b      	lsrs	r3, r3, #5
 8003d30:	011c      	lsls	r4, r3, #4
 8003d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d36:	2200      	movs	r2, #0
 8003d38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d3c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003d44:	4642      	mov	r2, r8
 8003d46:	464b      	mov	r3, r9
 8003d48:	1891      	adds	r1, r2, r2
 8003d4a:	61b9      	str	r1, [r7, #24]
 8003d4c:	415b      	adcs	r3, r3
 8003d4e:	61fb      	str	r3, [r7, #28]
 8003d50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d54:	4641      	mov	r1, r8
 8003d56:	1851      	adds	r1, r2, r1
 8003d58:	6139      	str	r1, [r7, #16]
 8003d5a:	4649      	mov	r1, r9
 8003d5c:	414b      	adcs	r3, r1
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d6c:	4659      	mov	r1, fp
 8003d6e:	00cb      	lsls	r3, r1, #3
 8003d70:	4651      	mov	r1, sl
 8003d72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d76:	4651      	mov	r1, sl
 8003d78:	00ca      	lsls	r2, r1, #3
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4603      	mov	r3, r0
 8003d80:	4642      	mov	r2, r8
 8003d82:	189b      	adds	r3, r3, r2
 8003d84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d88:	464b      	mov	r3, r9
 8003d8a:	460a      	mov	r2, r1
 8003d8c:	eb42 0303 	adc.w	r3, r2, r3
 8003d90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d9e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003dac:	4649      	mov	r1, r9
 8003dae:	008b      	lsls	r3, r1, #2
 8003db0:	4641      	mov	r1, r8
 8003db2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003db6:	4641      	mov	r1, r8
 8003db8:	008a      	lsls	r2, r1, #2
 8003dba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003dbe:	f7fc fe4d 	bl	8000a5c <__aeabi_uldivmod>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	4b38      	ldr	r3, [pc, #224]	@ (8003eac <UART_SetConfig+0x4e4>)
 8003dca:	fba3 2301 	umull	r2, r3, r3, r1
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	2264      	movs	r2, #100	@ 0x64
 8003dd2:	fb02 f303 	mul.w	r3, r2, r3
 8003dd6:	1acb      	subs	r3, r1, r3
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	3332      	adds	r3, #50	@ 0x32
 8003ddc:	4a33      	ldr	r2, [pc, #204]	@ (8003eac <UART_SetConfig+0x4e4>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003de8:	441c      	add	r4, r3
 8003dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dee:	2200      	movs	r2, #0
 8003df0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003df2:	677a      	str	r2, [r7, #116]	@ 0x74
 8003df4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003df8:	4642      	mov	r2, r8
 8003dfa:	464b      	mov	r3, r9
 8003dfc:	1891      	adds	r1, r2, r2
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	415b      	adcs	r3, r3
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e08:	4641      	mov	r1, r8
 8003e0a:	1851      	adds	r1, r2, r1
 8003e0c:	6039      	str	r1, [r7, #0]
 8003e0e:	4649      	mov	r1, r9
 8003e10:	414b      	adcs	r3, r1
 8003e12:	607b      	str	r3, [r7, #4]
 8003e14:	f04f 0200 	mov.w	r2, #0
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e20:	4659      	mov	r1, fp
 8003e22:	00cb      	lsls	r3, r1, #3
 8003e24:	4651      	mov	r1, sl
 8003e26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e2a:	4651      	mov	r1, sl
 8003e2c:	00ca      	lsls	r2, r1, #3
 8003e2e:	4610      	mov	r0, r2
 8003e30:	4619      	mov	r1, r3
 8003e32:	4603      	mov	r3, r0
 8003e34:	4642      	mov	r2, r8
 8003e36:	189b      	adds	r3, r3, r2
 8003e38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e3a:	464b      	mov	r3, r9
 8003e3c:	460a      	mov	r2, r1
 8003e3e:	eb42 0303 	adc.w	r3, r2, r3
 8003e42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e4e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e5c:	4649      	mov	r1, r9
 8003e5e:	008b      	lsls	r3, r1, #2
 8003e60:	4641      	mov	r1, r8
 8003e62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e66:	4641      	mov	r1, r8
 8003e68:	008a      	lsls	r2, r1, #2
 8003e6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e6e:	f7fc fdf5 	bl	8000a5c <__aeabi_uldivmod>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4b0d      	ldr	r3, [pc, #52]	@ (8003eac <UART_SetConfig+0x4e4>)
 8003e78:	fba3 1302 	umull	r1, r3, r3, r2
 8003e7c:	095b      	lsrs	r3, r3, #5
 8003e7e:	2164      	movs	r1, #100	@ 0x64
 8003e80:	fb01 f303 	mul.w	r3, r1, r3
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	3332      	adds	r3, #50	@ 0x32
 8003e8a:	4a08      	ldr	r2, [pc, #32]	@ (8003eac <UART_SetConfig+0x4e4>)
 8003e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e90:	095b      	lsrs	r3, r3, #5
 8003e92:	f003 020f 	and.w	r2, r3, #15
 8003e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4422      	add	r2, r4
 8003e9e:	609a      	str	r2, [r3, #8]
}
 8003ea0:	bf00      	nop
 8003ea2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eac:	51eb851f 	.word	0x51eb851f

08003eb0 <siprintf>:
 8003eb0:	b40e      	push	{r1, r2, r3}
 8003eb2:	b500      	push	{lr}
 8003eb4:	b09c      	sub	sp, #112	@ 0x70
 8003eb6:	ab1d      	add	r3, sp, #116	@ 0x74
 8003eb8:	9002      	str	r0, [sp, #8]
 8003eba:	9006      	str	r0, [sp, #24]
 8003ebc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003ec0:	4809      	ldr	r0, [pc, #36]	@ (8003ee8 <siprintf+0x38>)
 8003ec2:	9107      	str	r1, [sp, #28]
 8003ec4:	9104      	str	r1, [sp, #16]
 8003ec6:	4909      	ldr	r1, [pc, #36]	@ (8003eec <siprintf+0x3c>)
 8003ec8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ecc:	9105      	str	r1, [sp, #20]
 8003ece:	6800      	ldr	r0, [r0, #0]
 8003ed0:	9301      	str	r3, [sp, #4]
 8003ed2:	a902      	add	r1, sp, #8
 8003ed4:	f000 f994 	bl	8004200 <_svfiprintf_r>
 8003ed8:	9b02      	ldr	r3, [sp, #8]
 8003eda:	2200      	movs	r2, #0
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	b01c      	add	sp, #112	@ 0x70
 8003ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ee4:	b003      	add	sp, #12
 8003ee6:	4770      	bx	lr
 8003ee8:	2000000c 	.word	0x2000000c
 8003eec:	ffff0208 	.word	0xffff0208

08003ef0 <memset>:
 8003ef0:	4402      	add	r2, r0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d100      	bne.n	8003efa <memset+0xa>
 8003ef8:	4770      	bx	lr
 8003efa:	f803 1b01 	strb.w	r1, [r3], #1
 8003efe:	e7f9      	b.n	8003ef4 <memset+0x4>

08003f00 <__errno>:
 8003f00:	4b01      	ldr	r3, [pc, #4]	@ (8003f08 <__errno+0x8>)
 8003f02:	6818      	ldr	r0, [r3, #0]
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	2000000c 	.word	0x2000000c

08003f0c <__libc_init_array>:
 8003f0c:	b570      	push	{r4, r5, r6, lr}
 8003f0e:	4d0d      	ldr	r5, [pc, #52]	@ (8003f44 <__libc_init_array+0x38>)
 8003f10:	4c0d      	ldr	r4, [pc, #52]	@ (8003f48 <__libc_init_array+0x3c>)
 8003f12:	1b64      	subs	r4, r4, r5
 8003f14:	10a4      	asrs	r4, r4, #2
 8003f16:	2600      	movs	r6, #0
 8003f18:	42a6      	cmp	r6, r4
 8003f1a:	d109      	bne.n	8003f30 <__libc_init_array+0x24>
 8003f1c:	4d0b      	ldr	r5, [pc, #44]	@ (8003f4c <__libc_init_array+0x40>)
 8003f1e:	4c0c      	ldr	r4, [pc, #48]	@ (8003f50 <__libc_init_array+0x44>)
 8003f20:	f000 fc66 	bl	80047f0 <_init>
 8003f24:	1b64      	subs	r4, r4, r5
 8003f26:	10a4      	asrs	r4, r4, #2
 8003f28:	2600      	movs	r6, #0
 8003f2a:	42a6      	cmp	r6, r4
 8003f2c:	d105      	bne.n	8003f3a <__libc_init_array+0x2e>
 8003f2e:	bd70      	pop	{r4, r5, r6, pc}
 8003f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f34:	4798      	blx	r3
 8003f36:	3601      	adds	r6, #1
 8003f38:	e7ee      	b.n	8003f18 <__libc_init_array+0xc>
 8003f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f3e:	4798      	blx	r3
 8003f40:	3601      	adds	r6, #1
 8003f42:	e7f2      	b.n	8003f2a <__libc_init_array+0x1e>
 8003f44:	080048a4 	.word	0x080048a4
 8003f48:	080048a4 	.word	0x080048a4
 8003f4c:	080048a4 	.word	0x080048a4
 8003f50:	080048a8 	.word	0x080048a8

08003f54 <__retarget_lock_acquire_recursive>:
 8003f54:	4770      	bx	lr

08003f56 <__retarget_lock_release_recursive>:
 8003f56:	4770      	bx	lr

08003f58 <_free_r>:
 8003f58:	b538      	push	{r3, r4, r5, lr}
 8003f5a:	4605      	mov	r5, r0
 8003f5c:	2900      	cmp	r1, #0
 8003f5e:	d041      	beq.n	8003fe4 <_free_r+0x8c>
 8003f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f64:	1f0c      	subs	r4, r1, #4
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	bfb8      	it	lt
 8003f6a:	18e4      	addlt	r4, r4, r3
 8003f6c:	f000 f8e0 	bl	8004130 <__malloc_lock>
 8003f70:	4a1d      	ldr	r2, [pc, #116]	@ (8003fe8 <_free_r+0x90>)
 8003f72:	6813      	ldr	r3, [r2, #0]
 8003f74:	b933      	cbnz	r3, 8003f84 <_free_r+0x2c>
 8003f76:	6063      	str	r3, [r4, #4]
 8003f78:	6014      	str	r4, [r2, #0]
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f80:	f000 b8dc 	b.w	800413c <__malloc_unlock>
 8003f84:	42a3      	cmp	r3, r4
 8003f86:	d908      	bls.n	8003f9a <_free_r+0x42>
 8003f88:	6820      	ldr	r0, [r4, #0]
 8003f8a:	1821      	adds	r1, r4, r0
 8003f8c:	428b      	cmp	r3, r1
 8003f8e:	bf01      	itttt	eq
 8003f90:	6819      	ldreq	r1, [r3, #0]
 8003f92:	685b      	ldreq	r3, [r3, #4]
 8003f94:	1809      	addeq	r1, r1, r0
 8003f96:	6021      	streq	r1, [r4, #0]
 8003f98:	e7ed      	b.n	8003f76 <_free_r+0x1e>
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	b10b      	cbz	r3, 8003fa4 <_free_r+0x4c>
 8003fa0:	42a3      	cmp	r3, r4
 8003fa2:	d9fa      	bls.n	8003f9a <_free_r+0x42>
 8003fa4:	6811      	ldr	r1, [r2, #0]
 8003fa6:	1850      	adds	r0, r2, r1
 8003fa8:	42a0      	cmp	r0, r4
 8003faa:	d10b      	bne.n	8003fc4 <_free_r+0x6c>
 8003fac:	6820      	ldr	r0, [r4, #0]
 8003fae:	4401      	add	r1, r0
 8003fb0:	1850      	adds	r0, r2, r1
 8003fb2:	4283      	cmp	r3, r0
 8003fb4:	6011      	str	r1, [r2, #0]
 8003fb6:	d1e0      	bne.n	8003f7a <_free_r+0x22>
 8003fb8:	6818      	ldr	r0, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	6053      	str	r3, [r2, #4]
 8003fbe:	4408      	add	r0, r1
 8003fc0:	6010      	str	r0, [r2, #0]
 8003fc2:	e7da      	b.n	8003f7a <_free_r+0x22>
 8003fc4:	d902      	bls.n	8003fcc <_free_r+0x74>
 8003fc6:	230c      	movs	r3, #12
 8003fc8:	602b      	str	r3, [r5, #0]
 8003fca:	e7d6      	b.n	8003f7a <_free_r+0x22>
 8003fcc:	6820      	ldr	r0, [r4, #0]
 8003fce:	1821      	adds	r1, r4, r0
 8003fd0:	428b      	cmp	r3, r1
 8003fd2:	bf04      	itt	eq
 8003fd4:	6819      	ldreq	r1, [r3, #0]
 8003fd6:	685b      	ldreq	r3, [r3, #4]
 8003fd8:	6063      	str	r3, [r4, #4]
 8003fda:	bf04      	itt	eq
 8003fdc:	1809      	addeq	r1, r1, r0
 8003fde:	6021      	streq	r1, [r4, #0]
 8003fe0:	6054      	str	r4, [r2, #4]
 8003fe2:	e7ca      	b.n	8003f7a <_free_r+0x22>
 8003fe4:	bd38      	pop	{r3, r4, r5, pc}
 8003fe6:	bf00      	nop
 8003fe8:	200002f0 	.word	0x200002f0

08003fec <sbrk_aligned>:
 8003fec:	b570      	push	{r4, r5, r6, lr}
 8003fee:	4e0f      	ldr	r6, [pc, #60]	@ (800402c <sbrk_aligned+0x40>)
 8003ff0:	460c      	mov	r4, r1
 8003ff2:	6831      	ldr	r1, [r6, #0]
 8003ff4:	4605      	mov	r5, r0
 8003ff6:	b911      	cbnz	r1, 8003ffe <sbrk_aligned+0x12>
 8003ff8:	f000 fba6 	bl	8004748 <_sbrk_r>
 8003ffc:	6030      	str	r0, [r6, #0]
 8003ffe:	4621      	mov	r1, r4
 8004000:	4628      	mov	r0, r5
 8004002:	f000 fba1 	bl	8004748 <_sbrk_r>
 8004006:	1c43      	adds	r3, r0, #1
 8004008:	d103      	bne.n	8004012 <sbrk_aligned+0x26>
 800400a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800400e:	4620      	mov	r0, r4
 8004010:	bd70      	pop	{r4, r5, r6, pc}
 8004012:	1cc4      	adds	r4, r0, #3
 8004014:	f024 0403 	bic.w	r4, r4, #3
 8004018:	42a0      	cmp	r0, r4
 800401a:	d0f8      	beq.n	800400e <sbrk_aligned+0x22>
 800401c:	1a21      	subs	r1, r4, r0
 800401e:	4628      	mov	r0, r5
 8004020:	f000 fb92 	bl	8004748 <_sbrk_r>
 8004024:	3001      	adds	r0, #1
 8004026:	d1f2      	bne.n	800400e <sbrk_aligned+0x22>
 8004028:	e7ef      	b.n	800400a <sbrk_aligned+0x1e>
 800402a:	bf00      	nop
 800402c:	200002ec 	.word	0x200002ec

08004030 <_malloc_r>:
 8004030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004034:	1ccd      	adds	r5, r1, #3
 8004036:	f025 0503 	bic.w	r5, r5, #3
 800403a:	3508      	adds	r5, #8
 800403c:	2d0c      	cmp	r5, #12
 800403e:	bf38      	it	cc
 8004040:	250c      	movcc	r5, #12
 8004042:	2d00      	cmp	r5, #0
 8004044:	4606      	mov	r6, r0
 8004046:	db01      	blt.n	800404c <_malloc_r+0x1c>
 8004048:	42a9      	cmp	r1, r5
 800404a:	d904      	bls.n	8004056 <_malloc_r+0x26>
 800404c:	230c      	movs	r3, #12
 800404e:	6033      	str	r3, [r6, #0]
 8004050:	2000      	movs	r0, #0
 8004052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004056:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800412c <_malloc_r+0xfc>
 800405a:	f000 f869 	bl	8004130 <__malloc_lock>
 800405e:	f8d8 3000 	ldr.w	r3, [r8]
 8004062:	461c      	mov	r4, r3
 8004064:	bb44      	cbnz	r4, 80040b8 <_malloc_r+0x88>
 8004066:	4629      	mov	r1, r5
 8004068:	4630      	mov	r0, r6
 800406a:	f7ff ffbf 	bl	8003fec <sbrk_aligned>
 800406e:	1c43      	adds	r3, r0, #1
 8004070:	4604      	mov	r4, r0
 8004072:	d158      	bne.n	8004126 <_malloc_r+0xf6>
 8004074:	f8d8 4000 	ldr.w	r4, [r8]
 8004078:	4627      	mov	r7, r4
 800407a:	2f00      	cmp	r7, #0
 800407c:	d143      	bne.n	8004106 <_malloc_r+0xd6>
 800407e:	2c00      	cmp	r4, #0
 8004080:	d04b      	beq.n	800411a <_malloc_r+0xea>
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	4639      	mov	r1, r7
 8004086:	4630      	mov	r0, r6
 8004088:	eb04 0903 	add.w	r9, r4, r3
 800408c:	f000 fb5c 	bl	8004748 <_sbrk_r>
 8004090:	4581      	cmp	r9, r0
 8004092:	d142      	bne.n	800411a <_malloc_r+0xea>
 8004094:	6821      	ldr	r1, [r4, #0]
 8004096:	1a6d      	subs	r5, r5, r1
 8004098:	4629      	mov	r1, r5
 800409a:	4630      	mov	r0, r6
 800409c:	f7ff ffa6 	bl	8003fec <sbrk_aligned>
 80040a0:	3001      	adds	r0, #1
 80040a2:	d03a      	beq.n	800411a <_malloc_r+0xea>
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	442b      	add	r3, r5
 80040a8:	6023      	str	r3, [r4, #0]
 80040aa:	f8d8 3000 	ldr.w	r3, [r8]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	bb62      	cbnz	r2, 800410c <_malloc_r+0xdc>
 80040b2:	f8c8 7000 	str.w	r7, [r8]
 80040b6:	e00f      	b.n	80040d8 <_malloc_r+0xa8>
 80040b8:	6822      	ldr	r2, [r4, #0]
 80040ba:	1b52      	subs	r2, r2, r5
 80040bc:	d420      	bmi.n	8004100 <_malloc_r+0xd0>
 80040be:	2a0b      	cmp	r2, #11
 80040c0:	d917      	bls.n	80040f2 <_malloc_r+0xc2>
 80040c2:	1961      	adds	r1, r4, r5
 80040c4:	42a3      	cmp	r3, r4
 80040c6:	6025      	str	r5, [r4, #0]
 80040c8:	bf18      	it	ne
 80040ca:	6059      	strne	r1, [r3, #4]
 80040cc:	6863      	ldr	r3, [r4, #4]
 80040ce:	bf08      	it	eq
 80040d0:	f8c8 1000 	streq.w	r1, [r8]
 80040d4:	5162      	str	r2, [r4, r5]
 80040d6:	604b      	str	r3, [r1, #4]
 80040d8:	4630      	mov	r0, r6
 80040da:	f000 f82f 	bl	800413c <__malloc_unlock>
 80040de:	f104 000b 	add.w	r0, r4, #11
 80040e2:	1d23      	adds	r3, r4, #4
 80040e4:	f020 0007 	bic.w	r0, r0, #7
 80040e8:	1ac2      	subs	r2, r0, r3
 80040ea:	bf1c      	itt	ne
 80040ec:	1a1b      	subne	r3, r3, r0
 80040ee:	50a3      	strne	r3, [r4, r2]
 80040f0:	e7af      	b.n	8004052 <_malloc_r+0x22>
 80040f2:	6862      	ldr	r2, [r4, #4]
 80040f4:	42a3      	cmp	r3, r4
 80040f6:	bf0c      	ite	eq
 80040f8:	f8c8 2000 	streq.w	r2, [r8]
 80040fc:	605a      	strne	r2, [r3, #4]
 80040fe:	e7eb      	b.n	80040d8 <_malloc_r+0xa8>
 8004100:	4623      	mov	r3, r4
 8004102:	6864      	ldr	r4, [r4, #4]
 8004104:	e7ae      	b.n	8004064 <_malloc_r+0x34>
 8004106:	463c      	mov	r4, r7
 8004108:	687f      	ldr	r7, [r7, #4]
 800410a:	e7b6      	b.n	800407a <_malloc_r+0x4a>
 800410c:	461a      	mov	r2, r3
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	42a3      	cmp	r3, r4
 8004112:	d1fb      	bne.n	800410c <_malloc_r+0xdc>
 8004114:	2300      	movs	r3, #0
 8004116:	6053      	str	r3, [r2, #4]
 8004118:	e7de      	b.n	80040d8 <_malloc_r+0xa8>
 800411a:	230c      	movs	r3, #12
 800411c:	6033      	str	r3, [r6, #0]
 800411e:	4630      	mov	r0, r6
 8004120:	f000 f80c 	bl	800413c <__malloc_unlock>
 8004124:	e794      	b.n	8004050 <_malloc_r+0x20>
 8004126:	6005      	str	r5, [r0, #0]
 8004128:	e7d6      	b.n	80040d8 <_malloc_r+0xa8>
 800412a:	bf00      	nop
 800412c:	200002f0 	.word	0x200002f0

08004130 <__malloc_lock>:
 8004130:	4801      	ldr	r0, [pc, #4]	@ (8004138 <__malloc_lock+0x8>)
 8004132:	f7ff bf0f 	b.w	8003f54 <__retarget_lock_acquire_recursive>
 8004136:	bf00      	nop
 8004138:	200002e8 	.word	0x200002e8

0800413c <__malloc_unlock>:
 800413c:	4801      	ldr	r0, [pc, #4]	@ (8004144 <__malloc_unlock+0x8>)
 800413e:	f7ff bf0a 	b.w	8003f56 <__retarget_lock_release_recursive>
 8004142:	bf00      	nop
 8004144:	200002e8 	.word	0x200002e8

08004148 <__ssputs_r>:
 8004148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800414c:	688e      	ldr	r6, [r1, #8]
 800414e:	461f      	mov	r7, r3
 8004150:	42be      	cmp	r6, r7
 8004152:	680b      	ldr	r3, [r1, #0]
 8004154:	4682      	mov	sl, r0
 8004156:	460c      	mov	r4, r1
 8004158:	4690      	mov	r8, r2
 800415a:	d82d      	bhi.n	80041b8 <__ssputs_r+0x70>
 800415c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004160:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004164:	d026      	beq.n	80041b4 <__ssputs_r+0x6c>
 8004166:	6965      	ldr	r5, [r4, #20]
 8004168:	6909      	ldr	r1, [r1, #16]
 800416a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800416e:	eba3 0901 	sub.w	r9, r3, r1
 8004172:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004176:	1c7b      	adds	r3, r7, #1
 8004178:	444b      	add	r3, r9
 800417a:	106d      	asrs	r5, r5, #1
 800417c:	429d      	cmp	r5, r3
 800417e:	bf38      	it	cc
 8004180:	461d      	movcc	r5, r3
 8004182:	0553      	lsls	r3, r2, #21
 8004184:	d527      	bpl.n	80041d6 <__ssputs_r+0x8e>
 8004186:	4629      	mov	r1, r5
 8004188:	f7ff ff52 	bl	8004030 <_malloc_r>
 800418c:	4606      	mov	r6, r0
 800418e:	b360      	cbz	r0, 80041ea <__ssputs_r+0xa2>
 8004190:	6921      	ldr	r1, [r4, #16]
 8004192:	464a      	mov	r2, r9
 8004194:	f000 fae8 	bl	8004768 <memcpy>
 8004198:	89a3      	ldrh	r3, [r4, #12]
 800419a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800419e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041a2:	81a3      	strh	r3, [r4, #12]
 80041a4:	6126      	str	r6, [r4, #16]
 80041a6:	6165      	str	r5, [r4, #20]
 80041a8:	444e      	add	r6, r9
 80041aa:	eba5 0509 	sub.w	r5, r5, r9
 80041ae:	6026      	str	r6, [r4, #0]
 80041b0:	60a5      	str	r5, [r4, #8]
 80041b2:	463e      	mov	r6, r7
 80041b4:	42be      	cmp	r6, r7
 80041b6:	d900      	bls.n	80041ba <__ssputs_r+0x72>
 80041b8:	463e      	mov	r6, r7
 80041ba:	6820      	ldr	r0, [r4, #0]
 80041bc:	4632      	mov	r2, r6
 80041be:	4641      	mov	r1, r8
 80041c0:	f000 faa8 	bl	8004714 <memmove>
 80041c4:	68a3      	ldr	r3, [r4, #8]
 80041c6:	1b9b      	subs	r3, r3, r6
 80041c8:	60a3      	str	r3, [r4, #8]
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	4433      	add	r3, r6
 80041ce:	6023      	str	r3, [r4, #0]
 80041d0:	2000      	movs	r0, #0
 80041d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041d6:	462a      	mov	r2, r5
 80041d8:	f000 fad4 	bl	8004784 <_realloc_r>
 80041dc:	4606      	mov	r6, r0
 80041de:	2800      	cmp	r0, #0
 80041e0:	d1e0      	bne.n	80041a4 <__ssputs_r+0x5c>
 80041e2:	6921      	ldr	r1, [r4, #16]
 80041e4:	4650      	mov	r0, sl
 80041e6:	f7ff feb7 	bl	8003f58 <_free_r>
 80041ea:	230c      	movs	r3, #12
 80041ec:	f8ca 3000 	str.w	r3, [sl]
 80041f0:	89a3      	ldrh	r3, [r4, #12]
 80041f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041f6:	81a3      	strh	r3, [r4, #12]
 80041f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80041fc:	e7e9      	b.n	80041d2 <__ssputs_r+0x8a>
	...

08004200 <_svfiprintf_r>:
 8004200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004204:	4698      	mov	r8, r3
 8004206:	898b      	ldrh	r3, [r1, #12]
 8004208:	061b      	lsls	r3, r3, #24
 800420a:	b09d      	sub	sp, #116	@ 0x74
 800420c:	4607      	mov	r7, r0
 800420e:	460d      	mov	r5, r1
 8004210:	4614      	mov	r4, r2
 8004212:	d510      	bpl.n	8004236 <_svfiprintf_r+0x36>
 8004214:	690b      	ldr	r3, [r1, #16]
 8004216:	b973      	cbnz	r3, 8004236 <_svfiprintf_r+0x36>
 8004218:	2140      	movs	r1, #64	@ 0x40
 800421a:	f7ff ff09 	bl	8004030 <_malloc_r>
 800421e:	6028      	str	r0, [r5, #0]
 8004220:	6128      	str	r0, [r5, #16]
 8004222:	b930      	cbnz	r0, 8004232 <_svfiprintf_r+0x32>
 8004224:	230c      	movs	r3, #12
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800422c:	b01d      	add	sp, #116	@ 0x74
 800422e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004232:	2340      	movs	r3, #64	@ 0x40
 8004234:	616b      	str	r3, [r5, #20]
 8004236:	2300      	movs	r3, #0
 8004238:	9309      	str	r3, [sp, #36]	@ 0x24
 800423a:	2320      	movs	r3, #32
 800423c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004240:	f8cd 800c 	str.w	r8, [sp, #12]
 8004244:	2330      	movs	r3, #48	@ 0x30
 8004246:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80043e4 <_svfiprintf_r+0x1e4>
 800424a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800424e:	f04f 0901 	mov.w	r9, #1
 8004252:	4623      	mov	r3, r4
 8004254:	469a      	mov	sl, r3
 8004256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800425a:	b10a      	cbz	r2, 8004260 <_svfiprintf_r+0x60>
 800425c:	2a25      	cmp	r2, #37	@ 0x25
 800425e:	d1f9      	bne.n	8004254 <_svfiprintf_r+0x54>
 8004260:	ebba 0b04 	subs.w	fp, sl, r4
 8004264:	d00b      	beq.n	800427e <_svfiprintf_r+0x7e>
 8004266:	465b      	mov	r3, fp
 8004268:	4622      	mov	r2, r4
 800426a:	4629      	mov	r1, r5
 800426c:	4638      	mov	r0, r7
 800426e:	f7ff ff6b 	bl	8004148 <__ssputs_r>
 8004272:	3001      	adds	r0, #1
 8004274:	f000 80a7 	beq.w	80043c6 <_svfiprintf_r+0x1c6>
 8004278:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800427a:	445a      	add	r2, fp
 800427c:	9209      	str	r2, [sp, #36]	@ 0x24
 800427e:	f89a 3000 	ldrb.w	r3, [sl]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 809f 	beq.w	80043c6 <_svfiprintf_r+0x1c6>
 8004288:	2300      	movs	r3, #0
 800428a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800428e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004292:	f10a 0a01 	add.w	sl, sl, #1
 8004296:	9304      	str	r3, [sp, #16]
 8004298:	9307      	str	r3, [sp, #28]
 800429a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800429e:	931a      	str	r3, [sp, #104]	@ 0x68
 80042a0:	4654      	mov	r4, sl
 80042a2:	2205      	movs	r2, #5
 80042a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042a8:	484e      	ldr	r0, [pc, #312]	@ (80043e4 <_svfiprintf_r+0x1e4>)
 80042aa:	f7fb ff99 	bl	80001e0 <memchr>
 80042ae:	9a04      	ldr	r2, [sp, #16]
 80042b0:	b9d8      	cbnz	r0, 80042ea <_svfiprintf_r+0xea>
 80042b2:	06d0      	lsls	r0, r2, #27
 80042b4:	bf44      	itt	mi
 80042b6:	2320      	movmi	r3, #32
 80042b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042bc:	0711      	lsls	r1, r2, #28
 80042be:	bf44      	itt	mi
 80042c0:	232b      	movmi	r3, #43	@ 0x2b
 80042c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042c6:	f89a 3000 	ldrb.w	r3, [sl]
 80042ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80042cc:	d015      	beq.n	80042fa <_svfiprintf_r+0xfa>
 80042ce:	9a07      	ldr	r2, [sp, #28]
 80042d0:	4654      	mov	r4, sl
 80042d2:	2000      	movs	r0, #0
 80042d4:	f04f 0c0a 	mov.w	ip, #10
 80042d8:	4621      	mov	r1, r4
 80042da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042de:	3b30      	subs	r3, #48	@ 0x30
 80042e0:	2b09      	cmp	r3, #9
 80042e2:	d94b      	bls.n	800437c <_svfiprintf_r+0x17c>
 80042e4:	b1b0      	cbz	r0, 8004314 <_svfiprintf_r+0x114>
 80042e6:	9207      	str	r2, [sp, #28]
 80042e8:	e014      	b.n	8004314 <_svfiprintf_r+0x114>
 80042ea:	eba0 0308 	sub.w	r3, r0, r8
 80042ee:	fa09 f303 	lsl.w	r3, r9, r3
 80042f2:	4313      	orrs	r3, r2
 80042f4:	9304      	str	r3, [sp, #16]
 80042f6:	46a2      	mov	sl, r4
 80042f8:	e7d2      	b.n	80042a0 <_svfiprintf_r+0xa0>
 80042fa:	9b03      	ldr	r3, [sp, #12]
 80042fc:	1d19      	adds	r1, r3, #4
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	9103      	str	r1, [sp, #12]
 8004302:	2b00      	cmp	r3, #0
 8004304:	bfbb      	ittet	lt
 8004306:	425b      	neglt	r3, r3
 8004308:	f042 0202 	orrlt.w	r2, r2, #2
 800430c:	9307      	strge	r3, [sp, #28]
 800430e:	9307      	strlt	r3, [sp, #28]
 8004310:	bfb8      	it	lt
 8004312:	9204      	strlt	r2, [sp, #16]
 8004314:	7823      	ldrb	r3, [r4, #0]
 8004316:	2b2e      	cmp	r3, #46	@ 0x2e
 8004318:	d10a      	bne.n	8004330 <_svfiprintf_r+0x130>
 800431a:	7863      	ldrb	r3, [r4, #1]
 800431c:	2b2a      	cmp	r3, #42	@ 0x2a
 800431e:	d132      	bne.n	8004386 <_svfiprintf_r+0x186>
 8004320:	9b03      	ldr	r3, [sp, #12]
 8004322:	1d1a      	adds	r2, r3, #4
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	9203      	str	r2, [sp, #12]
 8004328:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800432c:	3402      	adds	r4, #2
 800432e:	9305      	str	r3, [sp, #20]
 8004330:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80043f4 <_svfiprintf_r+0x1f4>
 8004334:	7821      	ldrb	r1, [r4, #0]
 8004336:	2203      	movs	r2, #3
 8004338:	4650      	mov	r0, sl
 800433a:	f7fb ff51 	bl	80001e0 <memchr>
 800433e:	b138      	cbz	r0, 8004350 <_svfiprintf_r+0x150>
 8004340:	9b04      	ldr	r3, [sp, #16]
 8004342:	eba0 000a 	sub.w	r0, r0, sl
 8004346:	2240      	movs	r2, #64	@ 0x40
 8004348:	4082      	lsls	r2, r0
 800434a:	4313      	orrs	r3, r2
 800434c:	3401      	adds	r4, #1
 800434e:	9304      	str	r3, [sp, #16]
 8004350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004354:	4824      	ldr	r0, [pc, #144]	@ (80043e8 <_svfiprintf_r+0x1e8>)
 8004356:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800435a:	2206      	movs	r2, #6
 800435c:	f7fb ff40 	bl	80001e0 <memchr>
 8004360:	2800      	cmp	r0, #0
 8004362:	d036      	beq.n	80043d2 <_svfiprintf_r+0x1d2>
 8004364:	4b21      	ldr	r3, [pc, #132]	@ (80043ec <_svfiprintf_r+0x1ec>)
 8004366:	bb1b      	cbnz	r3, 80043b0 <_svfiprintf_r+0x1b0>
 8004368:	9b03      	ldr	r3, [sp, #12]
 800436a:	3307      	adds	r3, #7
 800436c:	f023 0307 	bic.w	r3, r3, #7
 8004370:	3308      	adds	r3, #8
 8004372:	9303      	str	r3, [sp, #12]
 8004374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004376:	4433      	add	r3, r6
 8004378:	9309      	str	r3, [sp, #36]	@ 0x24
 800437a:	e76a      	b.n	8004252 <_svfiprintf_r+0x52>
 800437c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004380:	460c      	mov	r4, r1
 8004382:	2001      	movs	r0, #1
 8004384:	e7a8      	b.n	80042d8 <_svfiprintf_r+0xd8>
 8004386:	2300      	movs	r3, #0
 8004388:	3401      	adds	r4, #1
 800438a:	9305      	str	r3, [sp, #20]
 800438c:	4619      	mov	r1, r3
 800438e:	f04f 0c0a 	mov.w	ip, #10
 8004392:	4620      	mov	r0, r4
 8004394:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004398:	3a30      	subs	r2, #48	@ 0x30
 800439a:	2a09      	cmp	r2, #9
 800439c:	d903      	bls.n	80043a6 <_svfiprintf_r+0x1a6>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0c6      	beq.n	8004330 <_svfiprintf_r+0x130>
 80043a2:	9105      	str	r1, [sp, #20]
 80043a4:	e7c4      	b.n	8004330 <_svfiprintf_r+0x130>
 80043a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80043aa:	4604      	mov	r4, r0
 80043ac:	2301      	movs	r3, #1
 80043ae:	e7f0      	b.n	8004392 <_svfiprintf_r+0x192>
 80043b0:	ab03      	add	r3, sp, #12
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	462a      	mov	r2, r5
 80043b6:	4b0e      	ldr	r3, [pc, #56]	@ (80043f0 <_svfiprintf_r+0x1f0>)
 80043b8:	a904      	add	r1, sp, #16
 80043ba:	4638      	mov	r0, r7
 80043bc:	f3af 8000 	nop.w
 80043c0:	1c42      	adds	r2, r0, #1
 80043c2:	4606      	mov	r6, r0
 80043c4:	d1d6      	bne.n	8004374 <_svfiprintf_r+0x174>
 80043c6:	89ab      	ldrh	r3, [r5, #12]
 80043c8:	065b      	lsls	r3, r3, #25
 80043ca:	f53f af2d 	bmi.w	8004228 <_svfiprintf_r+0x28>
 80043ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80043d0:	e72c      	b.n	800422c <_svfiprintf_r+0x2c>
 80043d2:	ab03      	add	r3, sp, #12
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	462a      	mov	r2, r5
 80043d8:	4b05      	ldr	r3, [pc, #20]	@ (80043f0 <_svfiprintf_r+0x1f0>)
 80043da:	a904      	add	r1, sp, #16
 80043dc:	4638      	mov	r0, r7
 80043de:	f000 f879 	bl	80044d4 <_printf_i>
 80043e2:	e7ed      	b.n	80043c0 <_svfiprintf_r+0x1c0>
 80043e4:	08004868 	.word	0x08004868
 80043e8:	08004872 	.word	0x08004872
 80043ec:	00000000 	.word	0x00000000
 80043f0:	08004149 	.word	0x08004149
 80043f4:	0800486e 	.word	0x0800486e

080043f8 <_printf_common>:
 80043f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043fc:	4616      	mov	r6, r2
 80043fe:	4698      	mov	r8, r3
 8004400:	688a      	ldr	r2, [r1, #8]
 8004402:	690b      	ldr	r3, [r1, #16]
 8004404:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004408:	4293      	cmp	r3, r2
 800440a:	bfb8      	it	lt
 800440c:	4613      	movlt	r3, r2
 800440e:	6033      	str	r3, [r6, #0]
 8004410:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004414:	4607      	mov	r7, r0
 8004416:	460c      	mov	r4, r1
 8004418:	b10a      	cbz	r2, 800441e <_printf_common+0x26>
 800441a:	3301      	adds	r3, #1
 800441c:	6033      	str	r3, [r6, #0]
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	0699      	lsls	r1, r3, #26
 8004422:	bf42      	ittt	mi
 8004424:	6833      	ldrmi	r3, [r6, #0]
 8004426:	3302      	addmi	r3, #2
 8004428:	6033      	strmi	r3, [r6, #0]
 800442a:	6825      	ldr	r5, [r4, #0]
 800442c:	f015 0506 	ands.w	r5, r5, #6
 8004430:	d106      	bne.n	8004440 <_printf_common+0x48>
 8004432:	f104 0a19 	add.w	sl, r4, #25
 8004436:	68e3      	ldr	r3, [r4, #12]
 8004438:	6832      	ldr	r2, [r6, #0]
 800443a:	1a9b      	subs	r3, r3, r2
 800443c:	42ab      	cmp	r3, r5
 800443e:	dc26      	bgt.n	800448e <_printf_common+0x96>
 8004440:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004444:	6822      	ldr	r2, [r4, #0]
 8004446:	3b00      	subs	r3, #0
 8004448:	bf18      	it	ne
 800444a:	2301      	movne	r3, #1
 800444c:	0692      	lsls	r2, r2, #26
 800444e:	d42b      	bmi.n	80044a8 <_printf_common+0xb0>
 8004450:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004454:	4641      	mov	r1, r8
 8004456:	4638      	mov	r0, r7
 8004458:	47c8      	blx	r9
 800445a:	3001      	adds	r0, #1
 800445c:	d01e      	beq.n	800449c <_printf_common+0xa4>
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	6922      	ldr	r2, [r4, #16]
 8004462:	f003 0306 	and.w	r3, r3, #6
 8004466:	2b04      	cmp	r3, #4
 8004468:	bf02      	ittt	eq
 800446a:	68e5      	ldreq	r5, [r4, #12]
 800446c:	6833      	ldreq	r3, [r6, #0]
 800446e:	1aed      	subeq	r5, r5, r3
 8004470:	68a3      	ldr	r3, [r4, #8]
 8004472:	bf0c      	ite	eq
 8004474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004478:	2500      	movne	r5, #0
 800447a:	4293      	cmp	r3, r2
 800447c:	bfc4      	itt	gt
 800447e:	1a9b      	subgt	r3, r3, r2
 8004480:	18ed      	addgt	r5, r5, r3
 8004482:	2600      	movs	r6, #0
 8004484:	341a      	adds	r4, #26
 8004486:	42b5      	cmp	r5, r6
 8004488:	d11a      	bne.n	80044c0 <_printf_common+0xc8>
 800448a:	2000      	movs	r0, #0
 800448c:	e008      	b.n	80044a0 <_printf_common+0xa8>
 800448e:	2301      	movs	r3, #1
 8004490:	4652      	mov	r2, sl
 8004492:	4641      	mov	r1, r8
 8004494:	4638      	mov	r0, r7
 8004496:	47c8      	blx	r9
 8004498:	3001      	adds	r0, #1
 800449a:	d103      	bne.n	80044a4 <_printf_common+0xac>
 800449c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a4:	3501      	adds	r5, #1
 80044a6:	e7c6      	b.n	8004436 <_printf_common+0x3e>
 80044a8:	18e1      	adds	r1, r4, r3
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	2030      	movs	r0, #48	@ 0x30
 80044ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80044b2:	4422      	add	r2, r4
 80044b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80044b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80044bc:	3302      	adds	r3, #2
 80044be:	e7c7      	b.n	8004450 <_printf_common+0x58>
 80044c0:	2301      	movs	r3, #1
 80044c2:	4622      	mov	r2, r4
 80044c4:	4641      	mov	r1, r8
 80044c6:	4638      	mov	r0, r7
 80044c8:	47c8      	blx	r9
 80044ca:	3001      	adds	r0, #1
 80044cc:	d0e6      	beq.n	800449c <_printf_common+0xa4>
 80044ce:	3601      	adds	r6, #1
 80044d0:	e7d9      	b.n	8004486 <_printf_common+0x8e>
	...

080044d4 <_printf_i>:
 80044d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044d8:	7e0f      	ldrb	r7, [r1, #24]
 80044da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80044dc:	2f78      	cmp	r7, #120	@ 0x78
 80044de:	4691      	mov	r9, r2
 80044e0:	4680      	mov	r8, r0
 80044e2:	460c      	mov	r4, r1
 80044e4:	469a      	mov	sl, r3
 80044e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80044ea:	d807      	bhi.n	80044fc <_printf_i+0x28>
 80044ec:	2f62      	cmp	r7, #98	@ 0x62
 80044ee:	d80a      	bhi.n	8004506 <_printf_i+0x32>
 80044f0:	2f00      	cmp	r7, #0
 80044f2:	f000 80d2 	beq.w	800469a <_printf_i+0x1c6>
 80044f6:	2f58      	cmp	r7, #88	@ 0x58
 80044f8:	f000 80b9 	beq.w	800466e <_printf_i+0x19a>
 80044fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004500:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004504:	e03a      	b.n	800457c <_printf_i+0xa8>
 8004506:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800450a:	2b15      	cmp	r3, #21
 800450c:	d8f6      	bhi.n	80044fc <_printf_i+0x28>
 800450e:	a101      	add	r1, pc, #4	@ (adr r1, 8004514 <_printf_i+0x40>)
 8004510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004514:	0800456d 	.word	0x0800456d
 8004518:	08004581 	.word	0x08004581
 800451c:	080044fd 	.word	0x080044fd
 8004520:	080044fd 	.word	0x080044fd
 8004524:	080044fd 	.word	0x080044fd
 8004528:	080044fd 	.word	0x080044fd
 800452c:	08004581 	.word	0x08004581
 8004530:	080044fd 	.word	0x080044fd
 8004534:	080044fd 	.word	0x080044fd
 8004538:	080044fd 	.word	0x080044fd
 800453c:	080044fd 	.word	0x080044fd
 8004540:	08004681 	.word	0x08004681
 8004544:	080045ab 	.word	0x080045ab
 8004548:	0800463b 	.word	0x0800463b
 800454c:	080044fd 	.word	0x080044fd
 8004550:	080044fd 	.word	0x080044fd
 8004554:	080046a3 	.word	0x080046a3
 8004558:	080044fd 	.word	0x080044fd
 800455c:	080045ab 	.word	0x080045ab
 8004560:	080044fd 	.word	0x080044fd
 8004564:	080044fd 	.word	0x080044fd
 8004568:	08004643 	.word	0x08004643
 800456c:	6833      	ldr	r3, [r6, #0]
 800456e:	1d1a      	adds	r2, r3, #4
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6032      	str	r2, [r6, #0]
 8004574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004578:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800457c:	2301      	movs	r3, #1
 800457e:	e09d      	b.n	80046bc <_printf_i+0x1e8>
 8004580:	6833      	ldr	r3, [r6, #0]
 8004582:	6820      	ldr	r0, [r4, #0]
 8004584:	1d19      	adds	r1, r3, #4
 8004586:	6031      	str	r1, [r6, #0]
 8004588:	0606      	lsls	r6, r0, #24
 800458a:	d501      	bpl.n	8004590 <_printf_i+0xbc>
 800458c:	681d      	ldr	r5, [r3, #0]
 800458e:	e003      	b.n	8004598 <_printf_i+0xc4>
 8004590:	0645      	lsls	r5, r0, #25
 8004592:	d5fb      	bpl.n	800458c <_printf_i+0xb8>
 8004594:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004598:	2d00      	cmp	r5, #0
 800459a:	da03      	bge.n	80045a4 <_printf_i+0xd0>
 800459c:	232d      	movs	r3, #45	@ 0x2d
 800459e:	426d      	negs	r5, r5
 80045a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045a4:	4859      	ldr	r0, [pc, #356]	@ (800470c <_printf_i+0x238>)
 80045a6:	230a      	movs	r3, #10
 80045a8:	e011      	b.n	80045ce <_printf_i+0xfa>
 80045aa:	6821      	ldr	r1, [r4, #0]
 80045ac:	6833      	ldr	r3, [r6, #0]
 80045ae:	0608      	lsls	r0, r1, #24
 80045b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80045b4:	d402      	bmi.n	80045bc <_printf_i+0xe8>
 80045b6:	0649      	lsls	r1, r1, #25
 80045b8:	bf48      	it	mi
 80045ba:	b2ad      	uxthmi	r5, r5
 80045bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80045be:	4853      	ldr	r0, [pc, #332]	@ (800470c <_printf_i+0x238>)
 80045c0:	6033      	str	r3, [r6, #0]
 80045c2:	bf14      	ite	ne
 80045c4:	230a      	movne	r3, #10
 80045c6:	2308      	moveq	r3, #8
 80045c8:	2100      	movs	r1, #0
 80045ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80045ce:	6866      	ldr	r6, [r4, #4]
 80045d0:	60a6      	str	r6, [r4, #8]
 80045d2:	2e00      	cmp	r6, #0
 80045d4:	bfa2      	ittt	ge
 80045d6:	6821      	ldrge	r1, [r4, #0]
 80045d8:	f021 0104 	bicge.w	r1, r1, #4
 80045dc:	6021      	strge	r1, [r4, #0]
 80045de:	b90d      	cbnz	r5, 80045e4 <_printf_i+0x110>
 80045e0:	2e00      	cmp	r6, #0
 80045e2:	d04b      	beq.n	800467c <_printf_i+0x1a8>
 80045e4:	4616      	mov	r6, r2
 80045e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80045ea:	fb03 5711 	mls	r7, r3, r1, r5
 80045ee:	5dc7      	ldrb	r7, [r0, r7]
 80045f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045f4:	462f      	mov	r7, r5
 80045f6:	42bb      	cmp	r3, r7
 80045f8:	460d      	mov	r5, r1
 80045fa:	d9f4      	bls.n	80045e6 <_printf_i+0x112>
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d10b      	bne.n	8004618 <_printf_i+0x144>
 8004600:	6823      	ldr	r3, [r4, #0]
 8004602:	07df      	lsls	r7, r3, #31
 8004604:	d508      	bpl.n	8004618 <_printf_i+0x144>
 8004606:	6923      	ldr	r3, [r4, #16]
 8004608:	6861      	ldr	r1, [r4, #4]
 800460a:	4299      	cmp	r1, r3
 800460c:	bfde      	ittt	le
 800460e:	2330      	movle	r3, #48	@ 0x30
 8004610:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004614:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004618:	1b92      	subs	r2, r2, r6
 800461a:	6122      	str	r2, [r4, #16]
 800461c:	f8cd a000 	str.w	sl, [sp]
 8004620:	464b      	mov	r3, r9
 8004622:	aa03      	add	r2, sp, #12
 8004624:	4621      	mov	r1, r4
 8004626:	4640      	mov	r0, r8
 8004628:	f7ff fee6 	bl	80043f8 <_printf_common>
 800462c:	3001      	adds	r0, #1
 800462e:	d14a      	bne.n	80046c6 <_printf_i+0x1f2>
 8004630:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004634:	b004      	add	sp, #16
 8004636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	f043 0320 	orr.w	r3, r3, #32
 8004640:	6023      	str	r3, [r4, #0]
 8004642:	4833      	ldr	r0, [pc, #204]	@ (8004710 <_printf_i+0x23c>)
 8004644:	2778      	movs	r7, #120	@ 0x78
 8004646:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	6831      	ldr	r1, [r6, #0]
 800464e:	061f      	lsls	r7, r3, #24
 8004650:	f851 5b04 	ldr.w	r5, [r1], #4
 8004654:	d402      	bmi.n	800465c <_printf_i+0x188>
 8004656:	065f      	lsls	r7, r3, #25
 8004658:	bf48      	it	mi
 800465a:	b2ad      	uxthmi	r5, r5
 800465c:	6031      	str	r1, [r6, #0]
 800465e:	07d9      	lsls	r1, r3, #31
 8004660:	bf44      	itt	mi
 8004662:	f043 0320 	orrmi.w	r3, r3, #32
 8004666:	6023      	strmi	r3, [r4, #0]
 8004668:	b11d      	cbz	r5, 8004672 <_printf_i+0x19e>
 800466a:	2310      	movs	r3, #16
 800466c:	e7ac      	b.n	80045c8 <_printf_i+0xf4>
 800466e:	4827      	ldr	r0, [pc, #156]	@ (800470c <_printf_i+0x238>)
 8004670:	e7e9      	b.n	8004646 <_printf_i+0x172>
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	f023 0320 	bic.w	r3, r3, #32
 8004678:	6023      	str	r3, [r4, #0]
 800467a:	e7f6      	b.n	800466a <_printf_i+0x196>
 800467c:	4616      	mov	r6, r2
 800467e:	e7bd      	b.n	80045fc <_printf_i+0x128>
 8004680:	6833      	ldr	r3, [r6, #0]
 8004682:	6825      	ldr	r5, [r4, #0]
 8004684:	6961      	ldr	r1, [r4, #20]
 8004686:	1d18      	adds	r0, r3, #4
 8004688:	6030      	str	r0, [r6, #0]
 800468a:	062e      	lsls	r6, r5, #24
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	d501      	bpl.n	8004694 <_printf_i+0x1c0>
 8004690:	6019      	str	r1, [r3, #0]
 8004692:	e002      	b.n	800469a <_printf_i+0x1c6>
 8004694:	0668      	lsls	r0, r5, #25
 8004696:	d5fb      	bpl.n	8004690 <_printf_i+0x1bc>
 8004698:	8019      	strh	r1, [r3, #0]
 800469a:	2300      	movs	r3, #0
 800469c:	6123      	str	r3, [r4, #16]
 800469e:	4616      	mov	r6, r2
 80046a0:	e7bc      	b.n	800461c <_printf_i+0x148>
 80046a2:	6833      	ldr	r3, [r6, #0]
 80046a4:	1d1a      	adds	r2, r3, #4
 80046a6:	6032      	str	r2, [r6, #0]
 80046a8:	681e      	ldr	r6, [r3, #0]
 80046aa:	6862      	ldr	r2, [r4, #4]
 80046ac:	2100      	movs	r1, #0
 80046ae:	4630      	mov	r0, r6
 80046b0:	f7fb fd96 	bl	80001e0 <memchr>
 80046b4:	b108      	cbz	r0, 80046ba <_printf_i+0x1e6>
 80046b6:	1b80      	subs	r0, r0, r6
 80046b8:	6060      	str	r0, [r4, #4]
 80046ba:	6863      	ldr	r3, [r4, #4]
 80046bc:	6123      	str	r3, [r4, #16]
 80046be:	2300      	movs	r3, #0
 80046c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046c4:	e7aa      	b.n	800461c <_printf_i+0x148>
 80046c6:	6923      	ldr	r3, [r4, #16]
 80046c8:	4632      	mov	r2, r6
 80046ca:	4649      	mov	r1, r9
 80046cc:	4640      	mov	r0, r8
 80046ce:	47d0      	blx	sl
 80046d0:	3001      	adds	r0, #1
 80046d2:	d0ad      	beq.n	8004630 <_printf_i+0x15c>
 80046d4:	6823      	ldr	r3, [r4, #0]
 80046d6:	079b      	lsls	r3, r3, #30
 80046d8:	d413      	bmi.n	8004702 <_printf_i+0x22e>
 80046da:	68e0      	ldr	r0, [r4, #12]
 80046dc:	9b03      	ldr	r3, [sp, #12]
 80046de:	4298      	cmp	r0, r3
 80046e0:	bfb8      	it	lt
 80046e2:	4618      	movlt	r0, r3
 80046e4:	e7a6      	b.n	8004634 <_printf_i+0x160>
 80046e6:	2301      	movs	r3, #1
 80046e8:	4632      	mov	r2, r6
 80046ea:	4649      	mov	r1, r9
 80046ec:	4640      	mov	r0, r8
 80046ee:	47d0      	blx	sl
 80046f0:	3001      	adds	r0, #1
 80046f2:	d09d      	beq.n	8004630 <_printf_i+0x15c>
 80046f4:	3501      	adds	r5, #1
 80046f6:	68e3      	ldr	r3, [r4, #12]
 80046f8:	9903      	ldr	r1, [sp, #12]
 80046fa:	1a5b      	subs	r3, r3, r1
 80046fc:	42ab      	cmp	r3, r5
 80046fe:	dcf2      	bgt.n	80046e6 <_printf_i+0x212>
 8004700:	e7eb      	b.n	80046da <_printf_i+0x206>
 8004702:	2500      	movs	r5, #0
 8004704:	f104 0619 	add.w	r6, r4, #25
 8004708:	e7f5      	b.n	80046f6 <_printf_i+0x222>
 800470a:	bf00      	nop
 800470c:	08004879 	.word	0x08004879
 8004710:	0800488a 	.word	0x0800488a

08004714 <memmove>:
 8004714:	4288      	cmp	r0, r1
 8004716:	b510      	push	{r4, lr}
 8004718:	eb01 0402 	add.w	r4, r1, r2
 800471c:	d902      	bls.n	8004724 <memmove+0x10>
 800471e:	4284      	cmp	r4, r0
 8004720:	4623      	mov	r3, r4
 8004722:	d807      	bhi.n	8004734 <memmove+0x20>
 8004724:	1e43      	subs	r3, r0, #1
 8004726:	42a1      	cmp	r1, r4
 8004728:	d008      	beq.n	800473c <memmove+0x28>
 800472a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800472e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004732:	e7f8      	b.n	8004726 <memmove+0x12>
 8004734:	4402      	add	r2, r0
 8004736:	4601      	mov	r1, r0
 8004738:	428a      	cmp	r2, r1
 800473a:	d100      	bne.n	800473e <memmove+0x2a>
 800473c:	bd10      	pop	{r4, pc}
 800473e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004746:	e7f7      	b.n	8004738 <memmove+0x24>

08004748 <_sbrk_r>:
 8004748:	b538      	push	{r3, r4, r5, lr}
 800474a:	4d06      	ldr	r5, [pc, #24]	@ (8004764 <_sbrk_r+0x1c>)
 800474c:	2300      	movs	r3, #0
 800474e:	4604      	mov	r4, r0
 8004750:	4608      	mov	r0, r1
 8004752:	602b      	str	r3, [r5, #0]
 8004754:	f7fc ff8c 	bl	8001670 <_sbrk>
 8004758:	1c43      	adds	r3, r0, #1
 800475a:	d102      	bne.n	8004762 <_sbrk_r+0x1a>
 800475c:	682b      	ldr	r3, [r5, #0]
 800475e:	b103      	cbz	r3, 8004762 <_sbrk_r+0x1a>
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	bd38      	pop	{r3, r4, r5, pc}
 8004764:	200002e4 	.word	0x200002e4

08004768 <memcpy>:
 8004768:	440a      	add	r2, r1
 800476a:	4291      	cmp	r1, r2
 800476c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004770:	d100      	bne.n	8004774 <memcpy+0xc>
 8004772:	4770      	bx	lr
 8004774:	b510      	push	{r4, lr}
 8004776:	f811 4b01 	ldrb.w	r4, [r1], #1
 800477a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800477e:	4291      	cmp	r1, r2
 8004780:	d1f9      	bne.n	8004776 <memcpy+0xe>
 8004782:	bd10      	pop	{r4, pc}

08004784 <_realloc_r>:
 8004784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004788:	4680      	mov	r8, r0
 800478a:	4615      	mov	r5, r2
 800478c:	460c      	mov	r4, r1
 800478e:	b921      	cbnz	r1, 800479a <_realloc_r+0x16>
 8004790:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004794:	4611      	mov	r1, r2
 8004796:	f7ff bc4b 	b.w	8004030 <_malloc_r>
 800479a:	b92a      	cbnz	r2, 80047a8 <_realloc_r+0x24>
 800479c:	f7ff fbdc 	bl	8003f58 <_free_r>
 80047a0:	2400      	movs	r4, #0
 80047a2:	4620      	mov	r0, r4
 80047a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047a8:	f000 f81a 	bl	80047e0 <_malloc_usable_size_r>
 80047ac:	4285      	cmp	r5, r0
 80047ae:	4606      	mov	r6, r0
 80047b0:	d802      	bhi.n	80047b8 <_realloc_r+0x34>
 80047b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80047b6:	d8f4      	bhi.n	80047a2 <_realloc_r+0x1e>
 80047b8:	4629      	mov	r1, r5
 80047ba:	4640      	mov	r0, r8
 80047bc:	f7ff fc38 	bl	8004030 <_malloc_r>
 80047c0:	4607      	mov	r7, r0
 80047c2:	2800      	cmp	r0, #0
 80047c4:	d0ec      	beq.n	80047a0 <_realloc_r+0x1c>
 80047c6:	42b5      	cmp	r5, r6
 80047c8:	462a      	mov	r2, r5
 80047ca:	4621      	mov	r1, r4
 80047cc:	bf28      	it	cs
 80047ce:	4632      	movcs	r2, r6
 80047d0:	f7ff ffca 	bl	8004768 <memcpy>
 80047d4:	4621      	mov	r1, r4
 80047d6:	4640      	mov	r0, r8
 80047d8:	f7ff fbbe 	bl	8003f58 <_free_r>
 80047dc:	463c      	mov	r4, r7
 80047de:	e7e0      	b.n	80047a2 <_realloc_r+0x1e>

080047e0 <_malloc_usable_size_r>:
 80047e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047e4:	1f18      	subs	r0, r3, #4
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	bfbc      	itt	lt
 80047ea:	580b      	ldrlt	r3, [r1, r0]
 80047ec:	18c0      	addlt	r0, r0, r3
 80047ee:	4770      	bx	lr

080047f0 <_init>:
 80047f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f2:	bf00      	nop
 80047f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047f6:	bc08      	pop	{r3}
 80047f8:	469e      	mov	lr, r3
 80047fa:	4770      	bx	lr

080047fc <_fini>:
 80047fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fe:	bf00      	nop
 8004800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004802:	bc08      	pop	{r3}
 8004804:	469e      	mov	lr, r3
 8004806:	4770      	bx	lr
